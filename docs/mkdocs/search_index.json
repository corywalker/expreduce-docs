{
    "docs": [
        {
            "location": "/", 
            "text": "Expreduce\n\n\nExpreduce implements a language with specialized constructs for term rewriting. It is a neat language for a computer algebra system because it is able to express expression manipulation steps in a form very similar to standard math equations. For example, the product rule in calculus can be expressed as:\n\n\nD\n[\na_\n*\nb_\n,\nx_\n]\n \n:=\n \nD\n[\na\n,\nx\n]\n*\nb\n \n+\n \na\n*\nD\n[\nb\n,\nx\n]\n\n\n\n\n\n\nNow that the kernel understands the product rule, when it later encounters a pattern matching the above LHS, it will recursively apply the product rule until the expression stabilizes.\n\n\nThe term rewriting system and pattern matching engine is fairly advanced. The computer algebra system at this stage is extremely limited, but simple calculus and algebraic manipulation is certainly supported (see examples below). If you are looking for a more mature computer algebra system, please consider using Mathematica (proprietary) or Mathics (open source, Sympy-backed).\n\n\nSource code\n\n\nExpreduce is \non GitHub\n.\n\n\nInstallation\n\n\ngo get github.com/corywalker/expreduce/expreduce\n\n# It will complain about undefined Assets. To fix this, cd to the\n# \nGOPATH\n/src/github.com/corywalker/expreduce directory and run:\n\ngo generate ./...\n\n\n\n\n\nExample\n\n\nTo run the example CAS prompt:\n\n\ncd example\ngo run calc.go\n\n\n\n\n\n#\n \ngo\n \nrun\n \ncalc\n.\ngo\n\n\n\nWelcome\n \nto\n \nExpreduce\n!\n\n\n\nIn\n[\n1\n]\n:=\n \nD\n[\nCos\n[\nLog\n[\nSin\n[\nx\n]]\n+\nx\n]\n+\nx\n,\nx\n]\n\n\n\nOut\n[\n1\n]\n=\n \n(\n1\n \n+\n \n(\n-\n1\n \n*\n \n(\n1\n \n+\n \nCot\n[\nx\n])\n \n*\n \nSin\n[(\nx\n \n+\n \nLog\n[\nSin\n[\nx\n]])]))\n\n\n\nIn\n[\n2\n]\n:=\n \nIntegrate\n[\n5\n*\nE\n^\n(\n3\n*\nx\n),{\nx\n,\n2\n,\na\n}]\n \n//\n \nExpand\n\n\n\nOut\n[\n2\n]\n=\n \n((\n-\n5\n/\n3\n \n*\n \nE\n^\n6\n)\n \n+\n \n(\n5\n/\n3\n \n*\n \nE\n^\n(\n3\n \n*\n \na\n)))\n\n\n\nIn\n[\n3\n]\n:=\n \nFactorSquareFree\n[\n1\n \n-\n \n2\n*\nx\n^\n2\n \n+\n \nx\n^\n4\n]\n\n\n\nOut\n[\n3\n]\n=\n \n(\n-\n1\n \n+\n \nx\n^\n2\n)\n^\n2\n\n\n\nIn\n[\n4\n]\n:=\n \nSum\n[\ni\n,\n \n{\ni\n,\n \n1\n,\n \nn\n}]\n\n\n\nOut\n[\n4\n]\n=\n \n(\n1\n/\n2\n \n*\n \nn\n \n*\n \n(\n1\n \n+\n \nn\n))\n\n\n\nIn\n[\n5\n]\n:=\n \nTogether\n[(\n1\n/\n2\n \n+\n \n3\n/\na\n)\n^\n2\n+\nb\n/\nc\n]\n\n\n\nOut\n[\n5\n]\n=\n \n(\n1\n/\n4\n \n*\n \na\n^-\n2\n \n*\n \nc\n^-\n1\n \n*\n \n((\n4\n \n*\n \na\n^\n2\n \n*\n \nb\n)\n \n+\n \n(\n36\n \n*\n \nc\n)\n \n+\n \n(\n12\n \n*\n \na\n \n*\n \nc\n)\n \n+\n \n(\na\n^\n2\n \n*\n \nc\n)))\n\n\n\nIn\n[\n6\n]\n:=\n \n40\n!\n\n\n\nOut\n[\n6\n]\n=\n \n815915283247897734345611269596115894272000000000\n\n\n\nIn\n[\n7\n]\n:=\n \nSolve\n[\nx\n^\n2\n-\nx\n-\n2.5\n==\n0\n,\nx\n]\n\n\n\nOut\n[\n7\n]\n=\n \n{{(\nx\n)\n \n-\n \n(\n-\n1.15831\n)},\n \n{(\nx\n)\n \n-\n \n(\n2.15831\n)}}\n\n\n\n\n\n\nOther projects\n\n\nExpreduce is indeed very similar to Mathics, a similar term rewriting system that uses Sympy as a backend for CAS operations. I created expreduce for a few reasons. The first is that I wanted to learn everything I could about term rewriting systems. The second is that I believe the syntax implemented in here is better suited for building a computer algebra system than using Python to manipulate expressions (as Sympy, and thus Mathics does). Using a language with first-class support for pattern matching and replacement across expression trees is ideal for writing a computer algebra system. This combined with an optimized core can lead to efficient and informed evaluation without much translation work for the programmer when translating equations to code.\n\n\nCurrent limitations\n\n\nWhen the engine applies rules for a given symbol, it tries to match the most \"specific\" rules first. The current definition of specificity is basic now, but can certainly be improved upon. It works in most cases but I can envision cases where it will be wrong. Right now there is no way to override the order of rule application, but it should be simple to add in the future.\n\n\nThe pattern matching system can be very slow, especially when working with \nOrderless\n expressions with many terms. This is because correctly matching such terms often involves checking many different permutations of a pattern until one finds a match. My theory right now is that the current matching system is behaving naively and that it can be modified to speed things up.\n\n\nFuture directions\n\n\nI'm interested in trying to apply Golang's concurrency paradigms to the evaluation sequence. Some low hanging fruit would be to have parallel computation of mapping pure functions onto Lists or other expressions (computing the derivative of a list expressions). Similarly, supporting automatic threading of Listable functions would be nice (computing sin(x) of a large array). The evaluation of an expression often starts with evaluating each of the parameters at the beginning. This could potentially be made concurrent as well. A more complicated but very interesting application would be to break down the pattern matching engine into concurrent components. We would have to be very careful about side effects here, so we might need to overhaul our scoping constructs or somehow restrict access to the EvalState. Another option would be to create a function that predicts if another function has side effects (is this feasible?). A true prediction could allow the system to fall back to non-concurrent evaluation.\n\n\nSince there are at least two other replacement engines that implement the same syntax that I know of (\nanother one here\n), it would could be useful to decide on a standard link protocol such that the replacement engine is independent of the rules that run on top of it. Another layer of abstraction is the frontend. Really the hierarchy goes as follows: core \n- rules \n- frontend. It would be nice to see all of these functions factored out and interchangeable.\n\n\nAlso of interest is to build up some formal theory on the rule definitions. There should be some pre-existing literature on this, as term-rewriting is a studied field. Some interesting questions to answer are:\n\n\n\n\nGiven a set of rules for a symbol (or the universe of rules?), can we find duplicates or reduce the set of rules to the most fundamental ones? Answering such a question would improve the efficiency and clarity of the system.\n\n\nGiven a set of rules for a symbol (or the universe of rules?), can we prove that the recursive rewrites will terminate? It is fairly easy to write a rule that loops on itself or in cooperation with other rules. Of course, we should remove from consideration some of the imperative symbols such as \nWhile\n and \nFor\n. Even with these imperative functions removed, is this question still the halting problem? Can we restrict our considerations enough such that the problem is not the halting problem? Answering this question would improve the stability of the system.\n\n\n\n\nDevelopment\n\n\nTo run the tests:\n\n\ncd expreduce\ngo test", 
            "title": "Home"
        }, 
        {
            "location": "/#expreduce", 
            "text": "Expreduce implements a language with specialized constructs for term rewriting. It is a neat language for a computer algebra system because it is able to express expression manipulation steps in a form very similar to standard math equations. For example, the product rule in calculus can be expressed as:  D [ a_ * b_ , x_ ]   :=   D [ a , x ] * b   +   a * D [ b , x ]   Now that the kernel understands the product rule, when it later encounters a pattern matching the above LHS, it will recursively apply the product rule until the expression stabilizes.  The term rewriting system and pattern matching engine is fairly advanced. The computer algebra system at this stage is extremely limited, but simple calculus and algebraic manipulation is certainly supported (see examples below). If you are looking for a more mature computer algebra system, please consider using Mathematica (proprietary) or Mathics (open source, Sympy-backed).", 
            "title": "Expreduce"
        }, 
        {
            "location": "/#source-code", 
            "text": "Expreduce is  on GitHub .", 
            "title": "Source code"
        }, 
        {
            "location": "/#installation", 
            "text": "go get github.com/corywalker/expreduce/expreduce\n\n# It will complain about undefined Assets. To fix this, cd to the\n#  GOPATH /src/github.com/corywalker/expreduce directory and run:\n\ngo generate ./...", 
            "title": "Installation"
        }, 
        {
            "location": "/#example", 
            "text": "To run the example CAS prompt:  cd example\ngo run calc.go  #   go   run   calc . go  Welcome   to   Expreduce !  In [ 1 ] :=   D [ Cos [ Log [ Sin [ x ]] + x ] + x , x ]  Out [ 1 ] =   ( 1   +   ( - 1   *   ( 1   +   Cot [ x ])   *   Sin [( x   +   Log [ Sin [ x ]])]))  In [ 2 ] :=   Integrate [ 5 * E ^ ( 3 * x ),{ x , 2 , a }]   //   Expand  Out [ 2 ] =   (( - 5 / 3   *   E ^ 6 )   +   ( 5 / 3   *   E ^ ( 3   *   a )))  In [ 3 ] :=   FactorSquareFree [ 1   -   2 * x ^ 2   +   x ^ 4 ]  Out [ 3 ] =   ( - 1   +   x ^ 2 ) ^ 2  In [ 4 ] :=   Sum [ i ,   { i ,   1 ,   n }]  Out [ 4 ] =   ( 1 / 2   *   n   *   ( 1   +   n ))  In [ 5 ] :=   Together [( 1 / 2   +   3 / a ) ^ 2 + b / c ]  Out [ 5 ] =   ( 1 / 4   *   a ^- 2   *   c ^- 1   *   (( 4   *   a ^ 2   *   b )   +   ( 36   *   c )   +   ( 12   *   a   *   c )   +   ( a ^ 2   *   c )))  In [ 6 ] :=   40 !  Out [ 6 ] =   815915283247897734345611269596115894272000000000  In [ 7 ] :=   Solve [ x ^ 2 - x - 2.5 == 0 , x ]  Out [ 7 ] =   {{( x )   -   ( - 1.15831 )},   {( x )   -   ( 2.15831 )}}", 
            "title": "Example"
        }, 
        {
            "location": "/#other-projects", 
            "text": "Expreduce is indeed very similar to Mathics, a similar term rewriting system that uses Sympy as a backend for CAS operations. I created expreduce for a few reasons. The first is that I wanted to learn everything I could about term rewriting systems. The second is that I believe the syntax implemented in here is better suited for building a computer algebra system than using Python to manipulate expressions (as Sympy, and thus Mathics does). Using a language with first-class support for pattern matching and replacement across expression trees is ideal for writing a computer algebra system. This combined with an optimized core can lead to efficient and informed evaluation without much translation work for the programmer when translating equations to code.", 
            "title": "Other projects"
        }, 
        {
            "location": "/#current-limitations", 
            "text": "When the engine applies rules for a given symbol, it tries to match the most \"specific\" rules first. The current definition of specificity is basic now, but can certainly be improved upon. It works in most cases but I can envision cases where it will be wrong. Right now there is no way to override the order of rule application, but it should be simple to add in the future.  The pattern matching system can be very slow, especially when working with  Orderless  expressions with many terms. This is because correctly matching such terms often involves checking many different permutations of a pattern until one finds a match. My theory right now is that the current matching system is behaving naively and that it can be modified to speed things up.", 
            "title": "Current limitations"
        }, 
        {
            "location": "/#future-directions", 
            "text": "I'm interested in trying to apply Golang's concurrency paradigms to the evaluation sequence. Some low hanging fruit would be to have parallel computation of mapping pure functions onto Lists or other expressions (computing the derivative of a list expressions). Similarly, supporting automatic threading of Listable functions would be nice (computing sin(x) of a large array). The evaluation of an expression often starts with evaluating each of the parameters at the beginning. This could potentially be made concurrent as well. A more complicated but very interesting application would be to break down the pattern matching engine into concurrent components. We would have to be very careful about side effects here, so we might need to overhaul our scoping constructs or somehow restrict access to the EvalState. Another option would be to create a function that predicts if another function has side effects (is this feasible?). A true prediction could allow the system to fall back to non-concurrent evaluation.  Since there are at least two other replacement engines that implement the same syntax that I know of ( another one here ), it would could be useful to decide on a standard link protocol such that the replacement engine is independent of the rules that run on top of it. Another layer of abstraction is the frontend. Really the hierarchy goes as follows: core  - rules  - frontend. It would be nice to see all of these functions factored out and interchangeable.  Also of interest is to build up some formal theory on the rule definitions. There should be some pre-existing literature on this, as term-rewriting is a studied field. Some interesting questions to answer are:   Given a set of rules for a symbol (or the universe of rules?), can we find duplicates or reduce the set of rules to the most fundamental ones? Answering such a question would improve the efficiency and clarity of the system.  Given a set of rules for a symbol (or the universe of rules?), can we prove that the recursive rewrites will terminate? It is fairly easy to write a rule that loops on itself or in cooperation with other rules. Of course, we should remove from consideration some of the imperative symbols such as  While  and  For . Even with these imperative functions removed, is this question still the halting problem? Can we restrict our considerations enough such that the problem is not the halting problem? Answering this question would improve the stability of the system.", 
            "title": "Future directions"
        }, 
        {
            "location": "/#development", 
            "text": "To run the tests:  cd expreduce\ngo test", 
            "title": "Development"
        }, 
        {
            "location": "/builtin/combinatorics/", 
            "text": "combinatorics documentation\n\n\nIntegerPartitions\n\n\nPermutations\n\n\nMultinomial\n\n\nFactorial", 
            "title": "combinatorics"
        }, 
        {
            "location": "/builtin/combinatorics/#combinatorics-documentation", 
            "text": "IntegerPartitions  Permutations  Multinomial  Factorial", 
            "title": "combinatorics documentation"
        }, 
        {
            "location": "/builtin/combinatorics/integerpartitions/", 
            "text": "IntegerPartitions\n\n\nIntegerPartitions[n]\n lists the possible ways to partition \nn\n into smaller integers.\n\n\nIntegerPartitions[n, k]\n lists the possible ways to partition \nn\n into smaller integers, using up to \nk\n elements.\n\n\nAttributes[IntegerPartitions] := {Protected}\n\n\nSimple examples\n\n\nFind the partitions of 4:\n\n\nIn\n[\n1\n]\n:=\n \nIntegerPartitions\n[\n4\n]\n\n\nOut\n[\n1\n]\n=\n \n{{\n4\n},\n \n{\n3\n,\n \n1\n},\n \n{\n2\n,\n \n2\n},\n \n{\n2\n,\n \n1\n,\n \n1\n},\n \n{\n1\n,\n \n1\n,\n \n1\n,\n \n1\n}}\n\n\n\n\n\n\nFind the partitions of 10, using a maximum of k = 2 integers:\n\n\nIn\n[\n2\n]\n:=\n \nIntegerPartitions\n[\n10\n,\n \n2\n]\n\n\nOut\n[\n2\n]\n=\n \n{{\n10\n},\n \n{\n9\n,\n \n1\n},\n \n{\n8\n,\n \n2\n},\n \n{\n7\n,\n \n3\n},\n \n{\n6\n,\n \n4\n},\n \n{\n5\n,\n \n5\n}}\n\n\n\n\n\n\nFurther examples\n\n\nThe partitions of zero is a nested empty List:\n\n\nIn\n[\n1\n]\n:=\n \nIntegerPartitions\n[\n0\n]\n\n\nOut\n[\n1\n]\n=\n \n{{}}", 
            "title": "IntegerPartitions "
        }, 
        {
            "location": "/builtin/combinatorics/integerpartitions/#integerpartitions", 
            "text": "IntegerPartitions[n]  lists the possible ways to partition  n  into smaller integers.  IntegerPartitions[n, k]  lists the possible ways to partition  n  into smaller integers, using up to  k  elements.  Attributes[IntegerPartitions] := {Protected}", 
            "title": "IntegerPartitions"
        }, 
        {
            "location": "/builtin/combinatorics/integerpartitions/#simple-examples", 
            "text": "Find the partitions of 4:  In [ 1 ] :=   IntegerPartitions [ 4 ]  Out [ 1 ] =   {{ 4 },   { 3 ,   1 },   { 2 ,   2 },   { 2 ,   1 ,   1 },   { 1 ,   1 ,   1 ,   1 }}   Find the partitions of 10, using a maximum of k = 2 integers:  In [ 2 ] :=   IntegerPartitions [ 10 ,   2 ]  Out [ 2 ] =   {{ 10 },   { 9 ,   1 },   { 8 ,   2 },   { 7 ,   3 },   { 6 ,   4 },   { 5 ,   5 }}", 
            "title": "Simple examples"
        }, 
        {
            "location": "/builtin/combinatorics/integerpartitions/#further-examples", 
            "text": "The partitions of zero is a nested empty List:  In [ 1 ] :=   IntegerPartitions [ 0 ]  Out [ 1 ] =   {{}}", 
            "title": "Further examples"
        }, 
        {
            "location": "/builtin/combinatorics/permutations/", 
            "text": "Permutations\n\n\nPermutations[list]\n lists the possible permutations for a given list.\n\n\nAttributes[Permutations] := {Protected}\n\n\nSimple examples\n\n\nFind the permutations of \n{1, 2, 3}\n:\n\n\nIn\n[\n1\n]\n:=\n \nPermutations\n[\nRange\n[\n3\n]]\n\n\nOut\n[\n1\n]\n=\n \n{{\n1\n,\n \n2\n,\n \n3\n},\n \n{\n1\n,\n \n3\n,\n \n2\n},\n \n{\n2\n,\n \n1\n,\n \n3\n},\n \n{\n2\n,\n \n3\n,\n \n1\n},\n \n{\n3\n,\n \n1\n,\n \n2\n},\n \n{\n3\n,\n \n2\n,\n \n1\n}}\n\n\n\n\n\n\nPermutations\n ignores duplicates:\n\n\nIn\n[\n2\n]\n:=\n \nPermutations\n[{\n1\n,\n \n2\n,\n \n2\n}]\n\n\nOut\n[\n2\n]\n=\n \n{{\n1\n,\n \n2\n,\n \n2\n},\n \n{\n2\n,\n \n1\n,\n \n2\n},\n \n{\n2\n,\n \n2\n,\n \n1\n}}", 
            "title": "Permutations "
        }, 
        {
            "location": "/builtin/combinatorics/permutations/#permutations", 
            "text": "Permutations[list]  lists the possible permutations for a given list.  Attributes[Permutations] := {Protected}", 
            "title": "Permutations"
        }, 
        {
            "location": "/builtin/combinatorics/permutations/#simple-examples", 
            "text": "Find the permutations of  {1, 2, 3} :  In [ 1 ] :=   Permutations [ Range [ 3 ]]  Out [ 1 ] =   {{ 1 ,   2 ,   3 },   { 1 ,   3 ,   2 },   { 2 ,   1 ,   3 },   { 2 ,   3 ,   1 },   { 3 ,   1 ,   2 },   { 3 ,   2 ,   1 }}   Permutations  ignores duplicates:  In [ 2 ] :=   Permutations [{ 1 ,   2 ,   2 }]  Out [ 2 ] =   {{ 1 ,   2 ,   2 },   { 2 ,   1 ,   2 },   { 2 ,   2 ,   1 }}", 
            "title": "Simple examples"
        }, 
        {
            "location": "/builtin/combinatorics/multinomial/", 
            "text": "Multinomial\n\n\nMultinomial[n1, n2, ...]\n gives the multinomial coefficient for the given term.\n\n\nAttributes[Multinomial] := {Listable, NumericFunction, Orderless, Protected, ReadProtected}\n\n\nSimple examples\n\n\nFind the multinomial coefficient for the 1, 3, 1 term:\n\n\nIn\n[\n1\n]\n:=\n \nMultinomial\n[\n1\n,\n \n3\n,\n \n1\n]\n\n\nOut\n[\n1\n]\n=\n \n20\n\n\n\n\n\n\nMultinomial\n handles symbolic arguments:\n\n\nIn\n[\n2\n]\n:=\n \nMultinomial\n[\n1\n,\n \nk\n,\n \n1\n]\n\n\nOut\n[\n2\n]\n=\n \n(\nFactorial\n[(\nk\n \n+\n \n2\n)]\n \n*\n \nFactorial\n[\nk\n]\n^-\n1\n)", 
            "title": "Multinomial "
        }, 
        {
            "location": "/builtin/combinatorics/multinomial/#multinomial", 
            "text": "Multinomial[n1, n2, ...]  gives the multinomial coefficient for the given term.  Attributes[Multinomial] := {Listable, NumericFunction, Orderless, Protected, ReadProtected}", 
            "title": "Multinomial"
        }, 
        {
            "location": "/builtin/combinatorics/multinomial/#simple-examples", 
            "text": "Find the multinomial coefficient for the 1, 3, 1 term:  In [ 1 ] :=   Multinomial [ 1 ,   3 ,   1 ]  Out [ 1 ] =   20   Multinomial  handles symbolic arguments:  In [ 2 ] :=   Multinomial [ 1 ,   k ,   1 ]  Out [ 2 ] =   ( Factorial [( k   +   2 )]   *   Factorial [ k ] ^- 1 )", 
            "title": "Simple examples"
        }, 
        {
            "location": "/builtin/combinatorics/factorial/", 
            "text": "Factorial\n\n\nn!\n returns the factorial of \nn\n.\n\n\nAttributes[Factorial] := {Listable, NumericFunction, Protected, ReadProtected}\n\n\nSimple examples\n\n\nIn\n[\n1\n]\n:=\n \nFactorial\n[\n20\n]\n\n\nOut\n[\n1\n]\n=\n \n2432902008176640000\n\n\n\n\n\n\nIn\n[\n2\n]\n:=\n \nFactorial\n[\n5\n]\n\n\nOut\n[\n2\n]\n=\n \n120\n\n\n\n\n\n\nFurther examples\n\n\nIn\n[\n1\n]\n:=\n \nFactorial\n[\n0\n]\n\n\nOut\n[\n1\n]\n=\n \n1\n\n\n\n\n\n\nIn\n[\n2\n]\n:=\n \nFactorial\n[\n-\n1\n]\n\n\nOut\n[\n2\n]\n=\n \nComplexInfinity", 
            "title": "Factorial "
        }, 
        {
            "location": "/builtin/combinatorics/factorial/#factorial", 
            "text": "n!  returns the factorial of  n .  Attributes[Factorial] := {Listable, NumericFunction, Protected, ReadProtected}", 
            "title": "Factorial"
        }, 
        {
            "location": "/builtin/combinatorics/factorial/#simple-examples", 
            "text": "In [ 1 ] :=   Factorial [ 20 ]  Out [ 1 ] =   2432902008176640000   In [ 2 ] :=   Factorial [ 5 ]  Out [ 2 ] =   120", 
            "title": "Simple examples"
        }, 
        {
            "location": "/builtin/combinatorics/factorial/#further-examples", 
            "text": "In [ 1 ] :=   Factorial [ 0 ]  Out [ 1 ] =   1   In [ 2 ] :=   Factorial [ - 1 ]  Out [ 2 ] =   ComplexInfinity", 
            "title": "Further examples"
        }, 
        {
            "location": "/builtin/calculus/", 
            "text": "calculus documentation\n\n\nD\n\n\nIntegrate", 
            "title": "calculus"
        }, 
        {
            "location": "/builtin/calculus/#calculus-documentation", 
            "text": "D  Integrate", 
            "title": "calculus documentation"
        }, 
        {
            "location": "/builtin/calculus/d/", 
            "text": "D\n\n\nD[f, x]\n finds the partial derivative of \nf\n with respect to \nx\n.\n\n\nAttributes[D] := {Protected, ReadProtected}\n\n\nSimple examples\n\n\nIn\n[\n1\n]\n:=\n \nD\n[((\n2\n \n*\n \n3\n^-\n1\n \n*\n \nx\n^\n(\n3\n \n*\n \n2\n^-\n1\n))\n \n+\n \n(\n2\n \n*\n \n5\n^-\n1\n \n*\n \nx\n^\n(\n5\n \n*\n \n2\n^-\n1\n))),\n \nx\n]\n\n\nOut\n[\n1\n]\n=\n \n(\nSqrt\n[\nx\n]\n \n+\n \nx\n^\n(\n3\n \n*\n \n2\n^-\n1\n))\n\n\n\n\n\n\nIn\n[\n2\n]\n:=\n \nD\n[\nLog\n[(\n5\n \n*\n \nx\n^\n2\n)],\n \nx\n]\n\n\nOut\n[\n2\n]\n=\n \n(\n2\n \n*\n \nx\n^-\n1\n)\n\n\n\n\n\n\nIn\n[\n3\n]\n:=\n \nD\n[\nCos\n[\nLog\n[\nx\n]],\n \nx\n]\n\n\nOut\n[\n3\n]\n=\n \n((\nSin\n[\nLog\n[\nx\n]]\n \n*\n \nx\n^-\n1\n)\n \n*\n \n-\n1\n)", 
            "title": "D "
        }, 
        {
            "location": "/builtin/calculus/d/#d", 
            "text": "D[f, x]  finds the partial derivative of  f  with respect to  x .  Attributes[D] := {Protected, ReadProtected}", 
            "title": "D"
        }, 
        {
            "location": "/builtin/calculus/d/#simple-examples", 
            "text": "In [ 1 ] :=   D [(( 2   *   3 ^- 1   *   x ^ ( 3   *   2 ^- 1 ))   +   ( 2   *   5 ^- 1   *   x ^ ( 5   *   2 ^- 1 ))),   x ]  Out [ 1 ] =   ( Sqrt [ x ]   +   x ^ ( 3   *   2 ^- 1 ))   In [ 2 ] :=   D [ Log [( 5   *   x ^ 2 )],   x ]  Out [ 2 ] =   ( 2   *   x ^- 1 )   In [ 3 ] :=   D [ Cos [ Log [ x ]],   x ]  Out [ 3 ] =   (( Sin [ Log [ x ]]   *   x ^- 1 )   *   - 1 )", 
            "title": "Simple examples"
        }, 
        {
            "location": "/builtin/calculus/integrate/", 
            "text": "Integrate\n\n\nIntegrate[f, x]\n finds the indefinite integral of \nf\n with respect to \nx\n.\n\n\n\n\nUnder development\n\n\nThis function is under development, and as such will be incomplete and inaccurate.\n\n\n\n\nAttributes[Integrate] := {Protected, ReadProtected}\n\n\nSimple examples\n\n\nIn\n[\n1\n]\n:=\n \nIntegrate\n[(\nx\n^\n(\n2\n \n*\n \n3\n^-\n1\n)\n \n+\n \n(\n3\n \n*\n \nx\n)\n \n+\n \n2\n),\n \nx\n]\n\n\nOut\n[\n1\n]\n=\n \n((\n2\n \n*\n \nx\n)\n \n+\n \n((\n3\n \n*\n \nx\n^\n(\n5\n \n*\n \n3\n^-\n1\n))\n \n*\n \n5\n^-\n1\n)\n \n+\n \n((\n3\n \n*\n \nx\n^\n2\n)\n \n*\n \n2\n^-\n1\n))\n\n\n\n\n\n\nIn\n[\n2\n]\n:=\n \nIntegrate\n[\nIntegrate\n[(\nSin\n[\nx\n]\n \n+\n \nLog\n[\nx\n]),\n \nx\n],\n \nx\n]\n\n\nOut\n[\n2\n]\n=\n \n((((\n3\n \n*\n \nx\n^\n2\n)\n \n*\n \n4\n^-\n1\n)\n \n*\n \n-\n1\n)\n \n+\n \n(((\n1\n \n*\n \n2\n^-\n1\n)\n \n*\n \nx\n^\n2\n \n*\n \nLog\n[\nx\n])\n \n+\n \n(\nSin\n[\nx\n]\n \n*\n \n-\n1\n)))\n\n\n\n\n\n\nIn\n[\n3\n]\n:=\n \nIntegrate\n[\nx\n^\n2\n,\n \n{\nx\n,\n \n0\n,\n \n1\n}]\n\n\nOut\n[\n3\n]\n=\n \n(\n1\n \n*\n \n3\n^-\n1\n)\n\n\n\n\n\n\nIn\n[\n4\n]\n:=\n \n((\nIntegrate\n[\nx\n^\n2\n,\n \n{\nx\n,\n \n0.5\n,\n \n1.\n}]\n \n+\n \n(\n0.291667\n \n*\n \n-\n1\n)))\n \n \n(\n1\ne\n-\n05.\n)\n\n\nOut\n[\n4\n]\n=\n \nTrue\n\n\n\n\n\n\nIn\n[\n5\n]\n:=\n \nIntegrate\n[\nE\n^\n(\n3\n \n*\n \nx\n),\n \nx\n]\n\n\nOut\n[\n5\n]\n=\n \n(\nE\n^\n(\n3\n \n*\n \nx\n)\n \n*\n \n3\n^-\n1\n)\n\n\n\n\n\n\nIn\n[\n6\n]\n:=\n \nIntegrate\n[\nx\n^\n(\na\n \n+\n \nb\n),\n \nx\n]\n\n\nOut\n[\n6\n]\n=\n \n(\nx\n^\n(\n1\n \n+\n \na\n \n+\n \nb\n)\n \n*\n \n(\n1\n \n+\n \na\n \n+\n \nb\n)\n^-\n1\n)\n\n\n\n\n\n\nIn\n[\n7\n]\n:=\n \nIntegrate\n[\nx\n^\n2\n,\n \n{\nx\n,\n \n0\n,\n \nn\n}]\n\n\nOut\n[\n7\n]\n=\n \n(\nn\n^\n3\n \n*\n \n3\n^-\n1\n)\n\n\n\n\n\n\nIn\n[\n8\n]\n:=\n \nIntegrate\n[\nx\n^\n2\n,\n \n{\nx\n,\n \n0\n,\n \nx\n}]\n\n\nOut\n[\n8\n]\n=\n \n(\nx\n^\n3\n \n*\n \n3\n^-\n1\n)", 
            "title": "Integrate "
        }, 
        {
            "location": "/builtin/calculus/integrate/#integrate", 
            "text": "Integrate[f, x]  finds the indefinite integral of  f  with respect to  x .   Under development  This function is under development, and as such will be incomplete and inaccurate.   Attributes[Integrate] := {Protected, ReadProtected}", 
            "title": "Integrate"
        }, 
        {
            "location": "/builtin/calculus/integrate/#simple-examples", 
            "text": "In [ 1 ] :=   Integrate [( x ^ ( 2   *   3 ^- 1 )   +   ( 3   *   x )   +   2 ),   x ]  Out [ 1 ] =   (( 2   *   x )   +   (( 3   *   x ^ ( 5   *   3 ^- 1 ))   *   5 ^- 1 )   +   (( 3   *   x ^ 2 )   *   2 ^- 1 ))   In [ 2 ] :=   Integrate [ Integrate [( Sin [ x ]   +   Log [ x ]),   x ],   x ]  Out [ 2 ] =   (((( 3   *   x ^ 2 )   *   4 ^- 1 )   *   - 1 )   +   ((( 1   *   2 ^- 1 )   *   x ^ 2   *   Log [ x ])   +   ( Sin [ x ]   *   - 1 )))   In [ 3 ] :=   Integrate [ x ^ 2 ,   { x ,   0 ,   1 }]  Out [ 3 ] =   ( 1   *   3 ^- 1 )   In [ 4 ] :=   (( Integrate [ x ^ 2 ,   { x ,   0.5 ,   1. }]   +   ( 0.291667   *   - 1 )))     ( 1 e - 05. )  Out [ 4 ] =   True   In [ 5 ] :=   Integrate [ E ^ ( 3   *   x ),   x ]  Out [ 5 ] =   ( E ^ ( 3   *   x )   *   3 ^- 1 )   In [ 6 ] :=   Integrate [ x ^ ( a   +   b ),   x ]  Out [ 6 ] =   ( x ^ ( 1   +   a   +   b )   *   ( 1   +   a   +   b ) ^- 1 )   In [ 7 ] :=   Integrate [ x ^ 2 ,   { x ,   0 ,   n }]  Out [ 7 ] =   ( n ^ 3   *   3 ^- 1 )   In [ 8 ] :=   Integrate [ x ^ 2 ,   { x ,   0 ,   x }]  Out [ 8 ] =   ( x ^ 3   *   3 ^- 1 )", 
            "title": "Simple examples"
        }, 
        {
            "location": "/builtin/comparison/", 
            "text": "comparison documentation\n\n\nEqual\n\n\nUnequal\n\n\nSameQ\n\n\nUnsameQ\n\n\nAtomQ\n\n\nNumberQ\n\n\nNumericQ\n\n\nLess\n\n\nGreater\n\n\nLessEqual\n\n\nGreaterEqual\n\n\nPositive\n\n\nNegative\n\n\nMax", 
            "title": "comparison"
        }, 
        {
            "location": "/builtin/comparison/#comparison-documentation", 
            "text": "Equal  Unequal  SameQ  UnsameQ  AtomQ  NumberQ  NumericQ  Less  Greater  LessEqual  GreaterEqual  Positive  Negative  Max", 
            "title": "comparison documentation"
        }, 
        {
            "location": "/builtin/comparison/equal/", 
            "text": "Equal\n\n\nlhs == rhs\n evaluates to True or False if equality or inequality is known.\n\n\nAttributes[Equal] := {Protected}\n\n\nSimple examples\n\n\nExpressions known to be equal will evaluate to True:\n\n\nIn\n[\n1\n]\n:=\n \n9\n*\nx\n==\nx\n*\n9\n\n\nOut\n[\n1\n]\n=\n \nTrue\n\n\n\n\n\n\nSometimes expressions may or may not be equal, or Expreduce does not know how to test for equality. In these cases, the statement will remain unevaluated:\n\n\nIn\n[\n2\n]\n:=\n \n9\n*\nx\n==\nx\n*\n10\n\n\nOut\n[\n2\n]\n=\n \n((\n9\n \n*\n \nx\n))\n \n==\n \n((\n10\n \n*\n \nx\n))\n\n\n\n\n\n\nEqual considers Integers and Reals that are close enough to be equal:\n\n\nIn\n[\n3\n]\n:=\n \ntmp\n=\n5\n\n\nOut\n[\n3\n]\n=\n \n5\n\n\n\n\n\n\nIn\n[\n4\n]\n:=\n \ntmp\n==\n5\n\n\nOut\n[\n4\n]\n=\n \nTrue\n\n\n\n\n\n\nIn\n[\n5\n]\n:=\n \ntmp\n==\n5.\n\n\nOut\n[\n5\n]\n=\n \nTrue\n\n\n\n\n\n\nIn\n[\n6\n]\n:=\n \ntmp\n==\n5.00000\n\n\nOut\n[\n6\n]\n=\n \nTrue\n\n\n\n\n\n\nEqual can test for Rational equality:\n\n\nIn\n[\n7\n]\n:=\n \n4\n/\n3\n==\n3\n/\n2\n\n\nOut\n[\n7\n]\n=\n \nFalse\n\n\n\n\n\n\nIn\n[\n8\n]\n:=\n \n4\n/\n3\n==\n8\n/\n6\n\n\nOut\n[\n8\n]\n=\n \nTrue\n\n\n\n\n\n\nFurther examples\n\n\nIn\n[\n1\n]\n:=\n \nIf\n[\nxx\n \n==\n \n2\n,\n \nyy\n,\n \nzz\n]\n \n==\n \nIf\n[\nxx\n \n==\n \n2\n,\n \nyy\n,\n \nzz\n]\n\n\nOut\n[\n1\n]\n=\n \nTrue\n\n\n\n\n\n\nEqual does not match patterns:\n\n\nIn\n[\n2\n]\n:=\n \n({\n1\n,\n \n2\n,\n \n3\n})\n \n==\n \n(\n_List\n)\n\n\nOut\n[\n2\n]\n=\n \n({\n1\n,\n \n2\n,\n \n3\n})\n \n==\n \n(\n_List\n)\n\n\n\n\n\n\nThis functionality is reserved for MatchQ:\n\n\nIn\n[\n3\n]\n:=\n \nMatchQ\n[{\n1\n,\n \n2\n,\n \n3\n},\n \n_List\n]\n\n\nOut\n[\n3\n]\n=\n \nTrue", 
            "title": "Equal "
        }, 
        {
            "location": "/builtin/comparison/equal/#equal", 
            "text": "lhs == rhs  evaluates to True or False if equality or inequality is known.  Attributes[Equal] := {Protected}", 
            "title": "Equal"
        }, 
        {
            "location": "/builtin/comparison/equal/#simple-examples", 
            "text": "Expressions known to be equal will evaluate to True:  In [ 1 ] :=   9 * x == x * 9  Out [ 1 ] =   True   Sometimes expressions may or may not be equal, or Expreduce does not know how to test for equality. In these cases, the statement will remain unevaluated:  In [ 2 ] :=   9 * x == x * 10  Out [ 2 ] =   (( 9   *   x ))   ==   (( 10   *   x ))   Equal considers Integers and Reals that are close enough to be equal:  In [ 3 ] :=   tmp = 5  Out [ 3 ] =   5   In [ 4 ] :=   tmp == 5  Out [ 4 ] =   True   In [ 5 ] :=   tmp == 5.  Out [ 5 ] =   True   In [ 6 ] :=   tmp == 5.00000  Out [ 6 ] =   True   Equal can test for Rational equality:  In [ 7 ] :=   4 / 3 == 3 / 2  Out [ 7 ] =   False   In [ 8 ] :=   4 / 3 == 8 / 6  Out [ 8 ] =   True", 
            "title": "Simple examples"
        }, 
        {
            "location": "/builtin/comparison/equal/#further-examples", 
            "text": "In [ 1 ] :=   If [ xx   ==   2 ,   yy ,   zz ]   ==   If [ xx   ==   2 ,   yy ,   zz ]  Out [ 1 ] =   True   Equal does not match patterns:  In [ 2 ] :=   ({ 1 ,   2 ,   3 })   ==   ( _List )  Out [ 2 ] =   ({ 1 ,   2 ,   3 })   ==   ( _List )   This functionality is reserved for MatchQ:  In [ 3 ] :=   MatchQ [{ 1 ,   2 ,   3 },   _List ]  Out [ 3 ] =   True", 
            "title": "Further examples"
        }, 
        {
            "location": "/builtin/comparison/unequal/", 
            "text": "Unequal\n\n\nlhs != rhs\n evaluates to True if inequality is known or False if equality is known.\n\n\nAttributes[Unequal] := {Protected}\n\n\nSimple examples\n\n\nExpressions known to be unequal will evaluate to True:\n\n\nIn\n[\n1\n]\n:=\n \n9\n \n!=\n \n8\n\n\nOut\n[\n1\n]\n=\n \nTrue\n\n\n\n\n\n\nSometimes expressions may or may not be unequal, or Expreduce does not know how to test for inequality. In these cases, the statement will remain unevaluated:\n\n\nIn\n[\n2\n]\n:=\n \n9\n*\nx\n \n!=\n \nx\n*\n10\n\n\nOut\n[\n2\n]\n=\n \n((\n9\n \n*\n \nx\n))\n \n!=\n \n((\n10\n \n*\n \nx\n))\n\n\n\n\n\n\nUnequal considers Integers and Reals that are close enough to be equal:\n\n\nIn\n[\n3\n]\n:=\n \ntmp\n=\n5\n\n\nOut\n[\n3\n]\n=\n \n5\n\n\n\n\n\n\nIn\n[\n4\n]\n:=\n \ntmp\n \n!=\n \n5\n\n\nOut\n[\n4\n]\n=\n \nFalse\n\n\n\n\n\n\nIn\n[\n5\n]\n:=\n \ntmp\n \n!=\n \n5.\n\n\nOut\n[\n5\n]\n=\n \nFalse\n\n\n\n\n\n\nIn\n[\n6\n]\n:=\n \ntmp\n \n!=\n \n5.00000\n\n\nOut\n[\n6\n]\n=\n \nFalse\n\n\n\n\n\n\nUnequal can test for Rational inequality:\n\n\nIn\n[\n7\n]\n:=\n \n4\n/\n3\n \n!=\n \n3\n/\n2\n\n\nOut\n[\n7\n]\n=\n \nTrue\n\n\n\n\n\n\nIn\n[\n8\n]\n:=\n \n4\n/\n3\n \n!=\n \n8\n/\n6\n\n\nOut\n[\n8\n]\n=\n \nFalse", 
            "title": "Unequal "
        }, 
        {
            "location": "/builtin/comparison/unequal/#unequal", 
            "text": "lhs != rhs  evaluates to True if inequality is known or False if equality is known.  Attributes[Unequal] := {Protected}", 
            "title": "Unequal"
        }, 
        {
            "location": "/builtin/comparison/unequal/#simple-examples", 
            "text": "Expressions known to be unequal will evaluate to True:  In [ 1 ] :=   9   !=   8  Out [ 1 ] =   True   Sometimes expressions may or may not be unequal, or Expreduce does not know how to test for inequality. In these cases, the statement will remain unevaluated:  In [ 2 ] :=   9 * x   !=   x * 10  Out [ 2 ] =   (( 9   *   x ))   !=   (( 10   *   x ))   Unequal considers Integers and Reals that are close enough to be equal:  In [ 3 ] :=   tmp = 5  Out [ 3 ] =   5   In [ 4 ] :=   tmp   !=   5  Out [ 4 ] =   False   In [ 5 ] :=   tmp   !=   5.  Out [ 5 ] =   False   In [ 6 ] :=   tmp   !=   5.00000  Out [ 6 ] =   False   Unequal can test for Rational inequality:  In [ 7 ] :=   4 / 3   !=   3 / 2  Out [ 7 ] =   True   In [ 8 ] :=   4 / 3   !=   8 / 6  Out [ 8 ] =   False", 
            "title": "Simple examples"
        }, 
        {
            "location": "/builtin/comparison/sameq/", 
            "text": "SameQ\n\n\nlhs === rhs\n evaluates to True if \nlhs\n and \nrhs\n are identical after evaluation, False otherwise.\n\n\nAttributes[SameQ] := {Protected}\n\n\nSimple examples\n\n\nIn\n[\n1\n]\n:=\n \na\n===\na\n\n\nOut\n[\n1\n]\n=\n \nTrue\n\n\n\n\n\n\nIn\n[\n2\n]\n:=\n \n5\n \n===\n \n5\n\n\nOut\n[\n2\n]\n=\n \nTrue\n\n\n\n\n\n\nUnlike Equal, SameQ does not forgive differences between Integers and Reals:\n\n\nIn\n[\n3\n]\n:=\n \n5\n \n===\n \n5.\n\n\nOut\n[\n3\n]\n=\n \nFalse\n\n\n\n\n\n\nSameQ considers the arguments of all expressions and subexpressions:\n\n\nIn\n[\n4\n]\n:=\n \n(\nfoo\n[(\nx\n)\n \n==\n \n(\n2\n),\n \ny\n,\n \nx\n])\n \n===\n \n(\nfoo\n[(\nx\n)\n \n==\n \n(\n2\n),\n \ny\n,\n \nx\n])\n\n\nOut\n[\n4\n]\n=\n \nTrue\n\n\n\n\n\n\nIn\n[\n5\n]\n:=\n \n(\nfoo\n[(\nx\n)\n \n==\n \n(\n2\n),\n \ny\n,\n \nx\n])\n \n===\n \n(\nfoo\n[(\nx\n)\n \n==\n \n(\n2.\n),\n \ny\n,\n \nx\n])\n\n\nOut\n[\n5\n]\n=\n \nFalse\n\n\n\n\n\n\nFurther examples\n\n\nSameQ does not match patterns:\n\n\nIn\n[\n1\n]\n:=\n \n({\n1\n,\n \n2\n,\n \n3\n})\n \n===\n \n(\n_List\n)\n\n\nOut\n[\n1\n]\n=\n \nFalse\n\n\n\n\n\n\nThis functionality is reserved for MatchQ:\n\n\nIn\n[\n2\n]\n:=\n \nMatchQ\n[{\n1\n,\n \n2\n,\n \n3\n},\n \n_List\n]\n\n\nOut\n[\n2\n]\n=\n \nTrue", 
            "title": "SameQ "
        }, 
        {
            "location": "/builtin/comparison/sameq/#sameq", 
            "text": "lhs === rhs  evaluates to True if  lhs  and  rhs  are identical after evaluation, False otherwise.  Attributes[SameQ] := {Protected}", 
            "title": "SameQ"
        }, 
        {
            "location": "/builtin/comparison/sameq/#simple-examples", 
            "text": "In [ 1 ] :=   a === a  Out [ 1 ] =   True   In [ 2 ] :=   5   ===   5  Out [ 2 ] =   True   Unlike Equal, SameQ does not forgive differences between Integers and Reals:  In [ 3 ] :=   5   ===   5.  Out [ 3 ] =   False   SameQ considers the arguments of all expressions and subexpressions:  In [ 4 ] :=   ( foo [( x )   ==   ( 2 ),   y ,   x ])   ===   ( foo [( x )   ==   ( 2 ),   y ,   x ])  Out [ 4 ] =   True   In [ 5 ] :=   ( foo [( x )   ==   ( 2 ),   y ,   x ])   ===   ( foo [( x )   ==   ( 2. ),   y ,   x ])  Out [ 5 ] =   False", 
            "title": "Simple examples"
        }, 
        {
            "location": "/builtin/comparison/sameq/#further-examples", 
            "text": "SameQ does not match patterns:  In [ 1 ] :=   ({ 1 ,   2 ,   3 })   ===   ( _List )  Out [ 1 ] =   False   This functionality is reserved for MatchQ:  In [ 2 ] :=   MatchQ [{ 1 ,   2 ,   3 },   _List ]  Out [ 2 ] =   True", 
            "title": "Further examples"
        }, 
        {
            "location": "/builtin/comparison/unsameq/", 
            "text": "UnsameQ\n\n\nlhs =!= rhs\n evaluates to False if \nlhs\n and \nrhs\n are identical after evaluation, True otherwise.\n\n\nAttributes[UnsameQ] := {Protected}\n\n\nSimple examples\n\n\nIn\n[\n1\n]\n:=\n \na\n=!=\na\n\n\nOut\n[\n1\n]\n=\n \nFalse\n\n\n\n\n\n\nIn\n[\n2\n]\n:=\n \n5\n \n=!=\n \n5\n\n\nOut\n[\n2\n]\n=\n \nFalse\n\n\n\n\n\n\nIn\n[\n3\n]\n:=\n \na\n=!=\nb\n\n\nOut\n[\n3\n]\n=\n \nTrue", 
            "title": "UnsameQ "
        }, 
        {
            "location": "/builtin/comparison/unsameq/#unsameq", 
            "text": "lhs =!= rhs  evaluates to False if  lhs  and  rhs  are identical after evaluation, True otherwise.  Attributes[UnsameQ] := {Protected}", 
            "title": "UnsameQ"
        }, 
        {
            "location": "/builtin/comparison/unsameq/#simple-examples", 
            "text": "In [ 1 ] :=   a =!= a  Out [ 1 ] =   False   In [ 2 ] :=   5   =!=   5  Out [ 2 ] =   False   In [ 3 ] :=   a =!= b  Out [ 3 ] =   True", 
            "title": "Simple examples"
        }, 
        {
            "location": "/builtin/comparison/atomq/", 
            "text": "AtomQ\n\n\nAtomQ[expr]\n returns True if \nexpr\n is an atomic type, and False if \nexpr\n is a full expression.\n\n\nAttributes[AtomQ] := {Protected}\n\n\nSimple examples\n\n\nIn\n[\n1\n]\n:=\n \nAtomQ\n[\nhello\n]\n\n\nOut\n[\n1\n]\n=\n \nTrue\n\n\n\n\n\n\nIn\n[\n2\n]\n:=\n \nAtomQ\n[(\n5\n \n*\n \n3\n^-\n1\n)]\n\n\nOut\n[\n2\n]\n=\n \nTrue\n\n\n\n\n\n\nIn\n[\n3\n]\n:=\n \nAtomQ\n[\nhello\n]\n\n\nOut\n[\n3\n]\n=\n \nTrue\n\n\n\n\n\n\nIn\n[\n4\n]\n:=\n \nAtomQ\n[(\na\n \n*\n \nb\n^-\n1\n)]\n\n\nOut\n[\n4\n]\n=\n \nFalse\n\n\n\n\n\n\nIn\n[\n5\n]\n:=\n \nAtomQ\n[\nbar\n[\nx\n]]\n\n\nOut\n[\n5\n]\n=\n \nFalse", 
            "title": "AtomQ "
        }, 
        {
            "location": "/builtin/comparison/atomq/#atomq", 
            "text": "AtomQ[expr]  returns True if  expr  is an atomic type, and False if  expr  is a full expression.  Attributes[AtomQ] := {Protected}", 
            "title": "AtomQ"
        }, 
        {
            "location": "/builtin/comparison/atomq/#simple-examples", 
            "text": "In [ 1 ] :=   AtomQ [ hello ]  Out [ 1 ] =   True   In [ 2 ] :=   AtomQ [( 5   *   3 ^- 1 )]  Out [ 2 ] =   True   In [ 3 ] :=   AtomQ [ hello ]  Out [ 3 ] =   True   In [ 4 ] :=   AtomQ [( a   *   b ^- 1 )]  Out [ 4 ] =   False   In [ 5 ] :=   AtomQ [ bar [ x ]]  Out [ 5 ] =   False", 
            "title": "Simple examples"
        }, 
        {
            "location": "/builtin/comparison/numberq/", 
            "text": "NumberQ\n\n\nNumberQ[expr]\n returns True if \nexpr\n is numeric, otherwise False.\n\n\nAttributes[NumberQ] := {Protected}\n\n\nSimple examples\n\n\nIn\n[\n1\n]\n:=\n \nNumberQ\n[\n2\n]\n\n\nOut\n[\n1\n]\n=\n \nTrue\n\n\n\n\n\n\nIn\n[\n2\n]\n:=\n \nNumberQ\n[\n2.2\n]\n\n\nOut\n[\n2\n]\n=\n \nTrue\n\n\n\n\n\n\nIn\n[\n3\n]\n:=\n \nNumberQ\n[\nRational\n[\n5\n,\n \n2\n]]\n\n\nOut\n[\n3\n]\n=\n \nTrue\n\n\n\n\n\n\nIn\n[\n4\n]\n:=\n \nNumberQ\n[\nInfinity\n]\n\n\nOut\n[\n4\n]\n=\n \nFalse\n\n\n\n\n\n\nIn\n[\n5\n]\n:=\n \nNumberQ\n[\nSqrt\n[\n2\n]]\n\n\nOut\n[\n5\n]\n=\n \nFalse\n\n\n\n\n\n\nIn\n[\n6\n]\n:=\n \nNumberQ\n[\nrandomvar\n]\n\n\nOut\n[\n6\n]\n=\n \nFalse\n\n\n\n\n\n\nIn\n[\n7\n]\n:=\n \nNumberQ\n[\nhello\n]\n\n\nOut\n[\n7\n]\n=\n \nFalse", 
            "title": "NumberQ "
        }, 
        {
            "location": "/builtin/comparison/numberq/#numberq", 
            "text": "NumberQ[expr]  returns True if  expr  is numeric, otherwise False.  Attributes[NumberQ] := {Protected}", 
            "title": "NumberQ"
        }, 
        {
            "location": "/builtin/comparison/numberq/#simple-examples", 
            "text": "In [ 1 ] :=   NumberQ [ 2 ]  Out [ 1 ] =   True   In [ 2 ] :=   NumberQ [ 2.2 ]  Out [ 2 ] =   True   In [ 3 ] :=   NumberQ [ Rational [ 5 ,   2 ]]  Out [ 3 ] =   True   In [ 4 ] :=   NumberQ [ Infinity ]  Out [ 4 ] =   False   In [ 5 ] :=   NumberQ [ Sqrt [ 2 ]]  Out [ 5 ] =   False   In [ 6 ] :=   NumberQ [ randomvar ]  Out [ 6 ] =   False   In [ 7 ] :=   NumberQ [ hello ]  Out [ 7 ] =   False", 
            "title": "Simple examples"
        }, 
        {
            "location": "/builtin/comparison/numericq/", 
            "text": "NumericQ\n\n\nNumericQ[expr]\n returns \nTrue\n if \nexpr\n is a numeric quantity, \nFalse\n otherwise.\n\n\nAttributes[NumericQ] := {Protected}\n\n\nSimple examples\n\n\nIn\n[\n1\n]\n:=\n \nNumericQ\n[\n5\n]\n\n\nOut\n[\n1\n]\n=\n \nTrue\n\n\n\n\n\n\nIn\n[\n2\n]\n:=\n \nNumericQ\n[\na\n]\n\n\nOut\n[\n2\n]\n=\n \nFalse\n\n\n\n\n\n\nIn\n[\n3\n]\n:=\n \nNumericQ\n[\nSin\n[\na\n]]\n\n\nOut\n[\n3\n]\n=\n \nFalse\n\n\n\n\n\n\nIn\n[\n4\n]\n:=\n \nNumericQ\n[\nSin\n[\n2\n]]\n\n\nOut\n[\n4\n]\n=\n \nTrue", 
            "title": "NumericQ "
        }, 
        {
            "location": "/builtin/comparison/numericq/#numericq", 
            "text": "NumericQ[expr]  returns  True  if  expr  is a numeric quantity,  False  otherwise.  Attributes[NumericQ] := {Protected}", 
            "title": "NumericQ"
        }, 
        {
            "location": "/builtin/comparison/numericq/#simple-examples", 
            "text": "In [ 1 ] :=   NumericQ [ 5 ]  Out [ 1 ] =   True   In [ 2 ] :=   NumericQ [ a ]  Out [ 2 ] =   False   In [ 3 ] :=   NumericQ [ Sin [ a ]]  Out [ 3 ] =   False   In [ 4 ] :=   NumericQ [ Sin [ 2 ]]  Out [ 4 ] =   True", 
            "title": "Simple examples"
        }, 
        {
            "location": "/builtin/comparison/less/", 
            "text": "Less\n\n\na \n b\n returns True if \na\n is less than \nb\n.\n\n\nAttributes[Less] := {Protected}\n\n\nSimple examples\n\n\nIn\n[\n1\n]\n:=\n \n(\na\n)\n \n \n(\nb\n)\n\n\nOut\n[\n1\n]\n=\n \n(\na\n)\n \n \n(\nb\n)\n\n\n\n\n\n\nIn\n[\n2\n]\n:=\n \n(\n1\n)\n \n \n(\n2\n)\n\n\nOut\n[\n2\n]\n=\n \nTrue\n\n\n\n\n\n\nIn\n[\n3\n]\n:=\n \n(\n3\n)\n \n \n(\n5.5\n)\n\n\nOut\n[\n3\n]\n=\n \nTrue\n\n\n\n\n\n\nIn\n[\n4\n]\n:=\n \n(\n5.5\n)\n \n \n(\n3\n)\n\n\nOut\n[\n4\n]\n=\n \nFalse\n\n\n\n\n\n\nIn\n[\n5\n]\n:=\n \n(\n3\n)\n \n \n(\n3\n)\n\n\nOut\n[\n5\n]\n=\n \nFalse", 
            "title": "Less "
        }, 
        {
            "location": "/builtin/comparison/less/#less", 
            "text": "a   b  returns True if  a  is less than  b .  Attributes[Less] := {Protected}", 
            "title": "Less"
        }, 
        {
            "location": "/builtin/comparison/less/#simple-examples", 
            "text": "In [ 1 ] :=   ( a )     ( b )  Out [ 1 ] =   ( a )     ( b )   In [ 2 ] :=   ( 1 )     ( 2 )  Out [ 2 ] =   True   In [ 3 ] :=   ( 3 )     ( 5.5 )  Out [ 3 ] =   True   In [ 4 ] :=   ( 5.5 )     ( 3 )  Out [ 4 ] =   False   In [ 5 ] :=   ( 3 )     ( 3 )  Out [ 5 ] =   False", 
            "title": "Simple examples"
        }, 
        {
            "location": "/builtin/comparison/greater/", 
            "text": "Greater\n\n\na \n b\n returns True if \na\n is greater than \nb\n.\n\n\nAttributes[Greater] := {Protected}\n\n\nSimple examples\n\n\nIn\n[\n1\n]\n:=\n \n(\na\n)\n \n \n(\nb\n)\n\n\nOut\n[\n1\n]\n=\n \n(\na\n)\n \n \n(\nb\n)\n\n\n\n\n\n\nIn\n[\n2\n]\n:=\n \n(\n1\n)\n \n \n(\n2\n)\n\n\nOut\n[\n2\n]\n=\n \nFalse\n\n\n\n\n\n\nIn\n[\n3\n]\n:=\n \n(\n3\n)\n \n \n(\n5.5\n)\n\n\nOut\n[\n3\n]\n=\n \nFalse\n\n\n\n\n\n\nIn\n[\n4\n]\n:=\n \n(\n5.5\n)\n \n \n(\n3\n)\n\n\nOut\n[\n4\n]\n=\n \nTrue\n\n\n\n\n\n\nIn\n[\n5\n]\n:=\n \n(\n3\n)\n \n \n(\n3\n)\n\n\nOut\n[\n5\n]\n=\n \nFalse", 
            "title": "Greater "
        }, 
        {
            "location": "/builtin/comparison/greater/#greater", 
            "text": "a   b  returns True if  a  is greater than  b .  Attributes[Greater] := {Protected}", 
            "title": "Greater"
        }, 
        {
            "location": "/builtin/comparison/greater/#simple-examples", 
            "text": "In [ 1 ] :=   ( a )     ( b )  Out [ 1 ] =   ( a )     ( b )   In [ 2 ] :=   ( 1 )     ( 2 )  Out [ 2 ] =   False   In [ 3 ] :=   ( 3 )     ( 5.5 )  Out [ 3 ] =   False   In [ 4 ] :=   ( 5.5 )     ( 3 )  Out [ 4 ] =   True   In [ 5 ] :=   ( 3 )     ( 3 )  Out [ 5 ] =   False", 
            "title": "Simple examples"
        }, 
        {
            "location": "/builtin/comparison/lessequal/", 
            "text": "LessEqual\n\n\na \n= b\n returns True if \na\n is less than or equal to \nb\n.\n\n\nAttributes[LessEqual] := {Protected}\n\n\nSimple examples\n\n\nIn\n[\n1\n]\n:=\n \n(\na\n)\n \n=\n \n(\nb\n)\n\n\nOut\n[\n1\n]\n=\n \n(\na\n)\n \n=\n \n(\nb\n)\n\n\n\n\n\n\nIn\n[\n2\n]\n:=\n \n(\n1\n)\n \n=\n \n(\n2\n)\n\n\nOut\n[\n2\n]\n=\n \nTrue\n\n\n\n\n\n\nIn\n[\n3\n]\n:=\n \n(\n3\n)\n \n=\n \n(\n5.5\n)\n\n\nOut\n[\n3\n]\n=\n \nTrue\n\n\n\n\n\n\nIn\n[\n4\n]\n:=\n \n(\n5.5\n)\n \n=\n \n(\n3\n)\n\n\nOut\n[\n4\n]\n=\n \nFalse\n\n\n\n\n\n\nIn\n[\n5\n]\n:=\n \n(\n3\n)\n \n=\n \n(\n3\n)\n\n\nOut\n[\n5\n]\n=\n \nTrue", 
            "title": "LessEqual "
        }, 
        {
            "location": "/builtin/comparison/lessequal/#lessequal", 
            "text": "a  = b  returns True if  a  is less than or equal to  b .  Attributes[LessEqual] := {Protected}", 
            "title": "LessEqual"
        }, 
        {
            "location": "/builtin/comparison/lessequal/#simple-examples", 
            "text": "In [ 1 ] :=   ( a )   =   ( b )  Out [ 1 ] =   ( a )   =   ( b )   In [ 2 ] :=   ( 1 )   =   ( 2 )  Out [ 2 ] =   True   In [ 3 ] :=   ( 3 )   =   ( 5.5 )  Out [ 3 ] =   True   In [ 4 ] :=   ( 5.5 )   =   ( 3 )  Out [ 4 ] =   False   In [ 5 ] :=   ( 3 )   =   ( 3 )  Out [ 5 ] =   True", 
            "title": "Simple examples"
        }, 
        {
            "location": "/builtin/comparison/greaterequal/", 
            "text": "GreaterEqual\n\n\na \n= b\n returns True if \na\n is greater than or equal to \nb\n.\n\n\nAttributes[GreaterEqual] := {Protected}\n\n\nSimple examples\n\n\nIn\n[\n1\n]\n:=\n \n(\na\n)\n \n=\n \n(\nb\n)\n\n\nOut\n[\n1\n]\n=\n \n(\na\n)\n \n=\n \n(\nb\n)\n\n\n\n\n\n\nIn\n[\n2\n]\n:=\n \n(\n1\n)\n \n=\n \n(\n2\n)\n\n\nOut\n[\n2\n]\n=\n \nFalse\n\n\n\n\n\n\nIn\n[\n3\n]\n:=\n \n(\n3\n)\n \n=\n \n(\n5.5\n)\n\n\nOut\n[\n3\n]\n=\n \nFalse\n\n\n\n\n\n\nIn\n[\n4\n]\n:=\n \n(\n5.5\n)\n \n=\n \n(\n3\n)\n\n\nOut\n[\n4\n]\n=\n \nTrue\n\n\n\n\n\n\nIn\n[\n5\n]\n:=\n \n(\n3\n)\n \n=\n \n(\n3\n)\n\n\nOut\n[\n5\n]\n=\n \nTrue", 
            "title": "GreaterEqual "
        }, 
        {
            "location": "/builtin/comparison/greaterequal/#greaterequal", 
            "text": "a  = b  returns True if  a  is greater than or equal to  b .  Attributes[GreaterEqual] := {Protected}", 
            "title": "GreaterEqual"
        }, 
        {
            "location": "/builtin/comparison/greaterequal/#simple-examples", 
            "text": "In [ 1 ] :=   ( a )   =   ( b )  Out [ 1 ] =   ( a )   =   ( b )   In [ 2 ] :=   ( 1 )   =   ( 2 )  Out [ 2 ] =   False   In [ 3 ] :=   ( 3 )   =   ( 5.5 )  Out [ 3 ] =   False   In [ 4 ] :=   ( 5.5 )   =   ( 3 )  Out [ 4 ] =   True   In [ 5 ] :=   ( 3 )   =   ( 3 )  Out [ 5 ] =   True", 
            "title": "Simple examples"
        }, 
        {
            "location": "/builtin/comparison/positive/", 
            "text": "Positive\n\n\nPositive[x]\n returns \nTrue\n if \nx\n is positive.\n\n\nAttributes[Positive] := {Listable, Protected}\n\n\nSimple examples\n\n\nIn\n[\n1\n]\n:=\n \nMap\n[\nPositive\n,\n \n{\n1\n,\n \n0\n,\n \n-\n1\n,\n \na\n}]\n\n\nOut\n[\n1\n]\n=\n \n{\nTrue\n,\n \nFalse\n,\n \nFalse\n,\n \nPositive\n[\na\n]}", 
            "title": "Positive "
        }, 
        {
            "location": "/builtin/comparison/positive/#positive", 
            "text": "Positive[x]  returns  True  if  x  is positive.  Attributes[Positive] := {Listable, Protected}", 
            "title": "Positive"
        }, 
        {
            "location": "/builtin/comparison/positive/#simple-examples", 
            "text": "In [ 1 ] :=   Map [ Positive ,   { 1 ,   0 ,   - 1 ,   a }]  Out [ 1 ] =   { True ,   False ,   False ,   Positive [ a ]}", 
            "title": "Simple examples"
        }, 
        {
            "location": "/builtin/comparison/negative/", 
            "text": "Negative\n\n\nNegative[x]\n returns \nTrue\n if \nx\n is positive.\n\n\nAttributes[Negative] := {Listable, Protected}\n\n\nSimple examples\n\n\nIn\n[\n1\n]\n:=\n \nMap\n[\nNegative\n,\n \n{\n1\n,\n \n0\n,\n \n-\n1\n,\n \na\n}]\n\n\nOut\n[\n1\n]\n=\n \n{\nFalse\n,\n \nFalse\n,\n \nTrue\n,\n \nNegative\n[\na\n]}", 
            "title": "Negative "
        }, 
        {
            "location": "/builtin/comparison/negative/#negative", 
            "text": "Negative[x]  returns  True  if  x  is positive.  Attributes[Negative] := {Listable, Protected}", 
            "title": "Negative"
        }, 
        {
            "location": "/builtin/comparison/negative/#simple-examples", 
            "text": "In [ 1 ] :=   Map [ Negative ,   { 1 ,   0 ,   - 1 ,   a }]  Out [ 1 ] =   { False ,   False ,   True ,   Negative [ a ]}", 
            "title": "Simple examples"
        }, 
        {
            "location": "/builtin/comparison/max/", 
            "text": "Max\n\n\nMax[e1, e2, ...]\n the maximum of the expressions.\n\n\nAttributes[Max] := {Flat, NumericFunction, OneIdentity, Orderless, Protected}\n\n\nSimple examples\n\n\nIn\n[\n1\n]\n:=\n \nMax\n[\n1\n,\n \n2\n,\n \n3\n]\n\n\nOut\n[\n1\n]\n=\n \n3\n\n\n\n\n\n\nIn\n[\n2\n]\n:=\n \nMax\n[\n1\n,\n \na\n,\n \n3\n]\n\n\nOut\n[\n2\n]\n=\n \nMax\n[\n3\n,\n \na\n]", 
            "title": "Max "
        }, 
        {
            "location": "/builtin/comparison/max/#max", 
            "text": "Max[e1, e2, ...]  the maximum of the expressions.  Attributes[Max] := {Flat, NumericFunction, OneIdentity, Orderless, Protected}", 
            "title": "Max"
        }, 
        {
            "location": "/builtin/comparison/max/#simple-examples", 
            "text": "In [ 1 ] :=   Max [ 1 ,   2 ,   3 ]  Out [ 1 ] =   3   In [ 2 ] :=   Max [ 1 ,   a ,   3 ]  Out [ 2 ] =   Max [ 3 ,   a ]", 
            "title": "Simple examples"
        }, 
        {
            "location": "/builtin/atoms/", 
            "text": "atoms documentation\n\n\nRational\n\n\nString\n\n\nReal\n\n\nInteger", 
            "title": "atoms"
        }, 
        {
            "location": "/builtin/atoms/#atoms-documentation", 
            "text": "Rational  String  Real  Integer", 
            "title": "atoms documentation"
        }, 
        {
            "location": "/builtin/atoms/rational/", 
            "text": "Rational\n\n\nRational\n is the head for the atomic rational type.\n\n\nAttributes[Rational] := {Protected}\n\n\nSimple examples\n\n\nRationals are created from \nTimes\n when a rational form is encountered:\n\n\nIn\n[\n1\n]\n:=\n \nHead\n[(\n5\n \n*\n \n6\n^-\n1\n)]\n\n\nOut\n[\n1\n]\n=\n \nRational\n\n\n\n\n\n\nWhich is equivalent to typing them in directly:\n\n\nIn\n[\n2\n]\n:=\n \nHead\n[(\n5\n \n*\n \n6\n^-\n1\n)]\n\n\nOut\n[\n2\n]\n=\n \nRational\n\n\n\n\n\n\nOr being even more explicit:\n\n\nIn\n[\n3\n]\n:=\n \nHead\n[\nRational\n[\n5\n,\n \n6\n]]\n\n\nOut\n[\n3\n]\n=\n \nRational\n\n\n\n\n\n\nRationals simplify on evaluation:\n\n\nIn\n[\n4\n]\n:=\n \nRational\n[\n10\n,\n \n6\n]\n\n\nOut\n[\n4\n]\n=\n \n5\n/\n3\n\n\n\n\n\n\nWhich might include evaluating to an Integer:\n\n\nIn\n[\n5\n]\n:=\n \nHead\n[\nRational\n[\n-\n100\n,\n \n10\n]]\n\n\nOut\n[\n5\n]\n=\n \nInteger\n\n\n\n\n\n\nRationals of non-Integer types are not allowed:\n\n\nIn\n[\n6\n]\n:=\n \nRational\n[\n0\n,\n \nn\n]\n\n\nOut\n[\n6\n]\n=\n \nRational\n[\n0\n,\n \nn\n]\n\n\n\n\n\n\nFurther examples\n\n\nUndefined rationals are handled accordingly:\n\n\nIn\n[\n1\n]\n:=\n \nRational\n[\n0\n,\n \n0\n]\n\n\nOut\n[\n1\n]\n=\n \nIndeterminate\n\n\n\n\n\n\nIn\n[\n2\n]\n:=\n \nRational\n[\n1\n,\n \n0\n]\n\n\nOut\n[\n2\n]\n=\n \nComplexInfinity\n\n\n\n\n\n\nRational numbers have some special handling for pattern matching:\n\n\nIn\n[\n3\n]\n:=\n \n(\ntest\n)\n \n=\n \n(\nRational\n[\n2\n,\n \n3\n])\n\n\nOut\n[\n3\n]\n=\n \n(\n2\n \n*\n \n3\n^-\n1\n)\n\n\n\n\n\n\nIn\n[\n4\n]\n:=\n \nMatchQ\n[\ntest\n,\n \n(\n2\n \n*\n \n3\n^-\n1\n)]\n\n\nOut\n[\n4\n]\n=\n \nTrue\n\n\n\n\n\n\nIn\n[\n5\n]\n:=\n \nMatchQ\n[\ntest\n,\n \nRational\n[\na_Integer\n,\n \nb_Integer\n]]\n\n\nOut\n[\n5\n]\n=\n \nTrue\n\n\n\n\n\n\nIn\n[\n6\n]\n:=\n \n((\n2\n \n*\n \n3\n^-\n1\n))\n \n/.\n \n((\nRational\n[\na_Integer\n,\n \nb_Integer\n])\n \n-\n \n({\na\n,\n \nb\n}))\n\n\nOut\n[\n6\n]\n=\n \n{\n2\n,\n \n3\n}\n\n\n\n\n\n\nIn\n[\n7\n]\n:=\n \n((\n2\n \n*\n \n3\n^-\n1\n))\n \n/.\n \n(((\na_Integer\n \n*\n \nb_Integer\n^-\n1\n))\n \n-\n \n({\na\n,\n \nb\n}))\n\n\nOut\n[\n7\n]\n=\n \n(\n2\n \n*\n \n3\n^-\n1\n)", 
            "title": "Rational "
        }, 
        {
            "location": "/builtin/atoms/rational/#rational", 
            "text": "Rational  is the head for the atomic rational type.  Attributes[Rational] := {Protected}", 
            "title": "Rational"
        }, 
        {
            "location": "/builtin/atoms/rational/#simple-examples", 
            "text": "Rationals are created from  Times  when a rational form is encountered:  In [ 1 ] :=   Head [( 5   *   6 ^- 1 )]  Out [ 1 ] =   Rational   Which is equivalent to typing them in directly:  In [ 2 ] :=   Head [( 5   *   6 ^- 1 )]  Out [ 2 ] =   Rational   Or being even more explicit:  In [ 3 ] :=   Head [ Rational [ 5 ,   6 ]]  Out [ 3 ] =   Rational   Rationals simplify on evaluation:  In [ 4 ] :=   Rational [ 10 ,   6 ]  Out [ 4 ] =   5 / 3   Which might include evaluating to an Integer:  In [ 5 ] :=   Head [ Rational [ - 100 ,   10 ]]  Out [ 5 ] =   Integer   Rationals of non-Integer types are not allowed:  In [ 6 ] :=   Rational [ 0 ,   n ]  Out [ 6 ] =   Rational [ 0 ,   n ]", 
            "title": "Simple examples"
        }, 
        {
            "location": "/builtin/atoms/rational/#further-examples", 
            "text": "Undefined rationals are handled accordingly:  In [ 1 ] :=   Rational [ 0 ,   0 ]  Out [ 1 ] =   Indeterminate   In [ 2 ] :=   Rational [ 1 ,   0 ]  Out [ 2 ] =   ComplexInfinity   Rational numbers have some special handling for pattern matching:  In [ 3 ] :=   ( test )   =   ( Rational [ 2 ,   3 ])  Out [ 3 ] =   ( 2   *   3 ^- 1 )   In [ 4 ] :=   MatchQ [ test ,   ( 2   *   3 ^- 1 )]  Out [ 4 ] =   True   In [ 5 ] :=   MatchQ [ test ,   Rational [ a_Integer ,   b_Integer ]]  Out [ 5 ] =   True   In [ 6 ] :=   (( 2   *   3 ^- 1 ))   /.   (( Rational [ a_Integer ,   b_Integer ])   -   ({ a ,   b }))  Out [ 6 ] =   { 2 ,   3 }   In [ 7 ] :=   (( 2   *   3 ^- 1 ))   /.   ((( a_Integer   *   b_Integer ^- 1 ))   -   ({ a ,   b }))  Out [ 7 ] =   ( 2   *   3 ^- 1 )", 
            "title": "Further examples"
        }, 
        {
            "location": "/builtin/atoms/string/", 
            "text": "String\n\n\nString\n is the head for the atomic string type.\n\n\nAttributes[String] := {Protected}\n\n\nSimple examples\n\n\nIn\n[\n1\n]\n:=\n \nHello\n\n\nOut\n[\n1\n]\n=\n \nHello\n\n\n\n\n\n\nIn\n[\n2\n]\n:=\n \n(\nHello\n)\n \n==\n \n(\nHello\n)\n\n\nOut\n[\n2\n]\n=\n \nTrue\n\n\n\n\n\n\nIn\n[\n3\n]\n:=\n \n(\nHello\n)\n \n==\n \n(\nHello world\n)\n\n\nOut\n[\n3\n]\n=\n \nFalse\n\n\n\n\n\n\nIn\n[\n4\n]\n:=\n \nHead\n[\nHello\n]\n\n\nOut\n[\n4\n]\n=\n \nString", 
            "title": "String "
        }, 
        {
            "location": "/builtin/atoms/string/#string", 
            "text": "String  is the head for the atomic string type.  Attributes[String] := {Protected}", 
            "title": "String"
        }, 
        {
            "location": "/builtin/atoms/string/#simple-examples", 
            "text": "In [ 1 ] :=   Hello  Out [ 1 ] =   Hello   In [ 2 ] :=   ( Hello )   ==   ( Hello )  Out [ 2 ] =   True   In [ 3 ] :=   ( Hello )   ==   ( Hello world )  Out [ 3 ] =   False   In [ 4 ] :=   Head [ Hello ]  Out [ 4 ] =   String", 
            "title": "Simple examples"
        }, 
        {
            "location": "/builtin/atoms/real/", 
            "text": "Real\n\n\nReal\n is the head for the atomic floating point type.\n\n\nAttributes[Real] := {Protected}\n\n\nSimple examples\n\n\nIn\n[\n1\n]\n:=\n \nHead\n[\n1.53\n]\n\n\nOut\n[\n1\n]\n=\n \nReal\n\n\n\n\n\n\nOne can force Real interperetation on an Integer by appending a decimal point:\n\n\nIn\n[\n2\n]\n:=\n \nHead\n[\n1.\n]\n\n\nOut\n[\n2\n]\n=\n \nReal\n\n\n\n\n\n\nReal numbers are backed by arbitrary-precision floating points:\n\n\nIn\n[\n3\n]\n:=\n \n10.\n^\n5000\n \n/\n \n10.\n^\n4999\n\n\nOut\n[\n3\n]\n=\n \n10.\n\n\n\n\n\n\nFurther examples\n\n\nIn\n[\n1\n]\n:=\n \nMatchQ\n[\n1.53\n,\n \n_Real\n]\n\n\nOut\n[\n1\n]\n=\n \nTrue", 
            "title": "Real "
        }, 
        {
            "location": "/builtin/atoms/real/#real", 
            "text": "Real  is the head for the atomic floating point type.  Attributes[Real] := {Protected}", 
            "title": "Real"
        }, 
        {
            "location": "/builtin/atoms/real/#simple-examples", 
            "text": "In [ 1 ] :=   Head [ 1.53 ]  Out [ 1 ] =   Real   One can force Real interperetation on an Integer by appending a decimal point:  In [ 2 ] :=   Head [ 1. ]  Out [ 2 ] =   Real   Real numbers are backed by arbitrary-precision floating points:  In [ 3 ] :=   10. ^ 5000   /   10. ^ 4999  Out [ 3 ] =   10.", 
            "title": "Simple examples"
        }, 
        {
            "location": "/builtin/atoms/real/#further-examples", 
            "text": "In [ 1 ] :=   MatchQ [ 1.53 ,   _Real ]  Out [ 1 ] =   True", 
            "title": "Further examples"
        }, 
        {
            "location": "/builtin/atoms/integer/", 
            "text": "Integer\n\n\nInteger\n is the head for the atomic integer type.\n\n\nAttributes[Integer] := {Protected}\n\n\nSimple examples\n\n\nIn\n[\n1\n]\n:=\n \nHead\n[\n153\n]\n\n\nOut\n[\n1\n]\n=\n \nInteger\n\n\n\n\n\n\nInteger numbers are backed by arbitrary-precision data structures:\n\n\nIn\n[\n2\n]\n:=\n \nFactorial\n[\n40\n]\n\n\nOut\n[\n2\n]\n=\n \n815915283247897734345611269596115894272000000000\n\n\n\n\n\n\nFurther examples\n\n\nIn\n[\n1\n]\n:=\n \nMatchQ\n[\n153\n,\n \n_Integer\n]\n\n\nOut\n[\n1\n]\n=\n \nTrue", 
            "title": "Integer "
        }, 
        {
            "location": "/builtin/atoms/integer/#integer", 
            "text": "Integer  is the head for the atomic integer type.  Attributes[Integer] := {Protected}", 
            "title": "Integer"
        }, 
        {
            "location": "/builtin/atoms/integer/#simple-examples", 
            "text": "In [ 1 ] :=   Head [ 153 ]  Out [ 1 ] =   Integer   Integer numbers are backed by arbitrary-precision data structures:  In [ 2 ] :=   Factorial [ 40 ]  Out [ 2 ] =   815915283247897734345611269596115894272000000000", 
            "title": "Simple examples"
        }, 
        {
            "location": "/builtin/atoms/integer/#further-examples", 
            "text": "In [ 1 ] :=   MatchQ [ 153 ,   _Integer ]  Out [ 1 ] =   True", 
            "title": "Further examples"
        }, 
        {
            "location": "/builtin/functional/", 
            "text": "functional documentation\n\n\nFunction\n\n\nSlot\n\n\nApply\n\n\nMap\n\n\nArray\n\n\nIdentity", 
            "title": "functional"
        }, 
        {
            "location": "/builtin/functional/#functional-documentation", 
            "text": "Function  Slot  Apply  Map  Array  Identity", 
            "title": "functional documentation"
        }, 
        {
            "location": "/builtin/functional/function/", 
            "text": "Function\n\n\nFunction[inner]\n defines a pure function where \ninner\n is evaluated with \nSlot\n parameters.\n\n\nFunction[x, inner]\n defines a pure function where \ninner\n is evaluated a single parameter \nx\n.\n\n\nAttributes[Function] := {HoldAll, Protected}\n\n\nSimple examples\n\n\nIn\n[\n1\n]\n:=\n \nFunction\n[(\n1\n \n+\n \nSlot\n[\n1\n])][\nx\n]\n\n\nOut\n[\n1\n]\n=\n \n(\n1\n \n+\n \nx\n)\n\n\n\n\n\n\nIn\n[\n2\n]\n:=\n \nFunction\n[(\n1\n \n+\n \nSlot\n[\n1\n]\n \n+\n \n(\n2\n \n*\n \nSlot\n[\n2\n]))][\nx\n,\n \ny\n]\n\n\nOut\n[\n2\n]\n=\n \n(\n1\n \n+\n \nx\n \n+\n \n(\n2\n \n*\n \ny\n))\n\n\n\n\n\n\nIn\n[\n3\n]\n:=\n \nFunction\n[\nx\n,\n \nx\n^\n2\n][\na\n]\n\n\nOut\n[\n3\n]\n=\n \na\n^\n2\n\n\n\n\n\n\nIn\n[\n4\n]\n:=\n \nFunction\n[\nx\n,\n \nx\n^\n2\n][\na\n,\n \nb\n]\n\n\nOut\n[\n4\n]\n=\n \na\n^\n2\n\n\n\n\n\n\nIn\n[\n5\n]\n:=\n \nFunction\n[\nx\n,\n \nx\n^\n2\n][\nx\n]\n\n\nOut\n[\n5\n]\n=\n \nx\n^\n2\n\n\n\n\n\n\nIn\n[\n6\n]\n:=\n \nFunction\n[\nx\n,\n \nx\n^\n2\n][\n-\n2\n]\n\n\nOut\n[\n6\n]\n=\n \n4", 
            "title": "Function "
        }, 
        {
            "location": "/builtin/functional/function/#function", 
            "text": "Function[inner]  defines a pure function where  inner  is evaluated with  Slot  parameters.  Function[x, inner]  defines a pure function where  inner  is evaluated a single parameter  x .  Attributes[Function] := {HoldAll, Protected}", 
            "title": "Function"
        }, 
        {
            "location": "/builtin/functional/function/#simple-examples", 
            "text": "In [ 1 ] :=   Function [( 1   +   Slot [ 1 ])][ x ]  Out [ 1 ] =   ( 1   +   x )   In [ 2 ] :=   Function [( 1   +   Slot [ 1 ]   +   ( 2   *   Slot [ 2 ]))][ x ,   y ]  Out [ 2 ] =   ( 1   +   x   +   ( 2   *   y ))   In [ 3 ] :=   Function [ x ,   x ^ 2 ][ a ]  Out [ 3 ] =   a ^ 2   In [ 4 ] :=   Function [ x ,   x ^ 2 ][ a ,   b ]  Out [ 4 ] =   a ^ 2   In [ 5 ] :=   Function [ x ,   x ^ 2 ][ x ]  Out [ 5 ] =   x ^ 2   In [ 6 ] :=   Function [ x ,   x ^ 2 ][ - 2 ]  Out [ 6 ] =   4", 
            "title": "Simple examples"
        }, 
        {
            "location": "/builtin/functional/slot/", 
            "text": "Slot\n\n\n#\n serves as a pure function's first parameter.\n\n\n#n\n serves as a pure function's \nn\n'th parameter.\n\n\nAttributes[Slot] := {NHoldAll, Protected}\n\n\nSimple examples\n\n\nIn\n[\n1\n]\n:=\n \nFunction\n[(\n1\n \n+\n \nSlot\n[\n1\n])][\nx\n]\n\n\nOut\n[\n1\n]\n=\n \n(\n1\n \n+\n \nx\n)\n\n\n\n\n\n\nIn\n[\n2\n]\n:=\n \nFunction\n[(\n1\n \n+\n \nSlot\n[\n1\n]\n \n+\n \n(\n2\n \n*\n \nSlot\n[\n2\n]))][\nx\n,\n \ny\n]\n\n\nOut\n[\n2\n]\n=\n \n(\n1\n \n+\n \nx\n \n+\n \n(\n2\n \n*\n \ny\n))\n\n\n\n\n\n\nIn\n[\n3\n]\n:=\n \n(\nSlot\n[\n1\n])\n \n===\n \n(\nSlot\n[\n1\n])\n\n\nOut\n[\n3\n]\n=\n \nTrue\n\n\n\n\n\n\nIn\n[\n4\n]\n:=\n \n(\nSlot\n[\n2\n])\n \n===\n \n(\nSlot\n[\n2\n])\n\n\nOut\n[\n4\n]\n=\n \nTrue\n\n\n\n\n\n\nIn\n[\n5\n]\n:=\n \nFunction\n[((\n4\n \n*\n \nSlot\n[\n1\n])\n \n+\n \nFunction\n[(\n2\n \n*\n \nSlot\n[\n1\n])][\na\n])][\nb\n]\n\n\nOut\n[\n5\n]\n=\n \n((\n2\n \n*\n \na\n)\n \n+\n \n(\n4\n \n*\n \nb\n))", 
            "title": "Slot "
        }, 
        {
            "location": "/builtin/functional/slot/#slot", 
            "text": "#  serves as a pure function's first parameter.  #n  serves as a pure function's  n 'th parameter.  Attributes[Slot] := {NHoldAll, Protected}", 
            "title": "Slot"
        }, 
        {
            "location": "/builtin/functional/slot/#simple-examples", 
            "text": "In [ 1 ] :=   Function [( 1   +   Slot [ 1 ])][ x ]  Out [ 1 ] =   ( 1   +   x )   In [ 2 ] :=   Function [( 1   +   Slot [ 1 ]   +   ( 2   *   Slot [ 2 ]))][ x ,   y ]  Out [ 2 ] =   ( 1   +   x   +   ( 2   *   y ))   In [ 3 ] :=   ( Slot [ 1 ])   ===   ( Slot [ 1 ])  Out [ 3 ] =   True   In [ 4 ] :=   ( Slot [ 2 ])   ===   ( Slot [ 2 ])  Out [ 4 ] =   True   In [ 5 ] :=   Function [(( 4   *   Slot [ 1 ])   +   Function [( 2   *   Slot [ 1 ])][ a ])][ b ]  Out [ 5 ] =   (( 2   *   a )   +   ( 4   *   b ))", 
            "title": "Simple examples"
        }, 
        {
            "location": "/builtin/functional/apply/", 
            "text": "Apply\n\n\nApply[f, e]\n (\nf@@e\n) replaces the head of expression \ne\n with \nf\n.\n\n\nAttributes[Apply] := {Protected}\n\n\nSimple examples\n\n\nIn\n[\n1\n]\n:=\n \nApply\n[\nbar\n,\n \nfoo\n[\nsyma\n,\n \nsymb\n]]\n\n\nOut\n[\n1\n]\n=\n \nbar\n[\nsyma\n,\n \nsymb\n]\n\n\n\n\n\n\nIn\n[\n2\n]\n:=\n \nApply\n[\nbar\n,\n \nfoo\n[\nsyma\n,\n \nsymb\n]]\n\n\nOut\n[\n2\n]\n=\n \nbar\n[\nsyma\n,\n \nsymb\n]\n\n\n\n\n\n\nIn\n[\n3\n]\n:=\n \nApply\n[\nList\n,\n \n(\nsyma\n \n+\n \nsymb\n)]\n\n\nOut\n[\n3\n]\n=\n \n{\nsyma\n,\n \nsymb\n}\n\n\n\n\n\n\nApply\n is useful in performing aggregations on \nList\ns:\n\n\nIn\n[\n4\n]\n:=\n \nApply\n[\nTimes\n,\n \n{\n2\n,\n \n6\n}]\n\n\nOut\n[\n4\n]\n=\n \n12\n\n\n\n\n\n\nIn\n[\n5\n]\n:=\n \nApply\n[\nTimes\n,\n \n{\na\n,\n \nb\n}]\n\n\nOut\n[\n5\n]\n=\n \n(\na\n \n*\n \nb\n)\n\n\n\n\n\n\nFurther examples\n\n\nApply\n has no effect on atoms:\n\n\nIn\n[\n1\n]\n:=\n \nApply\n[\nfoo\n,\n \n1\n]\n\n\nOut\n[\n1\n]\n=\n \n1\n\n\n\n\n\n\nIn\n[\n2\n]\n:=\n \nApply\n[\nfoo\n,\n \nbar\n]\n\n\nOut\n[\n2\n]\n=\n \nbar", 
            "title": "Apply "
        }, 
        {
            "location": "/builtin/functional/apply/#apply", 
            "text": "Apply[f, e]  ( f@@e ) replaces the head of expression  e  with  f .  Attributes[Apply] := {Protected}", 
            "title": "Apply"
        }, 
        {
            "location": "/builtin/functional/apply/#simple-examples", 
            "text": "In [ 1 ] :=   Apply [ bar ,   foo [ syma ,   symb ]]  Out [ 1 ] =   bar [ syma ,   symb ]   In [ 2 ] :=   Apply [ bar ,   foo [ syma ,   symb ]]  Out [ 2 ] =   bar [ syma ,   symb ]   In [ 3 ] :=   Apply [ List ,   ( syma   +   symb )]  Out [ 3 ] =   { syma ,   symb }   Apply  is useful in performing aggregations on  List s:  In [ 4 ] :=   Apply [ Times ,   { 2 ,   6 }]  Out [ 4 ] =   12   In [ 5 ] :=   Apply [ Times ,   { a ,   b }]  Out [ 5 ] =   ( a   *   b )", 
            "title": "Simple examples"
        }, 
        {
            "location": "/builtin/functional/apply/#further-examples", 
            "text": "Apply  has no effect on atoms:  In [ 1 ] :=   Apply [ foo ,   1 ]  Out [ 1 ] =   1   In [ 2 ] :=   Apply [ foo ,   bar ]  Out [ 2 ] =   bar", 
            "title": "Further examples"
        }, 
        {
            "location": "/builtin/functional/map/", 
            "text": "Map\n\n\nMap[f, expr]\n returns a new expression with the same head as \nexpr\n, but with \nf\n mapped to each of the arguments.\n\n\nAttributes[Map] := {Protected}\n\n\nSimple examples\n\n\nIn\n[\n1\n]\n:=\n \nMap\n[\nfoo\n,\n \n{\na\n,\n \nb\n,\n \nc\n}]\n\n\nOut\n[\n1\n]\n=\n \n{\nfoo\n[\na\n],\n \nfoo\n[\nb\n],\n \nfoo\n[\nc\n]}\n\n\n\n\n\n\nIn\n[\n2\n]\n:=\n \nMap\n[\nfoo\n,\n \n{\na\n,\n \nb\n,\n \nc\n}]\n\n\nOut\n[\n2\n]\n=\n \n{\nfoo\n[\na\n],\n \nfoo\n[\nb\n],\n \nfoo\n[\nc\n]}\n\n\n\n\n\n\nIn\n[\n3\n]\n:=\n \nMap\n[\nTimes\n,\n \n{\n2\n,\n \n4\n,\n \n9\n}]\n\n\nOut\n[\n3\n]\n=\n \n{\n2\n,\n \n4\n,\n \n9\n}\n\n\n\n\n\n\nIn\n[\n4\n]\n:=\n \nMap\n[\nfoo\n,\n \n{{\na\n,\n \nb\n},\n \nc\n}]\n\n\nOut\n[\n4\n]\n=\n \n{\nfoo\n[{\na\n,\n \nb\n}],\n \nfoo\n[\nc\n]}\n\n\n\n\n\n\nIn\n[\n5\n]\n:=\n \nMap\n[\nfoo\n]\n\n\nOut\n[\n5\n]\n=\n \nMap\n[\nfoo\n]\n\n\n\n\n\n\nIn\n[\n6\n]\n:=\n \nMap\n[\nfoo\n,\n \nfoo\n]\n\n\nOut\n[\n6\n]\n=\n \nfoo\n\n\n\n\n\n\nIn\n[\n7\n]\n:=\n \nMap\n[\nfoo\n,\n \nfoo\n,\n \nfoo\n]\n\n\nOut\n[\n7\n]\n=\n \nMap\n[\nfoo\n,\n \nfoo\n,\n \nfoo\n]\n\n\n\n\n\n\nPure functions are useful with \nMap\n:\n\n\nIn\n[\n8\n]\n:=\n \nMap\n[\nFunction\n[\nx\n,\n \nx\n^\n2\n],\n \n{\n2\n,\n \n4\n}]\n\n\nOut\n[\n8\n]\n=\n \n{\n4\n,\n \n16\n}\n\n\n\n\n\n\nIn\n[\n9\n]\n:=\n \nMap\n[\nFunction\n[\nSlot\n[\n1\n]\n^\n2\n],\n \n{\n2\n,\n \n4\n}]\n\n\nOut\n[\n9\n]\n=\n \n{\n4\n,\n \n16\n}", 
            "title": "Map "
        }, 
        {
            "location": "/builtin/functional/map/#map", 
            "text": "Map[f, expr]  returns a new expression with the same head as  expr , but with  f  mapped to each of the arguments.  Attributes[Map] := {Protected}", 
            "title": "Map"
        }, 
        {
            "location": "/builtin/functional/map/#simple-examples", 
            "text": "In [ 1 ] :=   Map [ foo ,   { a ,   b ,   c }]  Out [ 1 ] =   { foo [ a ],   foo [ b ],   foo [ c ]}   In [ 2 ] :=   Map [ foo ,   { a ,   b ,   c }]  Out [ 2 ] =   { foo [ a ],   foo [ b ],   foo [ c ]}   In [ 3 ] :=   Map [ Times ,   { 2 ,   4 ,   9 }]  Out [ 3 ] =   { 2 ,   4 ,   9 }   In [ 4 ] :=   Map [ foo ,   {{ a ,   b },   c }]  Out [ 4 ] =   { foo [{ a ,   b }],   foo [ c ]}   In [ 5 ] :=   Map [ foo ]  Out [ 5 ] =   Map [ foo ]   In [ 6 ] :=   Map [ foo ,   foo ]  Out [ 6 ] =   foo   In [ 7 ] :=   Map [ foo ,   foo ,   foo ]  Out [ 7 ] =   Map [ foo ,   foo ,   foo ]   Pure functions are useful with  Map :  In [ 8 ] :=   Map [ Function [ x ,   x ^ 2 ],   { 2 ,   4 }]  Out [ 8 ] =   { 4 ,   16 }   In [ 9 ] :=   Map [ Function [ Slot [ 1 ] ^ 2 ],   { 2 ,   4 }]  Out [ 9 ] =   { 4 ,   16 }", 
            "title": "Simple examples"
        }, 
        {
            "location": "/builtin/functional/array/", 
            "text": "Array\n\n\nArray[f, n]\n creates a list of \nf[i]\n, with \ni\n = 1 to \nn\n.\n\n\nAttributes[Array] := {Protected}\n\n\nSimple examples\n\n\nIn\n[\n1\n]\n:=\n \nArray\n[\nf\n,\n \n3\n]\n\n\nOut\n[\n1\n]\n=\n \n{\nf\n[\n1\n],\n \nf\n[\n2\n],\n \nf\n[\n3\n]}\n\n\n\n\n\n\nIn\n[\n2\n]\n:=\n \n(\nmytest\n[\nx_\n])\n \n:=\n \n(\n5\n)\n\n\nOut\n[\n2\n]\n=\n \nNull\n\n\n\n\n\n\nIn\n[\n3\n]\n:=\n \nArray\n[\nmytest\n,\n \n3\n]\n\n\nOut\n[\n3\n]\n=\n \n{\n5\n,\n \n5\n,\n \n5\n}\n\n\n\n\n\n\nIn\n[\n4\n]\n:=\n \nArray\n[(\na\n \n+\n \nb\n),\n \n3\n]\n\n\nOut\n[\n4\n]\n=\n \n{(\na\n \n+\n \nb\n)[\n1\n],\n \n(\na\n \n+\n \nb\n)[\n2\n],\n \n(\na\n \n+\n \nb\n)[\n3\n]}\n\n\n\n\n\n\nIn\n[\n5\n]\n:=\n \nArray\n[\na\n,\n \na\n]\n\n\nOut\n[\n5\n]\n=\n \nArray\n[\na\n,\n \na\n]", 
            "title": "Array "
        }, 
        {
            "location": "/builtin/functional/array/#array", 
            "text": "Array[f, n]  creates a list of  f[i] , with  i  = 1 to  n .  Attributes[Array] := {Protected}", 
            "title": "Array"
        }, 
        {
            "location": "/builtin/functional/array/#simple-examples", 
            "text": "In [ 1 ] :=   Array [ f ,   3 ]  Out [ 1 ] =   { f [ 1 ],   f [ 2 ],   f [ 3 ]}   In [ 2 ] :=   ( mytest [ x_ ])   :=   ( 5 )  Out [ 2 ] =   Null   In [ 3 ] :=   Array [ mytest ,   3 ]  Out [ 3 ] =   { 5 ,   5 ,   5 }   In [ 4 ] :=   Array [( a   +   b ),   3 ]  Out [ 4 ] =   {( a   +   b )[ 1 ],   ( a   +   b )[ 2 ],   ( a   +   b )[ 3 ]}   In [ 5 ] :=   Array [ a ,   a ]  Out [ 5 ] =   Array [ a ,   a ]", 
            "title": "Simple examples"
        }, 
        {
            "location": "/builtin/functional/identity/", 
            "text": "Identity\n\n\nIdentity[expr_]\n returns \nexpr\n.\n\n\nAttributes[Identity] := {Protected}\n\n\nSimple examples\n\n\nIn\n[\n1\n]\n:=\n \nIdentity\n[\n5\n]\n\n\nOut\n[\n1\n]\n=\n \n5\n\n\n\n\n\n\nIn\n[\n2\n]\n:=\n \nIdentity\n[\nIdentity\n[\na\n]]\n\n\nOut\n[\n2\n]\n=\n \na", 
            "title": "Identity "
        }, 
        {
            "location": "/builtin/functional/identity/#identity", 
            "text": "Identity[expr_]  returns  expr .  Attributes[Identity] := {Protected}", 
            "title": "Identity"
        }, 
        {
            "location": "/builtin/functional/identity/#simple-examples", 
            "text": "In [ 1 ] :=   Identity [ 5 ]  Out [ 1 ] =   5   In [ 2 ] :=   Identity [ Identity [ a ]]  Out [ 2 ] =   a", 
            "title": "Simple examples"
        }, 
        {
            "location": "/builtin/expression/", 
            "text": "expression documentation\n\n\nHead\n\n\nDepth\n\n\nLength\n\n\nSequence\n\n\nEvaluate\n\n\nHold\n\n\nHoldForm\n\n\nFlatten", 
            "title": "expression"
        }, 
        {
            "location": "/builtin/expression/#expression-documentation", 
            "text": "Head  Depth  Length  Sequence  Evaluate  Hold  HoldForm  Flatten", 
            "title": "expression documentation"
        }, 
        {
            "location": "/builtin/expression/head/", 
            "text": "Head\n\n\nHead[expr]\n returns the head of the expression.\n\n\nAttributes[Head] := {Protected}\n\n\nSimple examples\n\n\nIn\n[\n1\n]\n:=\n \nHead\n[\nf\n[\nx\n]]\n\n\nOut\n[\n1\n]\n=\n \nf\n\n\n\n\n\n\nIn\n[\n2\n]\n:=\n \nHead\n[\nx\n]\n\n\nOut\n[\n2\n]\n=\n \nSymbol\n\n\n\n\n\n\nIn\n[\n3\n]\n:=\n \nHead\n[{\nx\n}]\n\n\nOut\n[\n3\n]\n=\n \nList\n\n\n\n\n\n\nIn\n[\n4\n]\n:=\n \nHead\n[(\na\n \n+\n \nb\n)]\n\n\nOut\n[\n4\n]\n=\n \nPlus\n\n\n\n\n\n\nIn\n[\n5\n]\n:=\n \nHead\n[\n1\n]\n\n\nOut\n[\n5\n]\n=\n \nInteger\n\n\n\n\n\n\nIn\n[\n6\n]\n:=\n \nHead\n[\n1.\n]\n\n\nOut\n[\n6\n]\n=\n \nReal\n\n\n\n\n\n\nIn\n[\n7\n]\n:=\n \nHead\n[(\n2\n \n*\n \n7\n^-\n1\n)]\n\n\nOut\n[\n7\n]\n=\n \nRational\n\n\n\n\n\n\nIn\n[\n8\n]\n:=\n \nHead\n[(\n1\n \n*\n \n7\n^-\n1\n)]\n\n\nOut\n[\n8\n]\n=\n \nRational\n\n\n\n\n\n\nIn\n[\n9\n]\n:=\n \nHead\n[\n1\n]\n\n\nOut\n[\n9\n]\n=\n \nString\n\n\n\n\n\n\nIn\n[\n10\n]\n:=\n \nHead\n[\nHead\n[(\na\n \n+\n \nb\n)[\nx\n]]]\n\n\nOut\n[\n10\n]\n=\n \nPlus", 
            "title": "Head "
        }, 
        {
            "location": "/builtin/expression/head/#head", 
            "text": "Head[expr]  returns the head of the expression.  Attributes[Head] := {Protected}", 
            "title": "Head"
        }, 
        {
            "location": "/builtin/expression/head/#simple-examples", 
            "text": "In [ 1 ] :=   Head [ f [ x ]]  Out [ 1 ] =   f   In [ 2 ] :=   Head [ x ]  Out [ 2 ] =   Symbol   In [ 3 ] :=   Head [{ x }]  Out [ 3 ] =   List   In [ 4 ] :=   Head [( a   +   b )]  Out [ 4 ] =   Plus   In [ 5 ] :=   Head [ 1 ]  Out [ 5 ] =   Integer   In [ 6 ] :=   Head [ 1. ]  Out [ 6 ] =   Real   In [ 7 ] :=   Head [( 2   *   7 ^- 1 )]  Out [ 7 ] =   Rational   In [ 8 ] :=   Head [( 1   *   7 ^- 1 )]  Out [ 8 ] =   Rational   In [ 9 ] :=   Head [ 1 ]  Out [ 9 ] =   String   In [ 10 ] :=   Head [ Head [( a   +   b )[ x ]]]  Out [ 10 ] =   Plus", 
            "title": "Simple examples"
        }, 
        {
            "location": "/builtin/expression/depth/", 
            "text": "Depth\n\n\nDepth[expr]\n returns the depth of \nexpr\n.\n\n\nAttributes[Depth] := {Protected}\n\n\nSimple examples\n\n\nIn\n[\n1\n]\n:=\n \nDepth\n[\nfoo\n]\n\n\nOut\n[\n1\n]\n=\n \n1\n\n\n\n\n\n\nIn\n[\n2\n]\n:=\n \nDepth\n[{\nfoo\n}]\n\n\nOut\n[\n2\n]\n=\n \n2\n\n\n\n\n\n\nIn\n[\n3\n]\n:=\n \nDepth\n[\nbar\n[\nfoo\n,\n \nbar\n]]\n\n\nOut\n[\n3\n]\n=\n \n2\n\n\n\n\n\n\nIn\n[\n4\n]\n:=\n \nDepth\n[\nfoo\n[\nfoo\n[]]]\n\n\nOut\n[\n4\n]\n=\n \n3\n\n\n\n\n\n\nIn\n[\n5\n]\n:=\n \nDepth\n[\n3\n]\n\n\nOut\n[\n5\n]\n=\n \n1\n\n\n\n\n\n\nIn\n[\n6\n]\n:=\n \nDepth\n[\n3.5\n]\n\n\nOut\n[\n6\n]\n=\n \n1\n\n\n\n\n\n\nIn\n[\n7\n]\n:=\n \nDepth\n[(\n3\n \n*\n \n5\n^-\n1\n)]\n\n\nOut\n[\n7\n]\n=\n \n1\n\n\n\n\n\n\nIn\n[\n8\n]\n:=\n \nDepth\n[\nfoo\n[{{{}}}][]]\n\n\nOut\n[\n8\n]\n=\n \n2", 
            "title": "Depth "
        }, 
        {
            "location": "/builtin/expression/depth/#depth", 
            "text": "Depth[expr]  returns the depth of  expr .  Attributes[Depth] := {Protected}", 
            "title": "Depth"
        }, 
        {
            "location": "/builtin/expression/depth/#simple-examples", 
            "text": "In [ 1 ] :=   Depth [ foo ]  Out [ 1 ] =   1   In [ 2 ] :=   Depth [{ foo }]  Out [ 2 ] =   2   In [ 3 ] :=   Depth [ bar [ foo ,   bar ]]  Out [ 3 ] =   2   In [ 4 ] :=   Depth [ foo [ foo []]]  Out [ 4 ] =   3   In [ 5 ] :=   Depth [ 3 ]  Out [ 5 ] =   1   In [ 6 ] :=   Depth [ 3.5 ]  Out [ 6 ] =   1   In [ 7 ] :=   Depth [( 3   *   5 ^- 1 )]  Out [ 7 ] =   1   In [ 8 ] :=   Depth [ foo [{{{}}}][]]  Out [ 8 ] =   2", 
            "title": "Simple examples"
        }, 
        {
            "location": "/builtin/expression/length/", 
            "text": "Length\n\n\nLength[expr]\n returns the length of \nexpr\n.\n\n\nAttributes[Length] := {Protected}\n\n\nSimple examples\n\n\nIn\n[\n1\n]\n:=\n \nLength\n[{\n1\n,\n \n2\n,\n \n3\n,\n \n4\n}]\n\n\nOut\n[\n1\n]\n=\n \n4\n\n\n\n\n\n\nIn\n[\n2\n]\n:=\n \nLength\n[{}]\n\n\nOut\n[\n2\n]\n=\n \n0\n\n\n\n\n\n\nIn\n[\n3\n]\n:=\n \nLength\n[{\n5\n}]\n\n\nOut\n[\n3\n]\n=\n \n1\n\n\n\n\n\n\nFurther examples\n\n\nexpr\n need not have a \nList\n head:\n\n\nIn\n[\n1\n]\n:=\n \nLength\n[\nfoo\n[\n1\n,\n \n2\n]]\n\n\nOut\n[\n1\n]\n=\n \n2\n\n\n\n\n\n\nThe length of an atomic expression is zero:\n\n\nIn\n[\n2\n]\n:=\n \nLength\n[\na\n]\n\n\nOut\n[\n2\n]\n=\n \n0\n\n\n\n\n\n\nIn\n[\n3\n]\n:=\n \nLength\n[\n2.5\n]\n\n\nOut\n[\n3\n]\n=\n \n0\n\n\n\n\n\n\nIn\n[\n4\n]\n:=\n \nLength\n[\nhello\n]\n\n\nOut\n[\n4\n]\n=\n \n0", 
            "title": "Length "
        }, 
        {
            "location": "/builtin/expression/length/#length", 
            "text": "Length[expr]  returns the length of  expr .  Attributes[Length] := {Protected}", 
            "title": "Length"
        }, 
        {
            "location": "/builtin/expression/length/#simple-examples", 
            "text": "In [ 1 ] :=   Length [{ 1 ,   2 ,   3 ,   4 }]  Out [ 1 ] =   4   In [ 2 ] :=   Length [{}]  Out [ 2 ] =   0   In [ 3 ] :=   Length [{ 5 }]  Out [ 3 ] =   1", 
            "title": "Simple examples"
        }, 
        {
            "location": "/builtin/expression/length/#further-examples", 
            "text": "expr  need not have a  List  head:  In [ 1 ] :=   Length [ foo [ 1 ,   2 ]]  Out [ 1 ] =   2   The length of an atomic expression is zero:  In [ 2 ] :=   Length [ a ]  Out [ 2 ] =   0   In [ 3 ] :=   Length [ 2.5 ]  Out [ 3 ] =   0   In [ 4 ] :=   Length [ hello ]  Out [ 4 ] =   0", 
            "title": "Further examples"
        }, 
        {
            "location": "/builtin/expression/sequence/", 
            "text": "Sequence\n\n\nSequence[e1, e2, ...]\n holds a list of expressions to be automatically inserted into another function.\n\n\nAttributes[Sequence] := {Protected}\n\n\nSimple examples\n\n\nSequence arguments are automatically inserted into the parent functions:\n\n\nIn\n[\n1\n]\n:=\n \nfoo\n[\na\n,\n \nSequence\n[\n2\n,\n \n3\n]]\n\n\nOut\n[\n1\n]\n=\n \nfoo\n[\na\n,\n \n2\n,\n \n3\n]\n\n\n\n\n\n\nOutside of the context of functions, Sequence objects do not merge:\n\n\nIn\n[\n2\n]\n:=\n \nSequence\n[\n2\n,\n \n3\n]\n\n\nOut\n[\n2\n]\n=\n \nSequence\n[\n2\n,\n \n3\n]\n\n\n\n\n\n\nIn\n[\n3\n]\n:=\n \n(\nSequence\n[\n2\n,\n \n3\n]\n \n+\n \nSequence\n[\n5\n,\n \n4\n])\n\n\nOut\n[\n3\n]\n=\n \n14\n\n\n\n\n\n\nIn\n[\n4\n]\n:=\n \n(\nSequence\n[\n2\n,\n \n3\n]\n \n*\n \nSequence\n[\n5\n,\n \n4\n])\n\n\nOut\n[\n4\n]\n=\n \n120\n\n\n\n\n\n\nFurther examples\n\n\nEmpty \nSequence[]\n objects effectively disappear:\n\n\nIn\n[\n1\n]\n:=\n \nfoo\n[\nSequence\n[]]\n\n\nOut\n[\n1\n]\n=\n \nfoo\n[]", 
            "title": "Sequence "
        }, 
        {
            "location": "/builtin/expression/sequence/#sequence", 
            "text": "Sequence[e1, e2, ...]  holds a list of expressions to be automatically inserted into another function.  Attributes[Sequence] := {Protected}", 
            "title": "Sequence"
        }, 
        {
            "location": "/builtin/expression/sequence/#simple-examples", 
            "text": "Sequence arguments are automatically inserted into the parent functions:  In [ 1 ] :=   foo [ a ,   Sequence [ 2 ,   3 ]]  Out [ 1 ] =   foo [ a ,   2 ,   3 ]   Outside of the context of functions, Sequence objects do not merge:  In [ 2 ] :=   Sequence [ 2 ,   3 ]  Out [ 2 ] =   Sequence [ 2 ,   3 ]   In [ 3 ] :=   ( Sequence [ 2 ,   3 ]   +   Sequence [ 5 ,   4 ])  Out [ 3 ] =   14   In [ 4 ] :=   ( Sequence [ 2 ,   3 ]   *   Sequence [ 5 ,   4 ])  Out [ 4 ] =   120", 
            "title": "Simple examples"
        }, 
        {
            "location": "/builtin/expression/sequence/#further-examples", 
            "text": "Empty  Sequence[]  objects effectively disappear:  In [ 1 ] :=   foo [ Sequence []]  Out [ 1 ] =   foo []", 
            "title": "Further examples"
        }, 
        {
            "location": "/builtin/expression/evaluate/", 
            "text": "Evaluate\n\n\nEvaluate[expr]\n evaluates to an evaluated form of \nexpr\n, even when under hold conditions.\n\n\nAttributes[Evaluate] := {Protected}\n\n\nSimple examples\n\n\nIn\n[\n1\n]\n:=\n \nHold\n[\nEvaluate\n[\n1\n \n+\n \n3\n],\n \n2\n \n+\n \n1\n]\n\n\nOut\n[\n1\n]\n=\n \nHold\n[\n4\n,\n \n(\n2\n \n+\n \n1\n)]\n\n\n\n\n\n\nIn\n[\n2\n]\n:=\n \nHold\n[\nfoo\n[\nEvaluate\n[\n1\n \n+\n \n1\n]]]\n\n\nOut\n[\n2\n]\n=\n \nHold\n[\nfoo\n[\nEvaluate\n[(\n1\n \n+\n \n1\n)]]]\n\n\n\n\n\n\nIn\n[\n3\n]\n:=\n \nHold\n[\nEvaluate\n[\n1\n \n+\n \n3\n,\n \n5\n \n+\n \n2\n],\n \n2\n \n+\n \n1\n]\n\n\nOut\n[\n3\n]\n=\n \nHold\n[\n4\n,\n \n7\n,\n \n(\n2\n \n+\n \n1\n)]\n\n\n\n\n\n\nIn\n[\n4\n]\n:=\n \nHold\n[\nSequence\n[\n1\n \n+\n \n3\n,\n \n5\n \n+\n \n2\n],\n \n2\n \n+\n \n1\n]\n\n\nOut\n[\n4\n]\n=\n \nHold\n[(\n1\n \n+\n \n3\n),\n \n(\n5\n \n+\n \n2\n),\n \n(\n2\n \n+\n \n1\n)]", 
            "title": "Evaluate "
        }, 
        {
            "location": "/builtin/expression/evaluate/#evaluate", 
            "text": "Evaluate[expr]  evaluates to an evaluated form of  expr , even when under hold conditions.  Attributes[Evaluate] := {Protected}", 
            "title": "Evaluate"
        }, 
        {
            "location": "/builtin/expression/evaluate/#simple-examples", 
            "text": "In [ 1 ] :=   Hold [ Evaluate [ 1   +   3 ],   2   +   1 ]  Out [ 1 ] =   Hold [ 4 ,   ( 2   +   1 )]   In [ 2 ] :=   Hold [ foo [ Evaluate [ 1   +   1 ]]]  Out [ 2 ] =   Hold [ foo [ Evaluate [( 1   +   1 )]]]   In [ 3 ] :=   Hold [ Evaluate [ 1   +   3 ,   5   +   2 ],   2   +   1 ]  Out [ 3 ] =   Hold [ 4 ,   7 ,   ( 2   +   1 )]   In [ 4 ] :=   Hold [ Sequence [ 1   +   3 ,   5   +   2 ],   2   +   1 ]  Out [ 4 ] =   Hold [( 1   +   3 ),   ( 5   +   2 ),   ( 2   +   1 )]", 
            "title": "Simple examples"
        }, 
        {
            "location": "/builtin/expression/hold/", 
            "text": "Hold\n\n\nHold[expr]\n prevents automatic evaluation of \nexpr\n.\n\n\nAttributes[Hold] := {HoldAll, Protected}\n\n\nSimple examples\n\n\nIn\n[\n1\n]\n:=\n \nHold\n[\nPower\n[\n5\n,\n \n3\n]]\n\n\nOut\n[\n1\n]\n=\n \nHold\n[\n5\n^\n3\n]\n\n\n\n\n\n\nIn\n[\n2\n]\n:=\n \nHold\n[\nPower\n[\n5.\n,\n \n3.\n]]\n\n\nOut\n[\n2\n]\n=\n \nHold\n[\n5.\n^\n3.\n]", 
            "title": "Hold "
        }, 
        {
            "location": "/builtin/expression/hold/#hold", 
            "text": "Hold[expr]  prevents automatic evaluation of  expr .  Attributes[Hold] := {HoldAll, Protected}", 
            "title": "Hold"
        }, 
        {
            "location": "/builtin/expression/hold/#simple-examples", 
            "text": "In [ 1 ] :=   Hold [ Power [ 5 ,   3 ]]  Out [ 1 ] =   Hold [ 5 ^ 3 ]   In [ 2 ] :=   Hold [ Power [ 5. ,   3. ]]  Out [ 2 ] =   Hold [ 5. ^ 3. ]", 
            "title": "Simple examples"
        }, 
        {
            "location": "/builtin/expression/holdform/", 
            "text": "HoldForm\n\n\nHoldForm[expr]\n prevents automatic evaluation of \nexpr\n. Prints as \nexpr\n.\n\n\nAttributes[HoldForm] := {HoldAll, Protected}\n\n\nSimple examples\n\n\nIn\n[\n1\n]\n:=\n \nHoldForm\n[\nPower\n[\n5\n,\n \n3\n]]\n\n\nOut\n[\n1\n]\n=\n \n5\n^\n3\n\n\n\n\n\n\nIn\n[\n2\n]\n:=\n \nHoldForm\n[\nPower\n[\n5.\n,\n \n3.\n]]\n\n\nOut\n[\n2\n]\n=\n \n5.\n^\n3.", 
            "title": "HoldForm "
        }, 
        {
            "location": "/builtin/expression/holdform/#holdform", 
            "text": "HoldForm[expr]  prevents automatic evaluation of  expr . Prints as  expr .  Attributes[HoldForm] := {HoldAll, Protected}", 
            "title": "HoldForm"
        }, 
        {
            "location": "/builtin/expression/holdform/#simple-examples", 
            "text": "In [ 1 ] :=   HoldForm [ Power [ 5 ,   3 ]]  Out [ 1 ] =   5 ^ 3   In [ 2 ] :=   HoldForm [ Power [ 5. ,   3. ]]  Out [ 2 ] =   5. ^ 3.", 
            "title": "Simple examples"
        }, 
        {
            "location": "/builtin/expression/flatten/", 
            "text": "Flatten\n\n\nFlatten[list]\n flattens out lists in \nlist\n.\n\n\nAttributes[Flatten] := {Protected}\n\n\nSimple examples\n\n\nIn\n[\n1\n]\n:=\n \nFlatten\n[\n1\n]\n\n\nOut\n[\n1\n]\n=\n \nFlatten\n[\n1\n]\n\n\n\n\n\n\nInput must be nonatomic:\n\n\nIn\n[\n2\n]\n:=\n \nFlatten\n[{\n1\n}]\n\n\nOut\n[\n2\n]\n=\n \n{\n1\n}\n\n\n\n\n\n\nIn\n[\n3\n]\n:=\n \nFlatten\n[{{{{\n1\n}}}}]\n\n\nOut\n[\n3\n]\n=\n \n{\n1\n}\n\n\n\n\n\n\nIn\n[\n4\n]\n:=\n \nFlatten\n[{{{{\n1\n},\n \n2\n}},\n \n3\n}]\n\n\nOut\n[\n4\n]\n=\n \n{\n1\n,\n \n2\n,\n \n3\n}\n\n\n\n\n\n\nIn\n[\n5\n]\n:=\n \nFlatten\n[{{{{\n1\n},\n \n2\n}},\n \n3\n,\n \n4\n}]\n\n\nOut\n[\n5\n]\n=\n \n{\n1\n,\n \n2\n,\n \n3\n,\n \n4\n}\n\n\n\n\n\n\nIn\n[\n6\n]\n:=\n \nFlatten\n[{\n-\n1\n,\n \n{{{\n1\n},\n \n2\n}},\n \n3\n,\n \n4\n}]\n\n\nOut\n[\n6\n]\n=\n \n{\n-\n1\n,\n \n1\n,\n \n2\n,\n \n3\n,\n \n4\n}\n\n\n\n\n\n\nA level of zero means no change:\n\n\nIn\n[\n7\n]\n:=\n \nFlatten\n[{\n-\n1\n,\n \n{{{\n1\n},\n \n2\n}},\n \n3\n,\n \n4\n},\n \n0\n]\n\n\nOut\n[\n7\n]\n=\n \n{\n-\n1\n,\n \n{{{\n1\n},\n \n2\n}},\n \n3\n,\n \n4\n}\n\n\n\n\n\n\nIn\n[\n8\n]\n:=\n \nFlatten\n[{\n-\n1\n,\n \n{{{\n1\n},\n \n2\n}},\n \n3\n,\n \n4\n},\n \n1\n]\n\n\nOut\n[\n8\n]\n=\n \n{\n-\n1\n,\n \n{{\n1\n},\n \n2\n},\n \n3\n,\n \n4\n}\n\n\n\n\n\n\nIn\n[\n9\n]\n:=\n \nFlatten\n[{\n-\n1\n,\n \n{{{\n1\n},\n \n2\n}},\n \n3\n,\n \n4\n},\n \n2\n]\n\n\nOut\n[\n9\n]\n=\n \n{\n-\n1\n,\n \n{\n1\n},\n \n2\n,\n \n3\n,\n \n4\n}\n\n\n\n\n\n\nIn\n[\n10\n]\n:=\n \nFlatten\n[{\n-\n1\n,\n \n{{{\n1\n},\n \n2\n}},\n \n3\n,\n \n4\n},\n \n3\n]\n\n\nOut\n[\n10\n]\n=\n \n{\n-\n1\n,\n \n1\n,\n \n2\n,\n \n3\n,\n \n4\n}\n\n\n\n\n\n\nIn\n[\n11\n]\n:=\n \nFlatten\n[{\n-\n1\n,\n \n{{{\n1\n},\n \n2\n}},\n \n3\n,\n \n4\n},\n \n4\n]\n\n\nOut\n[\n11\n]\n=\n \n{\n-\n1\n,\n \n1\n,\n \n2\n,\n \n3\n,\n \n4\n}\n\n\n\n\n\n\nIn\n[\n12\n]\n:=\n \nFlatten\n[{\n-\n1\n,\n \n{{{\n1\n},\n \n2\n}},\n \n3\n,\n \n4\n},\n \na\n]\n\n\nOut\n[\n12\n]\n=\n \nFlatten\n[{\n-\n1\n,\n \n{{{\n1\n},\n \n2\n}},\n \n3\n,\n \n4\n},\n \na\n]\n\n\n\n\n\n\nIn\n[\n13\n]\n:=\n \nFlatten\n[{\n-\n1\n,\n \n{\nfoo\n[{{\n1\n},\n \n2\n}]},\n \n3\n,\n \n4\n},\n \n999\n]\n\n\nOut\n[\n13\n]\n=\n \n{\n-\n1\n,\n \nfoo\n[{{\n1\n},\n \n2\n}],\n \n3\n,\n \n4\n}\n\n\n\n\n\n\nIn\n[\n14\n]\n:=\n \nFlatten\n[{\n-\n1\n,\n \n{\nfoo\n[{{\n1\n},\n \n2\n}]},\n \n3\n,\n \n4\n},\n \n999\n]\n\n\nOut\n[\n14\n]\n=\n \n{\n-\n1\n,\n \nfoo\n[{{\n1\n},\n \n2\n}],\n \n3\n,\n \n4\n}\n\n\n\n\n\n\nIn\n[\n15\n]\n:=\n \nFlatten\n[{\n-\n1\n,\n \n{\n1\n[{{\n1\n},\n \n2\n}]},\n \n3\n,\n \n4\n},\n \n999\n]\n\n\nOut\n[\n15\n]\n=\n \n{\n-\n1\n,\n \n1\n[{{\n1\n},\n \n2\n}],\n \n3\n,\n \n4\n}", 
            "title": "Flatten "
        }, 
        {
            "location": "/builtin/expression/flatten/#flatten", 
            "text": "Flatten[list]  flattens out lists in  list .  Attributes[Flatten] := {Protected}", 
            "title": "Flatten"
        }, 
        {
            "location": "/builtin/expression/flatten/#simple-examples", 
            "text": "In [ 1 ] :=   Flatten [ 1 ]  Out [ 1 ] =   Flatten [ 1 ]   Input must be nonatomic:  In [ 2 ] :=   Flatten [{ 1 }]  Out [ 2 ] =   { 1 }   In [ 3 ] :=   Flatten [{{{{ 1 }}}}]  Out [ 3 ] =   { 1 }   In [ 4 ] :=   Flatten [{{{{ 1 },   2 }},   3 }]  Out [ 4 ] =   { 1 ,   2 ,   3 }   In [ 5 ] :=   Flatten [{{{{ 1 },   2 }},   3 ,   4 }]  Out [ 5 ] =   { 1 ,   2 ,   3 ,   4 }   In [ 6 ] :=   Flatten [{ - 1 ,   {{{ 1 },   2 }},   3 ,   4 }]  Out [ 6 ] =   { - 1 ,   1 ,   2 ,   3 ,   4 }   A level of zero means no change:  In [ 7 ] :=   Flatten [{ - 1 ,   {{{ 1 },   2 }},   3 ,   4 },   0 ]  Out [ 7 ] =   { - 1 ,   {{{ 1 },   2 }},   3 ,   4 }   In [ 8 ] :=   Flatten [{ - 1 ,   {{{ 1 },   2 }},   3 ,   4 },   1 ]  Out [ 8 ] =   { - 1 ,   {{ 1 },   2 },   3 ,   4 }   In [ 9 ] :=   Flatten [{ - 1 ,   {{{ 1 },   2 }},   3 ,   4 },   2 ]  Out [ 9 ] =   { - 1 ,   { 1 },   2 ,   3 ,   4 }   In [ 10 ] :=   Flatten [{ - 1 ,   {{{ 1 },   2 }},   3 ,   4 },   3 ]  Out [ 10 ] =   { - 1 ,   1 ,   2 ,   3 ,   4 }   In [ 11 ] :=   Flatten [{ - 1 ,   {{{ 1 },   2 }},   3 ,   4 },   4 ]  Out [ 11 ] =   { - 1 ,   1 ,   2 ,   3 ,   4 }   In [ 12 ] :=   Flatten [{ - 1 ,   {{{ 1 },   2 }},   3 ,   4 },   a ]  Out [ 12 ] =   Flatten [{ - 1 ,   {{{ 1 },   2 }},   3 ,   4 },   a ]   In [ 13 ] :=   Flatten [{ - 1 ,   { foo [{{ 1 },   2 }]},   3 ,   4 },   999 ]  Out [ 13 ] =   { - 1 ,   foo [{{ 1 },   2 }],   3 ,   4 }   In [ 14 ] :=   Flatten [{ - 1 ,   { foo [{{ 1 },   2 }]},   3 ,   4 },   999 ]  Out [ 14 ] =   { - 1 ,   foo [{{ 1 },   2 }],   3 ,   4 }   In [ 15 ] :=   Flatten [{ - 1 ,   { 1 [{{ 1 },   2 }]},   3 ,   4 },   999 ]  Out [ 15 ] =   { - 1 ,   1 [{{ 1 },   2 }],   3 ,   4 }", 
            "title": "Simple examples"
        }, 
        {
            "location": "/builtin/solve/", 
            "text": "solve documentation\n\n\nSolve", 
            "title": "solve"
        }, 
        {
            "location": "/builtin/solve/#solve-documentation", 
            "text": "Solve", 
            "title": "solve documentation"
        }, 
        {
            "location": "/builtin/solve/solve/", 
            "text": "Solve\n\n\nSolve[eqn, var]\n solves \neqn\n for \nvar\n.\n\n\nAttributes[Solve] := {Protected}\n\n\nDetails\n\n\n\n\nUnder development\n\n\nThis function is under development, and as such will be incomplete and inaccurate. The function currently only knows how to solve a few example forms of equations.\n\n\n\n\nSimple examples\n\n\nIn\n[\n1\n]\n:=\n \nSolve\n[(\nx\n)\n \n==\n \n(\n0\n),\n \nx\n]\n\n\nOut\n[\n1\n]\n=\n \n{{(\nx\n)\n \n-\n \n(\n0\n)}}\n\n\n\n\n\n\nIn\n[\n2\n]\n:=\n \nSolve\n[(\nx\n)\n \n==\n \n(\nb\n),\n \nx\n]\n\n\nOut\n[\n2\n]\n=\n \n{{(\nx\n)\n \n-\n \n(\nb\n)}}\n\n\n\n\n\n\nIn\n[\n3\n]\n:=\n \nSolve\n[((\nx\n \n*\n \na\n^-\n1\n))\n \n==\n \n(\nb\n),\n \nx\n]\n\n\nOut\n[\n3\n]\n=\n \n{{(\nx\n)\n \n-\n \n((\na\n \n*\n \nb\n))}}\n\n\n\n\n\n\nIn\n[\n4\n]\n:=\n \nSolve\n[((\nx\n \n*\n \na\n))\n \n==\n \n(\nb\n),\n \nx\n]\n\n\nOut\n[\n4\n]\n=\n \n{{(\nx\n)\n \n-\n \n((\nb\n \n*\n \na\n^-\n1\n))}}\n\n\n\n\n\n\nIn\n[\n5\n]\n:=\n \nSolve\n[(((\nm\n \n*\n \nx\n)\n \n+\n \nb\n))\n \n==\n \n(\n0\n),\n \nx\n]\n\n\nOut\n[\n5\n]\n=\n \n{{(\nx\n)\n \n-\n \n(((\nb\n \n*\n \nm\n^-\n1\n)\n \n*\n \n-\n1\n))}}\n\n\n\n\n\n\nIn\n[\n6\n]\n:=\n \nSolve\n[(((\nm\n \n*\n \nx\n)\n \n+\n \nb\n))\n \n==\n \n(\nc\n),\n \nx\n]\n\n\nOut\n[\n6\n]\n=\n \n{{(\nx\n)\n \n-\n \n((((\nb\n \n*\n \n-\n1\n)\n \n+\n \nc\n)\n \n*\n \nm\n^-\n1\n))}}\n\n\n\n\n\n\nIn\n[\n7\n]\n:=\n \nSolve\n[(((\na\n \n*\n \nx\n^\n2\n)\n \n+\n \n(\nb\n \n*\n \nx\n)\n \n+\n \nc\n))\n \n==\n \n(\n0\n),\n \nx\n]\n\n\nOut\n[\n7\n]\n=\n \n{{(\nx\n)\n \n-\n \n((((\nb\n \n*\n \n-\n1\n)\n \n+\n \n(\nSqrt\n[(\nb\n^\n2\n \n+\n \n((\n4\n \n*\n \na\n \n*\n \nc\n)\n \n*\n \n-\n1\n))]\n \n*\n \n-\n1\n))\n \n*\n \n(\n2\n \n*\n \na\n)\n^-\n1\n))},\n \n{(\nx\n)\n \n-\n \n((((\nb\n \n*\n \n-\n1\n)\n \n+\n \nSqrt\n[(\nb\n^\n2\n \n+\n \n((\n4\n \n*\n \na\n \n*\n \nc\n)\n \n*\n \n-\n1\n))])\n \n*\n \n(\n2\n \n*\n \na\n)\n^-\n1\n))}}\n\n\n\n\n\n\nIn\n[\n8\n]\n:=\n \nSolve\n[(((\na\n \n*\n \nx\n^\n2\n)\n \n+\n \n(\nb\n \n*\n \nx\n)\n \n+\n \nc\n))\n \n==\n \n(\nd\n),\n \nx\n]\n\n\nOut\n[\n8\n]\n=\n \n{{(\nx\n)\n \n-\n \n((((\nb\n \n*\n \n-\n1\n)\n \n+\n \n(\nSqrt\n[(\nb\n^\n2\n \n+\n \n((\n4\n \n*\n \na\n \n*\n \nc\n)\n \n*\n \n-\n1\n)\n \n+\n \n(\n4\n \n*\n \na\n \n*\n \nd\n))]\n \n*\n \n-\n1\n))\n \n*\n \n(\n2\n \n*\n \na\n)\n^-\n1\n))},\n \n{(\nx\n)\n \n-\n \n((((\nb\n \n*\n \n-\n1\n)\n \n+\n \nSqrt\n[(\nb\n^\n2\n \n+\n \n((\n4\n \n*\n \na\n \n*\n \nc\n)\n \n*\n \n-\n1\n)\n \n+\n \n(\n4\n \n*\n \na\n \n*\n \nd\n))])\n \n*\n \n(\n2\n \n*\n \na\n)\n^-\n1\n))}}", 
            "title": "Solve "
        }, 
        {
            "location": "/builtin/solve/solve/#solve", 
            "text": "Solve[eqn, var]  solves  eqn  for  var .  Attributes[Solve] := {Protected}", 
            "title": "Solve"
        }, 
        {
            "location": "/builtin/solve/solve/#details", 
            "text": "Under development  This function is under development, and as such will be incomplete and inaccurate. The function currently only knows how to solve a few example forms of equations.", 
            "title": "Details"
        }, 
        {
            "location": "/builtin/solve/solve/#simple-examples", 
            "text": "In [ 1 ] :=   Solve [( x )   ==   ( 0 ),   x ]  Out [ 1 ] =   {{( x )   -   ( 0 )}}   In [ 2 ] :=   Solve [( x )   ==   ( b ),   x ]  Out [ 2 ] =   {{( x )   -   ( b )}}   In [ 3 ] :=   Solve [(( x   *   a ^- 1 ))   ==   ( b ),   x ]  Out [ 3 ] =   {{( x )   -   (( a   *   b ))}}   In [ 4 ] :=   Solve [(( x   *   a ))   ==   ( b ),   x ]  Out [ 4 ] =   {{( x )   -   (( b   *   a ^- 1 ))}}   In [ 5 ] :=   Solve [((( m   *   x )   +   b ))   ==   ( 0 ),   x ]  Out [ 5 ] =   {{( x )   -   ((( b   *   m ^- 1 )   *   - 1 ))}}   In [ 6 ] :=   Solve [((( m   *   x )   +   b ))   ==   ( c ),   x ]  Out [ 6 ] =   {{( x )   -   (((( b   *   - 1 )   +   c )   *   m ^- 1 ))}}   In [ 7 ] :=   Solve [((( a   *   x ^ 2 )   +   ( b   *   x )   +   c ))   ==   ( 0 ),   x ]  Out [ 7 ] =   {{( x )   -   (((( b   *   - 1 )   +   ( Sqrt [( b ^ 2   +   (( 4   *   a   *   c )   *   - 1 ))]   *   - 1 ))   *   ( 2   *   a ) ^- 1 ))},   {( x )   -   (((( b   *   - 1 )   +   Sqrt [( b ^ 2   +   (( 4   *   a   *   c )   *   - 1 ))])   *   ( 2   *   a ) ^- 1 ))}}   In [ 8 ] :=   Solve [((( a   *   x ^ 2 )   +   ( b   *   x )   +   c ))   ==   ( d ),   x ]  Out [ 8 ] =   {{( x )   -   (((( b   *   - 1 )   +   ( Sqrt [( b ^ 2   +   (( 4   *   a   *   c )   *   - 1 )   +   ( 4   *   a   *   d ))]   *   - 1 ))   *   ( 2   *   a ) ^- 1 ))},   {( x )   -   (((( b   *   - 1 )   +   Sqrt [( b ^ 2   +   (( 4   *   a   *   c )   *   - 1 )   +   ( 4   *   a   *   d ))])   *   ( 2   *   a ) ^- 1 ))}}", 
            "title": "Simple examples"
        }, 
        {
            "location": "/builtin/flowcontrol/", 
            "text": "flowcontrol documentation\n\n\nIf\n\n\nWhile\n\n\nCompoundExpression\n\n\nReturn\n\n\nWhich", 
            "title": "flowcontrol"
        }, 
        {
            "location": "/builtin/flowcontrol/#flowcontrol-documentation", 
            "text": "If  While  CompoundExpression  Return  Which", 
            "title": "flowcontrol documentation"
        }, 
        {
            "location": "/builtin/flowcontrol/if/", 
            "text": "If\n\n\nIf[cond, iftrue, iffalse]\n returns \niftrue\n if \ncond\n is True, and \niffalse\n if \ncond\n is False.\n\n\nAttributes[If] := {HoldRest, Protected}\n\n\nSimple examples\n\n\nIn\n[\n1\n]\n:=\n \nx\n=\n9\n\n\nOut\n[\n1\n]\n=\n \n9\n\n\n\n\n\n\nIn\n[\n2\n]\n:=\n \nIf\n[\nx\n+\n3\n==\n12\n,\n \nx\n*\n2\n,\n \nx\n+\n3\n]\n\n\nOut\n[\n2\n]\n=\n \n18\n\n\n\n\n\n\nIn\n[\n3\n]\n:=\n \nIf\n[\nx\n+\n3\n==\n11\n,\n \nx\n*\n2\n,\n \nx\n+\n3\n]\n\n\nOut\n[\n3\n]\n=\n \n12\n\n\n\n\n\n\nFurther examples\n\n\nUndefined conditions leave the statement unevaluated.\n\n\nIn\n[\n1\n]\n:=\n \nIf\n[\nundefined\n,\n \na\n,\n \nb\n]\n\n\nOut\n[\n1\n]\n=\n \nIf\n[\nundefined\n,\n \na\n,\n \nb\n]", 
            "title": "If "
        }, 
        {
            "location": "/builtin/flowcontrol/if/#if", 
            "text": "If[cond, iftrue, iffalse]  returns  iftrue  if  cond  is True, and  iffalse  if  cond  is False.  Attributes[If] := {HoldRest, Protected}", 
            "title": "If"
        }, 
        {
            "location": "/builtin/flowcontrol/if/#simple-examples", 
            "text": "In [ 1 ] :=   x = 9  Out [ 1 ] =   9   In [ 2 ] :=   If [ x + 3 == 12 ,   x * 2 ,   x + 3 ]  Out [ 2 ] =   18   In [ 3 ] :=   If [ x + 3 == 11 ,   x * 2 ,   x + 3 ]  Out [ 3 ] =   12", 
            "title": "Simple examples"
        }, 
        {
            "location": "/builtin/flowcontrol/if/#further-examples", 
            "text": "Undefined conditions leave the statement unevaluated.  In [ 1 ] :=   If [ undefined ,   a ,   b ]  Out [ 1 ] =   If [ undefined ,   a ,   b ]", 
            "title": "Further examples"
        }, 
        {
            "location": "/builtin/flowcontrol/while/", 
            "text": "While\n\n\nWhile[cond, body]\n evaluates \ncond\n, and if it returns True, evaluates \nbody\n. This happens repeatedly.\n\n\nAttributes[While] := {HoldAll, Protected}\n\n\nSimple examples\n\n\nIn\n[\n1\n]\n:=\n \n(\na\n)\n \n=\n \n(\n1\n)\n\n\nOut\n[\n1\n]\n=\n \n1\n\n\n\n\n\n\nIn\n[\n2\n]\n:=\n \nWhile\n[(\na\n)\n \n!=\n \n(\n5\n),\n \n(\na\n)\n \n=\n \n((\na\n \n+\n \n1\n))]\n\n\nOut\n[\n2\n]\n=\n \nNull\n\n\n\n\n\n\nIn\n[\n3\n]\n:=\n \na\n\n\nOut\n[\n3\n]\n=\n \n5", 
            "title": "While "
        }, 
        {
            "location": "/builtin/flowcontrol/while/#while", 
            "text": "While[cond, body]  evaluates  cond , and if it returns True, evaluates  body . This happens repeatedly.  Attributes[While] := {HoldAll, Protected}", 
            "title": "While"
        }, 
        {
            "location": "/builtin/flowcontrol/while/#simple-examples", 
            "text": "In [ 1 ] :=   ( a )   =   ( 1 )  Out [ 1 ] =   1   In [ 2 ] :=   While [( a )   !=   ( 5 ),   ( a )   =   (( a   +   1 ))]  Out [ 2 ] =   Null   In [ 3 ] :=   a  Out [ 3 ] =   5", 
            "title": "Simple examples"
        }, 
        {
            "location": "/builtin/flowcontrol/compoundexpression/", 
            "text": "CompoundExpression\n\n\nCompoundExpression[e1, e2, ...]\n evaluates each expression in order and returns the result of the last one.\n\n\nAttributes[CompoundExpression] := {HoldAll, Protected, ReadProtected}\n\n\nSimple examples\n\n\nThe result of the first expression is not included in the output, but the result of the second is:\n\n\nIn\n[\n1\n]\n:=\n \nCompoundExpression\n[(\na\n)\n \n=\n \n(\n5\n),\n \n(\na\n \n+\n \n(\n2\n \n*\n \n-\n1\n))]\n\n\nOut\n[\n1\n]\n=\n \n3\n\n\n\n\n\n\nIncluding a trailing semicolon causes the expression to return \nNull\n:\n\n\nIn\n[\n2\n]\n:=\n \nCompoundExpression\n[(\na\n)\n \n=\n \n(\n5\n),\n \n(\na\n \n+\n \n(\n2\n \n*\n \n-\n1\n)),\n \nNull\n]\n\n\nOut\n[\n2\n]\n=\n \nNull", 
            "title": "CompoundExpression "
        }, 
        {
            "location": "/builtin/flowcontrol/compoundexpression/#compoundexpression", 
            "text": "CompoundExpression[e1, e2, ...]  evaluates each expression in order and returns the result of the last one.  Attributes[CompoundExpression] := {HoldAll, Protected, ReadProtected}", 
            "title": "CompoundExpression"
        }, 
        {
            "location": "/builtin/flowcontrol/compoundexpression/#simple-examples", 
            "text": "The result of the first expression is not included in the output, but the result of the second is:  In [ 1 ] :=   CompoundExpression [( a )   =   ( 5 ),   ( a   +   ( 2   *   - 1 ))]  Out [ 1 ] =   3   Including a trailing semicolon causes the expression to return  Null :  In [ 2 ] :=   CompoundExpression [( a )   =   ( 5 ),   ( a   +   ( 2   *   - 1 )),   Null ]  Out [ 2 ] =   Null", 
            "title": "Simple examples"
        }, 
        {
            "location": "/builtin/flowcontrol/return/", 
            "text": "Return\n\n\nReturn[x]\n returns \nx\n immediately.\n\n\nAttributes[Return] := {Protected}\n\n\nSimple examples\n\n\nIn\n[\n1\n]\n:=\n \nCompoundExpression\n[(\nmyreturnfunc\n)\n \n:=\n \n(\nCompoundExpression\n[\nReturn\n[\nx\n],\n \nhello\n]),\n \nmyreturnfunc\n]\n\n\nOut\n[\n1\n]\n=\n \nx\n\n\n\n\n\n\nIn\n[\n2\n]\n:=\n \nCompoundExpression\n[(\nret\n[\nx_\n])\n \n:=\n \n(\nCompoundExpression\n[\nReturn\n[\nx\n],\n \nhello\n]),\n \nret\n[\n3\n]]\n\n\nOut\n[\n2\n]\n=\n \n3\n\n\n\n\n\n\nIn\n[\n3\n]\n:=\n \nCompoundExpression\n[(\nmyfoo\n)\n \n:=\n \n(\nCompoundExpression\n[(\ni\n)\n \n=\n \n(\n1\n),\n \nWhile\n[(\ni\n)\n \n \n(\n5\n),\n \nCompoundExpression\n[\nIf\n[(\ni\n)\n \n===\n \n(\n3\n),\n \nReturn\n[\ni\n]],\n \n(\ni\n)\n \n=\n \n((\ni\n \n+\n \n1\n))]]]),\n \nmyfoo\n]\n\n\nOut\n[\n3\n]\n=\n \n3\n\n\n\n\n\n\nIn\n[\n4\n]\n:=\n \nReturn\n[\n3\n]\n\n\nOut\n[\n4\n]\n=\n \nReturn\n[\n3\n]\n\n\n\n\n\n\nIn\n[\n5\n]\n:=\n \nCompoundExpression\n[(\nretother\n)\n \n:=\n \n(\nCompoundExpression\n[\nReturn\n[],\n \nhello\n]),\n \nretother\n]\n\n\nOut\n[\n5\n]\n=\n \nNull", 
            "title": "Return "
        }, 
        {
            "location": "/builtin/flowcontrol/return/#return", 
            "text": "Return[x]  returns  x  immediately.  Attributes[Return] := {Protected}", 
            "title": "Return"
        }, 
        {
            "location": "/builtin/flowcontrol/return/#simple-examples", 
            "text": "In [ 1 ] :=   CompoundExpression [( myreturnfunc )   :=   ( CompoundExpression [ Return [ x ],   hello ]),   myreturnfunc ]  Out [ 1 ] =   x   In [ 2 ] :=   CompoundExpression [( ret [ x_ ])   :=   ( CompoundExpression [ Return [ x ],   hello ]),   ret [ 3 ]]  Out [ 2 ] =   3   In [ 3 ] :=   CompoundExpression [( myfoo )   :=   ( CompoundExpression [( i )   =   ( 1 ),   While [( i )     ( 5 ),   CompoundExpression [ If [( i )   ===   ( 3 ),   Return [ i ]],   ( i )   =   (( i   +   1 ))]]]),   myfoo ]  Out [ 3 ] =   3   In [ 4 ] :=   Return [ 3 ]  Out [ 4 ] =   Return [ 3 ]   In [ 5 ] :=   CompoundExpression [( retother )   :=   ( CompoundExpression [ Return [],   hello ]),   retother ]  Out [ 5 ] =   Null", 
            "title": "Simple examples"
        }, 
        {
            "location": "/builtin/flowcontrol/which/", 
            "text": "Which\n\n\nWhich[cond, res, cond, res, ...]\n tries each \ncond\n in sequence and returns the corresponding result if True.\n\n\nAttributes[Which] := {HoldAll, Protected}\n\n\nSimple examples\n\n\nIn\n[\n1\n]\n:=\n \nWhich\n[(\n1\n)\n \n \n(\n2\n),\n \na\n,\n \n(\n1\n)\n \n \n(\n2\n),\n \nb\n]\n\n\nOut\n[\n1\n]\n=\n \nb\n\n\n\n\n\n\nIn\n[\n2\n]\n:=\n \nWhich\n[(\n2\n)\n \n \n(\n2\n),\n \na\n,\n \n(\n2\n)\n \n \n(\n2\n),\n \nb\n]\n\n\nOut\n[\n2\n]\n=\n \nNull", 
            "title": "Which "
        }, 
        {
            "location": "/builtin/flowcontrol/which/#which", 
            "text": "Which[cond, res, cond, res, ...]  tries each  cond  in sequence and returns the corresponding result if True.  Attributes[Which] := {HoldAll, Protected}", 
            "title": "Which"
        }, 
        {
            "location": "/builtin/flowcontrol/which/#simple-examples", 
            "text": "In [ 1 ] :=   Which [( 1 )     ( 2 ),   a ,   ( 1 )     ( 2 ),   b ]  Out [ 1 ] =   b   In [ 2 ] :=   Which [( 2 )     ( 2 ),   a ,   ( 2 )     ( 2 ),   b ]  Out [ 2 ] =   Null", 
            "title": "Simple examples"
        }, 
        {
            "location": "/builtin/list/", 
            "text": "list documentation\n\n\nList\n\n\nTotal\n\n\nMean\n\n\nTable\n\n\nMemberQ\n\n\nCases\n\n\nDeleteCases\n\n\nUnion\n\n\nPadRight\n\n\nPadLeft\n\n\nRange\n\n\nPart\n\n\nAll\n\n\nThread\n\n\nAppend\n\n\nAppendTo\n\n\nPrepend\n\n\nPrependTo\n\n\nDeleteDuplicates\n\n\nLast\n\n\nSelect", 
            "title": "list"
        }, 
        {
            "location": "/builtin/list/#list-documentation", 
            "text": "List  Total  Mean  Table  MemberQ  Cases  DeleteCases  Union  PadRight  PadLeft  Range  Part  All  Thread  Append  AppendTo  Prepend  PrependTo  DeleteDuplicates  Last  Select", 
            "title": "list documentation"
        }, 
        {
            "location": "/builtin/list/list/", 
            "text": "List\n\n\n{e1, e2, ...}\n groups expressions together.\n\n\nAttributes[List] := {Locked, Protected}\n\n\nSimple examples\n\n\nIn\n[\n1\n]\n:=\n \n{\n1\n,\n \n2\n,\n \na\n}\n\n\nOut\n[\n1\n]\n=\n \n{\n1\n,\n \n2\n,\n \na\n}", 
            "title": "List "
        }, 
        {
            "location": "/builtin/list/list/#list", 
            "text": "{e1, e2, ...}  groups expressions together.  Attributes[List] := {Locked, Protected}", 
            "title": "List"
        }, 
        {
            "location": "/builtin/list/list/#simple-examples", 
            "text": "In [ 1 ] :=   { 1 ,   2 ,   a }  Out [ 1 ] =   { 1 ,   2 ,   a }", 
            "title": "Simple examples"
        }, 
        {
            "location": "/builtin/list/total/", 
            "text": "Total\n\n\nTotal[list]\n sums all the values in \nlist\n.\n\n\nAttributes[Total] := {Protected}\n\n\nSimple examples\n\n\nIn\n[\n1\n]\n:=\n \nTotal\n[{\n1\n,\n \n2\n,\n \n3\n,\n \n4\n}]\n\n\nOut\n[\n1\n]\n=\n \n10\n\n\n\n\n\n\nFurther examples\n\n\nThe total of an empty list is zero:\n\n\nIn\n[\n1\n]\n:=\n \nTotal\n[{}]\n\n\nOut\n[\n1\n]\n=\n \n0", 
            "title": "Total "
        }, 
        {
            "location": "/builtin/list/total/#total", 
            "text": "Total[list]  sums all the values in  list .  Attributes[Total] := {Protected}", 
            "title": "Total"
        }, 
        {
            "location": "/builtin/list/total/#simple-examples", 
            "text": "In [ 1 ] :=   Total [{ 1 ,   2 ,   3 ,   4 }]  Out [ 1 ] =   10", 
            "title": "Simple examples"
        }, 
        {
            "location": "/builtin/list/total/#further-examples", 
            "text": "The total of an empty list is zero:  In [ 1 ] :=   Total [{}]  Out [ 1 ] =   0", 
            "title": "Further examples"
        }, 
        {
            "location": "/builtin/list/mean/", 
            "text": "Mean\n\n\nMean[list]\n calculates the statistical mean of \nlist\n.\n\n\nAttributes[Mean] := {Protected}\n\n\nSimple examples\n\n\nIn\n[\n1\n]\n:=\n \nMean\n[{\n5\n,\n \n6\n}]\n\n\nOut\n[\n1\n]\n=\n \n(\n11\n \n*\n \n2\n^-\n1\n)", 
            "title": "Mean "
        }, 
        {
            "location": "/builtin/list/mean/#mean", 
            "text": "Mean[list]  calculates the statistical mean of  list .  Attributes[Mean] := {Protected}", 
            "title": "Mean"
        }, 
        {
            "location": "/builtin/list/mean/#simple-examples", 
            "text": "In [ 1 ] :=   Mean [{ 5 ,   6 }]  Out [ 1 ] =   ( 11   *   2 ^- 1 )", 
            "title": "Simple examples"
        }, 
        {
            "location": "/builtin/list/table/", 
            "text": "Table\n\n\nTable[expr, n]\n returns a list with \nn\n copies of \nexpr\n.\n\n\nTable[expr, {sym, n}]\n returns a list with \nexpr\n evaluated with \nsym\n = 1 to \nn\n.\n\n\nTable[expr, {sym, m, n}]\n returns a list with \nexpr\n evaluated with \nsym\n = \nm\n to \nn\n.\n\n\nAttributes[Table] := {HoldAll, Protected}\n\n\nSimple examples\n\n\nIn\n[\n1\n]\n:=\n \nTable\n[\na\n,\n \n5\n]\n\n\nOut\n[\n1\n]\n=\n \n{\na\n,\n \na\n,\n \na\n,\n \na\n,\n \na\n}\n\n\n\n\n\n\nIn\n[\n2\n]\n:=\n \nTable\n[\ni\n,\n \n{\ni\n,\n \n5\n,\n \n10\n}]\n\n\nOut\n[\n2\n]\n=\n \n{\n5\n,\n \n6\n,\n \n7\n,\n \n8\n,\n \n9\n,\n \n10\n}\n\n\n\n\n\n\nCreate a list of the first 10 squares:\n\n\nIn\n[\n3\n]\n:=\n \nTable\n[\nn\n^\n2\n,\n \n{\nn\n,\n \n1\n,\n \n10\n}]\n\n\nOut\n[\n3\n]\n=\n \n{\n1\n,\n \n4\n,\n \n9\n,\n \n16\n,\n \n25\n,\n \n36\n,\n \n49\n,\n \n64\n,\n \n81\n,\n \n100\n}\n\n\n\n\n\n\nIteration definitions do not have side effects:\n\n\nIn\n[\n4\n]\n:=\n \ni\n\n\nOut\n[\n4\n]\n=\n \ni\n\n\n\n\n\n\nIn\n[\n5\n]\n:=\n \n(\nlistTableTestState`i\n)\n \n=\n \n(\n22\n)\n\n\nOut\n[\n5\n]\n=\n \n22\n\n\n\n\n\n\nIn\n[\n6\n]\n:=\n \nTable\n[\ni\n,\n \n{\ni\n,\n \n5\n,\n \n10\n}]\n\n\nOut\n[\n6\n]\n=\n \n{\n5\n,\n \n6\n,\n \n7\n,\n \n8\n,\n \n9\n,\n \n10\n}\n\n\n\n\n\n\nIn\n[\n7\n]\n:=\n \ni\n\n\nOut\n[\n7\n]\n=\n \n22\n\n\n\n\n\n\nFurther examples\n\n\nIn\n[\n1\n]\n:=\n \nTable\n[\nx\n[\n99\n],\n \n{\nx\n[\n_\n],\n \n0\n,\n \n2\n}]\n\n\nOut\n[\n1\n]\n=\n \n{\n0\n,\n \n1\n,\n \n2\n}", 
            "title": "Table "
        }, 
        {
            "location": "/builtin/list/table/#table", 
            "text": "Table[expr, n]  returns a list with  n  copies of  expr .  Table[expr, {sym, n}]  returns a list with  expr  evaluated with  sym  = 1 to  n .  Table[expr, {sym, m, n}]  returns a list with  expr  evaluated with  sym  =  m  to  n .  Attributes[Table] := {HoldAll, Protected}", 
            "title": "Table"
        }, 
        {
            "location": "/builtin/list/table/#simple-examples", 
            "text": "In [ 1 ] :=   Table [ a ,   5 ]  Out [ 1 ] =   { a ,   a ,   a ,   a ,   a }   In [ 2 ] :=   Table [ i ,   { i ,   5 ,   10 }]  Out [ 2 ] =   { 5 ,   6 ,   7 ,   8 ,   9 ,   10 }   Create a list of the first 10 squares:  In [ 3 ] :=   Table [ n ^ 2 ,   { n ,   1 ,   10 }]  Out [ 3 ] =   { 1 ,   4 ,   9 ,   16 ,   25 ,   36 ,   49 ,   64 ,   81 ,   100 }   Iteration definitions do not have side effects:  In [ 4 ] :=   i  Out [ 4 ] =   i   In [ 5 ] :=   ( listTableTestState`i )   =   ( 22 )  Out [ 5 ] =   22   In [ 6 ] :=   Table [ i ,   { i ,   5 ,   10 }]  Out [ 6 ] =   { 5 ,   6 ,   7 ,   8 ,   9 ,   10 }   In [ 7 ] :=   i  Out [ 7 ] =   22", 
            "title": "Simple examples"
        }, 
        {
            "location": "/builtin/list/table/#further-examples", 
            "text": "In [ 1 ] :=   Table [ x [ 99 ],   { x [ _ ],   0 ,   2 }]  Out [ 1 ] =   { 0 ,   1 ,   2 }", 
            "title": "Further examples"
        }, 
        {
            "location": "/builtin/list/memberq/", 
            "text": "MemberQ\n\n\nMemberQ[expr, pat]\n returns True if any of the elements in \nexpr\n match \npat\n, otherwise returns False.\n\n\nAttributes[MemberQ] := {Protected}\n\n\nSimple examples\n\n\nIn\n[\n1\n]\n:=\n \nMemberQ\n[{\n1\n,\n \n2\n,\n \n3\n},\n \n0\n]\n\n\nOut\n[\n1\n]\n=\n \nFalse\n\n\n\n\n\n\nIn\n[\n2\n]\n:=\n \nMemberQ\n[{\n1\n,\n \n2\n,\n \n3\n},\n \n1\n]\n\n\nOut\n[\n2\n]\n=\n \nTrue\n\n\n\n\n\n\nIn\n[\n3\n]\n:=\n \nMemberQ\n[{\n1\n,\n \n2\n,\n \n3\n},\n \n{\n1\n}]\n\n\nOut\n[\n3\n]\n=\n \nFalse\n\n\n\n\n\n\nMemberQ\n works with patterns:\n\n\nIn\n[\n4\n]\n:=\n \nMemberQ\n[{\n1\n,\n \n2\n,\n \n3\n},\n \n_Integer\n]\n\n\nOut\n[\n4\n]\n=\n \nTrue\n\n\n\n\n\n\nIn\n[\n5\n]\n:=\n \nMemberQ\n[{\n1\n,\n \n2\n,\n \n3\n},\n \n_\n]\n\n\nOut\n[\n5\n]\n=\n \nTrue\n\n\n\n\n\n\nIn\n[\n6\n]\n:=\n \nMemberQ\n[{\n1\n,\n \n2\n,\n \n3\n},\n \n_Real\n]\n\n\nOut\n[\n6\n]\n=\n \nFalse\n\n\n\n\n\n\nIn\n[\n7\n]\n:=\n \nMemberQ\n[{\n1\n,\n \n2\n,\n \n3\n},\n \ntestmatch_Integer\n]\n\n\nOut\n[\n7\n]\n=\n \nTrue\n\n\n\n\n\n\nIn\n[\n8\n]\n:=\n \ntestmatch\n\n\nOut\n[\n8\n]\n=\n \ntestmatch\n\n\n\n\n\n\nIn\n[\n9\n]\n:=\n \nMemberQ\n[\na\n,\n \na\n]\n\n\nOut\n[\n9\n]\n=\n \nFalse\n\n\n\n\n\n\nIn\n[\n10\n]\n:=\n \nMemberQ\n[\na\n,\n \n_\n]\n\n\nOut\n[\n10\n]\n=\n \nFalse\n\n\n\n\n\n\nIn\n[\n11\n]\n:=\n \nMemberQ\n[{\na\n,\n \nb\n},\n \nc\n]\n\n\nOut\n[\n11\n]\n=\n \nFalse\n\n\n\n\n\n\nIn\n[\n12\n]\n:=\n \nMemberQ\n[{\na\n,\n \nb\n},\n \na\n]\n\n\nOut\n[\n12\n]\n=\n \nTrue\n\n\n\n\n\n\nFurther examples\n\n\nMemberQ\n works with BlankSequences:\n\n\nIn\n[\n1\n]\n:=\n \nMemberQ\n[{\na\n,\n \nb\n},\n \n___\n]\n\n\nOut\n[\n1\n]\n=\n \nTrue\n\n\n\n\n\n\nIn\n[\n2\n]\n:=\n \nMemberQ\n[{\na\n,\n \nb\n},\n \n__\n]\n\n\nOut\n[\n2\n]\n=\n \nTrue\n\n\n\n\n\n\nIn\n[\n3\n]\n:=\n \nMemberQ\n[{\na\n,\n \nb\n},\n \n__Integer\n]\n\n\nOut\n[\n3\n]\n=\n \nFalse\n\n\n\n\n\n\nIn\n[\n4\n]\n:=\n \nMemberQ\n[{\na\n,\n \nb\n},\n \n___Integer\n]\n\n\nOut\n[\n4\n]\n=\n \nFalse\n\n\n\n\n\n\nIn\n[\n5\n]\n:=\n \nMemberQ\n[{\na\n,\n \nb\n},\n \n___Symbol\n]\n\n\nOut\n[\n5\n]\n=\n \nTrue\n\n\n\n\n\n\nIn\n[\n6\n]\n:=\n \nMemberQ\n[{\na\n,\n \nb\n},\n \n__Symbol\n]\n\n\nOut\n[\n6\n]\n=\n \nTrue\n\n\n\n\n\n\nIn\n[\n7\n]\n:=\n \nMemberQ\n[{\na\n,\n \nb\n,\n \n1\n},\n \n__Symbol\n]\n\n\nOut\n[\n7\n]\n=\n \nTrue\n\n\n\n\n\n\nIn\n[\n8\n]\n:=\n \nMemberQ\n[{\na\n,\n \nb\n,\n \n1\n},\n \n__Integer\n]\n\n\nOut\n[\n8\n]\n=\n \nTrue\n\n\n\n\n\n\nexpr\n need not be a List:\n\n\nIn\n[\n9\n]\n:=\n \nMemberQ\n[\nbar\n[\na\n,\n \nb\n,\n \nc\n],\n \na\n]\n\n\nOut\n[\n9\n]\n=\n \nTrue\n\n\n\n\n\n\nIn\n[\n10\n]\n:=\n \nMemberQ\n[\nbar\n[\na\n,\n \nb\n,\n \nc\n],\n \nbar\n]\n\n\nOut\n[\n10\n]\n=\n \nFalse", 
            "title": "MemberQ "
        }, 
        {
            "location": "/builtin/list/memberq/#memberq", 
            "text": "MemberQ[expr, pat]  returns True if any of the elements in  expr  match  pat , otherwise returns False.  Attributes[MemberQ] := {Protected}", 
            "title": "MemberQ"
        }, 
        {
            "location": "/builtin/list/memberq/#simple-examples", 
            "text": "In [ 1 ] :=   MemberQ [{ 1 ,   2 ,   3 },   0 ]  Out [ 1 ] =   False   In [ 2 ] :=   MemberQ [{ 1 ,   2 ,   3 },   1 ]  Out [ 2 ] =   True   In [ 3 ] :=   MemberQ [{ 1 ,   2 ,   3 },   { 1 }]  Out [ 3 ] =   False   MemberQ  works with patterns:  In [ 4 ] :=   MemberQ [{ 1 ,   2 ,   3 },   _Integer ]  Out [ 4 ] =   True   In [ 5 ] :=   MemberQ [{ 1 ,   2 ,   3 },   _ ]  Out [ 5 ] =   True   In [ 6 ] :=   MemberQ [{ 1 ,   2 ,   3 },   _Real ]  Out [ 6 ] =   False   In [ 7 ] :=   MemberQ [{ 1 ,   2 ,   3 },   testmatch_Integer ]  Out [ 7 ] =   True   In [ 8 ] :=   testmatch  Out [ 8 ] =   testmatch   In [ 9 ] :=   MemberQ [ a ,   a ]  Out [ 9 ] =   False   In [ 10 ] :=   MemberQ [ a ,   _ ]  Out [ 10 ] =   False   In [ 11 ] :=   MemberQ [{ a ,   b },   c ]  Out [ 11 ] =   False   In [ 12 ] :=   MemberQ [{ a ,   b },   a ]  Out [ 12 ] =   True", 
            "title": "Simple examples"
        }, 
        {
            "location": "/builtin/list/memberq/#further-examples", 
            "text": "MemberQ  works with BlankSequences:  In [ 1 ] :=   MemberQ [{ a ,   b },   ___ ]  Out [ 1 ] =   True   In [ 2 ] :=   MemberQ [{ a ,   b },   __ ]  Out [ 2 ] =   True   In [ 3 ] :=   MemberQ [{ a ,   b },   __Integer ]  Out [ 3 ] =   False   In [ 4 ] :=   MemberQ [{ a ,   b },   ___Integer ]  Out [ 4 ] =   False   In [ 5 ] :=   MemberQ [{ a ,   b },   ___Symbol ]  Out [ 5 ] =   True   In [ 6 ] :=   MemberQ [{ a ,   b },   __Symbol ]  Out [ 6 ] =   True   In [ 7 ] :=   MemberQ [{ a ,   b ,   1 },   __Symbol ]  Out [ 7 ] =   True   In [ 8 ] :=   MemberQ [{ a ,   b ,   1 },   __Integer ]  Out [ 8 ] =   True   expr  need not be a List:  In [ 9 ] :=   MemberQ [ bar [ a ,   b ,   c ],   a ]  Out [ 9 ] =   True   In [ 10 ] :=   MemberQ [ bar [ a ,   b ,   c ],   bar ]  Out [ 10 ] =   False", 
            "title": "Further examples"
        }, 
        {
            "location": "/builtin/list/cases/", 
            "text": "Cases\n\n\nCases[expr, pat]\n returns a new \nList\n of all elements in \nexpr\n that match \npat\n.\n\n\nAttributes[Cases] := {Protected}\n\n\nSimple examples\n\n\nIn\n[\n1\n]\n:=\n \nCases\n[{\n5\n,\n \n2\n,\n \n3.5\n,\n \nx\n,\n \ny\n,\n \n4\n},\n \n_\n]\n\n\nOut\n[\n1\n]\n=\n \n{\n5\n,\n \n2\n,\n \n3.5\n,\n \nx\n,\n \ny\n,\n \n4\n}\n\n\n\n\n\n\nIn\n[\n2\n]\n:=\n \nCases\n[{\n5\n,\n \n2\n,\n \n3.5\n,\n \nx\n,\n \ny\n,\n \n4\n},\n \n_Integer\n]\n\n\nOut\n[\n2\n]\n=\n \n{\n5\n,\n \n2\n,\n \n4\n}\n\n\n\n\n\n\nIn\n[\n3\n]\n:=\n \nCases\n[{\n5\n,\n \n2\n,\n \n3.5\n,\n \nx\n,\n \ny\n,\n \n4\n},\n \n_Real\n]\n\n\nOut\n[\n3\n]\n=\n \n{\n3.5\n}\n\n\n\n\n\n\nIn\n[\n4\n]\n:=\n \nCases\n[{\nb\n^\n2\n,\n \n1\n,\n \na\n^\nc\n},\n \n(\n_^\ne_\n)\n \n-\n \n(\ne\n)]\n\n\nOut\n[\n4\n]\n=\n \n{\n2\n,\n \nc\n}\n\n\n\n\n\n\nFurther examples\n\n\nexpr\n need not be a list:\n\n\nIn\n[\n1\n]\n:=\n \nCases\n[\nbar\n[\na\n,\n \nb\n,\n \nc\n],\n \na\n]\n\n\nOut\n[\n1\n]\n=\n \n{\na\n}", 
            "title": "Cases "
        }, 
        {
            "location": "/builtin/list/cases/#cases", 
            "text": "Cases[expr, pat]  returns a new  List  of all elements in  expr  that match  pat .  Attributes[Cases] := {Protected}", 
            "title": "Cases"
        }, 
        {
            "location": "/builtin/list/cases/#simple-examples", 
            "text": "In [ 1 ] :=   Cases [{ 5 ,   2 ,   3.5 ,   x ,   y ,   4 },   _ ]  Out [ 1 ] =   { 5 ,   2 ,   3.5 ,   x ,   y ,   4 }   In [ 2 ] :=   Cases [{ 5 ,   2 ,   3.5 ,   x ,   y ,   4 },   _Integer ]  Out [ 2 ] =   { 5 ,   2 ,   4 }   In [ 3 ] :=   Cases [{ 5 ,   2 ,   3.5 ,   x ,   y ,   4 },   _Real ]  Out [ 3 ] =   { 3.5 }   In [ 4 ] :=   Cases [{ b ^ 2 ,   1 ,   a ^ c },   ( _^ e_ )   -   ( e )]  Out [ 4 ] =   { 2 ,   c }", 
            "title": "Simple examples"
        }, 
        {
            "location": "/builtin/list/cases/#further-examples", 
            "text": "expr  need not be a list:  In [ 1 ] :=   Cases [ bar [ a ,   b ,   c ],   a ]  Out [ 1 ] =   { a }", 
            "title": "Further examples"
        }, 
        {
            "location": "/builtin/list/deletecases/", 
            "text": "DeleteCases\n\n\nDeleteCases[expr, pat]\n returns a new expression of all elements in \nexpr\n that do not match \npat\n.\n\n\nAttributes[DeleteCases] := {Protected}\n\n\nSimple examples\n\n\nIn\n[\n1\n]\n:=\n \nDeleteCases\n[{\n5\n,\n \n2\n,\n \n3.5\n,\n \nx\n,\n \ny\n,\n \n4\n},\n \n_Integer\n]\n\n\nOut\n[\n1\n]\n=\n \n{\n3.5\n,\n \nx\n,\n \ny\n}\n\n\n\n\n\n\nIn\n[\n2\n]\n:=\n \nDeleteCases\n[{\n5\n,\n \n2\n,\n \n3.5\n,\n \nx\n,\n \ny\n,\n \n4\n},\n \n_Real\n]\n\n\nOut\n[\n2\n]\n=\n \n{\n5\n,\n \n2\n,\n \nx\n,\n \ny\n,\n \n4\n}\n\n\n\n\n\n\nIn\n[\n3\n]\n:=\n \nDeleteCases\n[(\n3.5\n \n+\n \nx\n \n+\n \ny\n),\n \n_Real\n]\n\n\nOut\n[\n3\n]\n=\n \n(\nx\n \n+\n \ny\n)", 
            "title": "DeleteCases "
        }, 
        {
            "location": "/builtin/list/deletecases/#deletecases", 
            "text": "DeleteCases[expr, pat]  returns a new expression of all elements in  expr  that do not match  pat .  Attributes[DeleteCases] := {Protected}", 
            "title": "DeleteCases"
        }, 
        {
            "location": "/builtin/list/deletecases/#simple-examples", 
            "text": "In [ 1 ] :=   DeleteCases [{ 5 ,   2 ,   3.5 ,   x ,   y ,   4 },   _Integer ]  Out [ 1 ] =   { 3.5 ,   x ,   y }   In [ 2 ] :=   DeleteCases [{ 5 ,   2 ,   3.5 ,   x ,   y ,   4 },   _Real ]  Out [ 2 ] =   { 5 ,   2 ,   x ,   y ,   4 }   In [ 3 ] :=   DeleteCases [( 3.5   +   x   +   y ),   _Real ]  Out [ 3 ] =   ( x   +   y )", 
            "title": "Simple examples"
        }, 
        {
            "location": "/builtin/list/union/", 
            "text": "Union\n\n\nUnion[expr1, expr2, ...]\n returns a sorted union of the items in the expressions.\n\n\nAttributes[Union] := {Protected}\n\n\nSimple examples\n\n\nIn\n[\n1\n]\n:=\n \nUnion\n[{\nb\n,\n \na\n,\n \na\n,\n \nb\n,\n \na\n}]\n\n\nOut\n[\n1\n]\n=\n \n{\na\n,\n \nb\n}\n\n\n\n\n\n\nIn\n[\n2\n]\n:=\n \nUnion\n[{\nb\n,\n \na\n,\n \na\n,\n \nb\n,\n \na\n},\n \n{\ny\n,\n \nz\n}]\n\n\nOut\n[\n2\n]\n=\n \n{\na\n,\n \nb\n,\n \ny\n,\n \nz\n}\n\n\n\n\n\n\nIn\n[\n3\n]\n:=\n \nUnion\n[\nfoo\n[\nb\n,\n \na\n,\n \na\n,\n \nb\n,\n \na\n],\n \nfoo\n[\ny\n,\n \nz\n]]\n\n\nOut\n[\n3\n]\n=\n \nfoo\n[\na\n,\n \nb\n,\n \ny\n,\n \nz\n]", 
            "title": "Union "
        }, 
        {
            "location": "/builtin/list/union/#union", 
            "text": "Union[expr1, expr2, ...]  returns a sorted union of the items in the expressions.  Attributes[Union] := {Protected}", 
            "title": "Union"
        }, 
        {
            "location": "/builtin/list/union/#simple-examples", 
            "text": "In [ 1 ] :=   Union [{ b ,   a ,   a ,   b ,   a }]  Out [ 1 ] =   { a ,   b }   In [ 2 ] :=   Union [{ b ,   a ,   a ,   b ,   a },   { y ,   z }]  Out [ 2 ] =   { a ,   b ,   y ,   z }   In [ 3 ] :=   Union [ foo [ b ,   a ,   a ,   b ,   a ],   foo [ y ,   z ]]  Out [ 3 ] =   foo [ a ,   b ,   y ,   z ]", 
            "title": "Simple examples"
        }, 
        {
            "location": "/builtin/list/padright/", 
            "text": "PadRight\n\n\nAttributes[PadRight] := {Protected}", 
            "title": "PadRight "
        }, 
        {
            "location": "/builtin/list/padright/#padright", 
            "text": "Attributes[PadRight] := {Protected}", 
            "title": "PadRight"
        }, 
        {
            "location": "/builtin/list/padleft/", 
            "text": "PadLeft\n\n\nAttributes[PadLeft] := {Protected}", 
            "title": "PadLeft "
        }, 
        {
            "location": "/builtin/list/padleft/#padleft", 
            "text": "Attributes[PadLeft] := {Protected}", 
            "title": "PadLeft"
        }, 
        {
            "location": "/builtin/list/range/", 
            "text": "Range\n\n\nRange[n]\n returns a \nList\n of integers from 1 to \nn\n.\n\n\nRange[m, n]\n returns a \nList\n of integers from \nm\n to \nn\n.\n\n\nAttributes[Range] := {Listable, Protected}\n\n\nSimple examples\n\n\nIn\n[\n1\n]\n:=\n \nRange\n[\n3\n]\n\n\nOut\n[\n1\n]\n=\n \n{\n1\n,\n \n2\n,\n \n3\n}\n\n\n\n\n\n\nIn\n[\n2\n]\n:=\n \nRange\n[\n2\n,\n \n5\n]\n\n\nOut\n[\n2\n]\n=\n \n{\n2\n,\n \n3\n,\n \n4\n,\n \n5\n}\n\n\n\n\n\n\nIn\n[\n3\n]\n:=\n \nRange\n[\n2\n,\n \n-\n5\n]\n\n\nOut\n[\n3\n]\n=\n \n{}", 
            "title": "Range "
        }, 
        {
            "location": "/builtin/list/range/#range", 
            "text": "Range[n]  returns a  List  of integers from 1 to  n .  Range[m, n]  returns a  List  of integers from  m  to  n .  Attributes[Range] := {Listable, Protected}", 
            "title": "Range"
        }, 
        {
            "location": "/builtin/list/range/#simple-examples", 
            "text": "In [ 1 ] :=   Range [ 3 ]  Out [ 1 ] =   { 1 ,   2 ,   3 }   In [ 2 ] :=   Range [ 2 ,   5 ]  Out [ 2 ] =   { 2 ,   3 ,   4 ,   5 }   In [ 3 ] :=   Range [ 2 ,   - 5 ]  Out [ 3 ] =   {}", 
            "title": "Simple examples"
        }, 
        {
            "location": "/builtin/list/part/", 
            "text": "Part\n\n\nexpr[[i]]\n or \nPart[expr, i]\n returns the \ni\nth element of \nexpr\n.\n\n\nAttributes[Part] := {NHoldRest, Protected, ReadProtected}\n\n\nSimple examples\n\n\nReturn the second item in a list:\n\n\nIn\n[\n1\n]\n:=\n \nPart\n[{\na\n,\n \nb\n,\n \nc\n,\n \nd\n},\n \n2\n]\n\n\nOut\n[\n1\n]\n=\n \nb\n\n\n\n\n\n\nMulti-dimensional indices are supported:\n\n\nIn\n[\n2\n]\n:=\n \n(\nmat\n)\n \n=\n \n(\nTable\n[\nTable\n[(\na\n \n*\n \nb\n^\n2\n),\n \n{\nb\n,\n \n5\n}],\n \n{\na\n,\n \n5\n}])\n\n\nOut\n[\n2\n]\n=\n \n{{\n1\n,\n \n4\n,\n \n9\n,\n \n16\n,\n \n25\n},\n \n{\n2\n,\n \n8\n,\n \n18\n,\n \n32\n,\n \n50\n},\n \n{\n3\n,\n \n12\n,\n \n27\n,\n \n48\n,\n \n75\n},\n \n{\n4\n,\n \n16\n,\n \n36\n,\n \n64\n,\n \n100\n},\n \n{\n5\n,\n \n20\n,\n \n45\n,\n \n80\n,\n \n125\n}}\n\n\n\n\n\n\nIn\n[\n3\n]\n:=\n \nPart\n[\nmat\n,\n \n5\n,\n \n2\n]\n\n\nOut\n[\n3\n]\n=\n \n20\n\n\n\n\n\n\nUse \nAll\n to select along the entire dimension:\n\n\nIn\n[\n4\n]\n:=\n \nPart\n[\nmat\n,\n \n5\n,\n \nAll\n]\n\n\nOut\n[\n4\n]\n=\n \n{\n5\n,\n \n20\n,\n \n45\n,\n \n80\n,\n \n125\n}\n\n\n\n\n\n\nFurther examples\n\n\nOut of bounds issues will prevent the expression from evaluating:\n\n\nIn\n[\n1\n]\n:=\n \nPart\n[{\na\n},\n \n2\n]\n\n\nOut\n[\n1\n]\n=\n \nPart\n[{\na\n},\n \n2\n]\n\n\n\n\n\n\nThe input need not be a \nList\n:\n\n\nIn\n[\n2\n]\n:=\n \nPart\n[\nfoo\n[\na\n],\n \n0\n]\n\n\nOut\n[\n2\n]\n=\n \nfoo\n\n\n\n\n\n\nOmitting an index will return the original expression:\n\n\nIn\n[\n3\n]\n:=\n \nPart\n[\ni\n]\n\n\nOut\n[\n3\n]\n=\n \ni", 
            "title": "Part "
        }, 
        {
            "location": "/builtin/list/part/#part", 
            "text": "expr[[i]]  or  Part[expr, i]  returns the  i th element of  expr .  Attributes[Part] := {NHoldRest, Protected, ReadProtected}", 
            "title": "Part"
        }, 
        {
            "location": "/builtin/list/part/#simple-examples", 
            "text": "Return the second item in a list:  In [ 1 ] :=   Part [{ a ,   b ,   c ,   d },   2 ]  Out [ 1 ] =   b   Multi-dimensional indices are supported:  In [ 2 ] :=   ( mat )   =   ( Table [ Table [( a   *   b ^ 2 ),   { b ,   5 }],   { a ,   5 }])  Out [ 2 ] =   {{ 1 ,   4 ,   9 ,   16 ,   25 },   { 2 ,   8 ,   18 ,   32 ,   50 },   { 3 ,   12 ,   27 ,   48 ,   75 },   { 4 ,   16 ,   36 ,   64 ,   100 },   { 5 ,   20 ,   45 ,   80 ,   125 }}   In [ 3 ] :=   Part [ mat ,   5 ,   2 ]  Out [ 3 ] =   20   Use  All  to select along the entire dimension:  In [ 4 ] :=   Part [ mat ,   5 ,   All ]  Out [ 4 ] =   { 5 ,   20 ,   45 ,   80 ,   125 }", 
            "title": "Simple examples"
        }, 
        {
            "location": "/builtin/list/part/#further-examples", 
            "text": "Out of bounds issues will prevent the expression from evaluating:  In [ 1 ] :=   Part [{ a },   2 ]  Out [ 1 ] =   Part [{ a },   2 ]   The input need not be a  List :  In [ 2 ] :=   Part [ foo [ a ],   0 ]  Out [ 2 ] =   foo   Omitting an index will return the original expression:  In [ 3 ] :=   Part [ i ]  Out [ 3 ] =   i", 
            "title": "Further examples"
        }, 
        {
            "location": "/builtin/list/all/", 
            "text": "All\n\n\nAll\n allows selection along a dimension in \nPart\n.\n\n\nAttributes[All] := {Protected}\n\n\nSimple examples\n\n\nIn\n[\n1\n]\n:=\n \n(\nmat\n)\n \n=\n \n(\nTable\n[\nTable\n[(\na\n \n*\n \nb\n^\n2\n),\n \n{\nb\n,\n \n5\n}],\n \n{\na\n,\n \n5\n}])\n\n\nOut\n[\n1\n]\n=\n \n{{\n1\n,\n \n4\n,\n \n9\n,\n \n16\n,\n \n25\n},\n \n{\n2\n,\n \n8\n,\n \n18\n,\n \n32\n,\n \n50\n},\n \n{\n3\n,\n \n12\n,\n \n27\n,\n \n48\n,\n \n75\n},\n \n{\n4\n,\n \n16\n,\n \n36\n,\n \n64\n,\n \n100\n},\n \n{\n5\n,\n \n20\n,\n \n45\n,\n \n80\n,\n \n125\n}}\n\n\n\n\n\n\nUse \nAll\n to select along the entire dimension:\n\n\nIn\n[\n2\n]\n:=\n \nPart\n[\nmat\n,\n \n5\n,\n \nAll\n]\n\n\nOut\n[\n2\n]\n=\n \n{\n5\n,\n \n20\n,\n \n45\n,\n \n80\n,\n \n125\n}", 
            "title": "All "
        }, 
        {
            "location": "/builtin/list/all/#all", 
            "text": "All  allows selection along a dimension in  Part .  Attributes[All] := {Protected}", 
            "title": "All"
        }, 
        {
            "location": "/builtin/list/all/#simple-examples", 
            "text": "In [ 1 ] :=   ( mat )   =   ( Table [ Table [( a   *   b ^ 2 ),   { b ,   5 }],   { a ,   5 }])  Out [ 1 ] =   {{ 1 ,   4 ,   9 ,   16 ,   25 },   { 2 ,   8 ,   18 ,   32 ,   50 },   { 3 ,   12 ,   27 ,   48 ,   75 },   { 4 ,   16 ,   36 ,   64 ,   100 },   { 5 ,   20 ,   45 ,   80 ,   125 }}   Use  All  to select along the entire dimension:  In [ 2 ] :=   Part [ mat ,   5 ,   All ]  Out [ 2 ] =   { 5 ,   20 ,   45 ,   80 ,   125 }", 
            "title": "Simple examples"
        }, 
        {
            "location": "/builtin/list/thread/", 
            "text": "Thread\n\n\nThread[f[a1, a2, ...}]]\n applies f over the arguments, expanding out any lists.\n\n\nAttributes[Thread] := {Protected}", 
            "title": "Thread "
        }, 
        {
            "location": "/builtin/list/thread/#thread", 
            "text": "Thread[f[a1, a2, ...}]]  applies f over the arguments, expanding out any lists.  Attributes[Thread] := {Protected}", 
            "title": "Thread"
        }, 
        {
            "location": "/builtin/list/append/", 
            "text": "Append\n\n\nAppend[list, e]\n returns \nlist\n with \ne\n appended.\n\n\nAttributes[Append] := {Protected}\n\n\nSimple examples\n\n\nIn\n[\n1\n]\n:=\n \nAppend\n[{\na\n,\n \nb\n},\n \nc\n]\n\n\nOut\n[\n1\n]\n=\n \n{\na\n,\n \nb\n,\n \nc\n}\n\n\n\n\n\n\nIn\n[\n2\n]\n:=\n \nAppend\n[\nfoo\n[\na\n,\n \nb\n],\n \nc\n]\n\n\nOut\n[\n2\n]\n=\n \nfoo\n[\na\n,\n \nb\n,\n \nc\n]", 
            "title": "Append "
        }, 
        {
            "location": "/builtin/list/append/#append", 
            "text": "Append[list, e]  returns  list  with  e  appended.  Attributes[Append] := {Protected}", 
            "title": "Append"
        }, 
        {
            "location": "/builtin/list/append/#simple-examples", 
            "text": "In [ 1 ] :=   Append [{ a ,   b },   c ]  Out [ 1 ] =   { a ,   b ,   c }   In [ 2 ] :=   Append [ foo [ a ,   b ],   c ]  Out [ 2 ] =   foo [ a ,   b ,   c ]", 
            "title": "Simple examples"
        }, 
        {
            "location": "/builtin/list/appendto/", 
            "text": "AppendTo\n\n\nAppendTo[list, e]\n appends \ne\n to \nlist\n and returns the modified \nlist\n.\n\n\nAttributes[AppendTo] := {HoldFirst, Protected}\n\n\nSimple examples\n\n\nIn\n[\n1\n]\n:=\n \nCompoundExpression\n[(\nl\n)\n \n=\n \n({\na\n,\n \nb\n}),\n \nAppendTo\n[\nl\n,\n \nc\n],\n \nl\n]\n\n\nOut\n[\n1\n]\n=\n \n{\na\n,\n \nb\n,\n \nc\n}", 
            "title": "AppendTo "
        }, 
        {
            "location": "/builtin/list/appendto/#appendto", 
            "text": "AppendTo[list, e]  appends  e  to  list  and returns the modified  list .  Attributes[AppendTo] := {HoldFirst, Protected}", 
            "title": "AppendTo"
        }, 
        {
            "location": "/builtin/list/appendto/#simple-examples", 
            "text": "In [ 1 ] :=   CompoundExpression [( l )   =   ({ a ,   b }),   AppendTo [ l ,   c ],   l ]  Out [ 1 ] =   { a ,   b ,   c }", 
            "title": "Simple examples"
        }, 
        {
            "location": "/builtin/list/prepend/", 
            "text": "Prepend\n\n\nPrepend[list, e]\n returns \nlist\n with \ne\n prepended.\n\n\nAttributes[Prepend] := {Protected}\n\n\nSimple examples\n\n\nIn\n[\n1\n]\n:=\n \nPrepend\n[{\na\n,\n \nb\n},\n \nc\n]\n\n\nOut\n[\n1\n]\n=\n \n{\nc\n,\n \na\n,\n \nb\n}\n\n\n\n\n\n\nIn\n[\n2\n]\n:=\n \nPrepend\n[\nfoo\n[\na\n,\n \nb\n],\n \nc\n]\n\n\nOut\n[\n2\n]\n=\n \nfoo\n[\nc\n,\n \na\n,\n \nb\n]", 
            "title": "Prepend "
        }, 
        {
            "location": "/builtin/list/prepend/#prepend", 
            "text": "Prepend[list, e]  returns  list  with  e  prepended.  Attributes[Prepend] := {Protected}", 
            "title": "Prepend"
        }, 
        {
            "location": "/builtin/list/prepend/#simple-examples", 
            "text": "In [ 1 ] :=   Prepend [{ a ,   b },   c ]  Out [ 1 ] =   { c ,   a ,   b }   In [ 2 ] :=   Prepend [ foo [ a ,   b ],   c ]  Out [ 2 ] =   foo [ c ,   a ,   b ]", 
            "title": "Simple examples"
        }, 
        {
            "location": "/builtin/list/prependto/", 
            "text": "PrependTo\n\n\nPrependTo[list, e]\n prepends \ne\n to \nlist\n and returns the modified \nlist\n.\n\n\nAttributes[PrependTo] := {HoldFirst, Protected}\n\n\nSimple examples\n\n\nIn\n[\n1\n]\n:=\n \nCompoundExpression\n[(\nl\n)\n \n=\n \n({\na\n,\n \nb\n}),\n \nPrependTo\n[\nl\n,\n \nc\n],\n \nl\n]\n\n\nOut\n[\n1\n]\n=\n \n{\nc\n,\n \na\n,\n \nb\n}", 
            "title": "PrependTo "
        }, 
        {
            "location": "/builtin/list/prependto/#prependto", 
            "text": "PrependTo[list, e]  prepends  e  to  list  and returns the modified  list .  Attributes[PrependTo] := {HoldFirst, Protected}", 
            "title": "PrependTo"
        }, 
        {
            "location": "/builtin/list/prependto/#simple-examples", 
            "text": "In [ 1 ] :=   CompoundExpression [( l )   =   ({ a ,   b }),   PrependTo [ l ,   c ],   l ]  Out [ 1 ] =   { c ,   a ,   b }", 
            "title": "Simple examples"
        }, 
        {
            "location": "/builtin/list/deleteduplicates/", 
            "text": "DeleteDuplicates\n\n\nDeleteDuplicates[list]\n returns \nlist\n with the duplicates removed.\n\n\nAttributes[DeleteDuplicates] := {Protected}\n\n\nSimple examples\n\n\nIn\n[\n1\n]\n:=\n \nDeleteDuplicates\n[{\nb\n,\n \na\n,\n \nb\n}]\n\n\nOut\n[\n1\n]\n=\n \n{\nb\n,\n \na\n}\n\n\n\n\n\n\nIn\n[\n2\n]\n:=\n \nDeleteDuplicates\n[\nfoo\n[\nb\n,\n \na\n,\n \nb\n]]\n\n\nOut\n[\n2\n]\n=\n \nfoo\n[\nb\n,\n \na\n]\n\n\n\n\n\n\nIn\n[\n3\n]\n:=\n \nDeleteDuplicates\n[{}]\n\n\nOut\n[\n3\n]\n=\n \n{}\n\n\n\n\n\n\nIn\n[\n4\n]\n:=\n \nLength\n[\nDeleteDuplicates\n[\nRange\n[\n10000\n]]]\n\n\nOut\n[\n4\n]\n=\n \n10000", 
            "title": "DeleteDuplicates "
        }, 
        {
            "location": "/builtin/list/deleteduplicates/#deleteduplicates", 
            "text": "DeleteDuplicates[list]  returns  list  with the duplicates removed.  Attributes[DeleteDuplicates] := {Protected}", 
            "title": "DeleteDuplicates"
        }, 
        {
            "location": "/builtin/list/deleteduplicates/#simple-examples", 
            "text": "In [ 1 ] :=   DeleteDuplicates [{ b ,   a ,   b }]  Out [ 1 ] =   { b ,   a }   In [ 2 ] :=   DeleteDuplicates [ foo [ b ,   a ,   b ]]  Out [ 2 ] =   foo [ b ,   a ]   In [ 3 ] :=   DeleteDuplicates [{}]  Out [ 3 ] =   {}   In [ 4 ] :=   Length [ DeleteDuplicates [ Range [ 10000 ]]]  Out [ 4 ] =   10000", 
            "title": "Simple examples"
        }, 
        {
            "location": "/builtin/list/last/", 
            "text": "Last\n\n\nLast[expr]\n returns the last part of \nexpr\n.\n\n\nAttributes[Last] := {Protected}\n\n\nSimple examples\n\n\nIn\n[\n1\n]\n:=\n \nLast\n[{\n1\n,\n \n5\n,\n \n6\n}]\n\n\nOut\n[\n1\n]\n=\n \n6\n\n\n\n\n\n\nIn\n[\n2\n]\n:=\n \nLast\n[(\na\n \n+\n \nb\n)]\n\n\nOut\n[\n2\n]\n=\n \nb", 
            "title": "Last "
        }, 
        {
            "location": "/builtin/list/last/#last", 
            "text": "Last[expr]  returns the last part of  expr .  Attributes[Last] := {Protected}", 
            "title": "Last"
        }, 
        {
            "location": "/builtin/list/last/#simple-examples", 
            "text": "In [ 1 ] :=   Last [{ 1 ,   5 ,   6 }]  Out [ 1 ] =   6   In [ 2 ] :=   Last [( a   +   b )]  Out [ 2 ] =   b", 
            "title": "Simple examples"
        }, 
        {
            "location": "/builtin/list/select/", 
            "text": "Select\n\n\nSelect[expr, cond]\n selects only parts of \nexpr\n that satisfy \ncond\n.\n\n\nAttributes[Select] := {Protected}\n\n\nSimple examples\n\n\nIn\n[\n1\n]\n:=\n \nSelect\n[\nRange\n[\n20\n],\n \nOddQ\n]\n\n\nOut\n[\n1\n]\n=\n \n{\n1\n,\n \n3\n,\n \n5\n,\n \n7\n,\n \n9\n,\n \n11\n,\n \n13\n,\n \n15\n,\n \n17\n,\n \n19\n}\n\n\n\n\n\n\nIn\n[\n2\n]\n:=\n \nSelect\n[{\n1\n,\n \n2\n,\n \n3\n,\n \n4\n},\n \nFunction\n[\nTrue\n]]\n\n\nOut\n[\n2\n]\n=\n \n{\n1\n,\n \n2\n,\n \n3\n,\n \n4\n}", 
            "title": "Select "
        }, 
        {
            "location": "/builtin/list/select/#select", 
            "text": "Select[expr, cond]  selects only parts of  expr  that satisfy  cond .  Attributes[Select] := {Protected}", 
            "title": "Select"
        }, 
        {
            "location": "/builtin/list/select/#simple-examples", 
            "text": "In [ 1 ] :=   Select [ Range [ 20 ],   OddQ ]  Out [ 1 ] =   { 1 ,   3 ,   5 ,   7 ,   9 ,   11 ,   13 ,   15 ,   17 ,   19 }   In [ 2 ] :=   Select [{ 1 ,   2 ,   3 ,   4 },   Function [ True ]]  Out [ 2 ] =   { 1 ,   2 ,   3 ,   4 }", 
            "title": "Simple examples"
        }, 
        {
            "location": "/builtin/matrix/", 
            "text": "matrix documentation\n\n\nInverse\n\n\nDimensions\n\n\nVectorQ\n\n\nMatrixQ\n\n\nDot\n\n\nTranspose", 
            "title": "matrix"
        }, 
        {
            "location": "/builtin/matrix/#matrix-documentation", 
            "text": "Inverse  Dimensions  VectorQ  MatrixQ  Dot  Transpose", 
            "title": "matrix documentation"
        }, 
        {
            "location": "/builtin/matrix/inverse/", 
            "text": "Inverse\n\n\nInverse[mat]\n finds the inverse of the square matrix \nmat\n.\n\n\nAttributes[Inverse] := {Protected}\n\n\nDetails\n\n\nThe row-reduce method has not been added yet, but the shortcuts to finding the inverses of matrices up to 3x3 have been added.\n\n\nSimple examples\n\n\nIn\n[\n1\n]\n:=\n \nInverse\n[{{\n1\n,\n \n2\n},\n \n{\n3\n,\n \n4\n}}]\n\n\nOut\n[\n1\n]\n=\n \n{{\n-\n2\n,\n \n1\n},\n \n{(\n3\n \n*\n \n2\n^-\n1\n),\n \n((\n1\n \n*\n \n2\n^-\n1\n)\n \n*\n \n-\n1\n)}}\n\n\n\n\n\n\nIn\n[\n2\n]\n:=\n \nInverse\n[{{\n3\n,\n \n2\n,\n \n1\n},\n \n{\n1\n,\n \n4\n,\n \n2\n},\n \n{\n2\n,\n \n5\n,\n \n7\n}}]\n\n\nOut\n[\n2\n]\n=\n \n{{(\n2\n \n*\n \n5\n^-\n1\n),\n \n((\n1\n \n*\n \n5\n^-\n1\n)\n \n*\n \n-\n1\n),\n \n0\n},\n \n{((\n1\n \n*\n \n15\n^-\n1\n)\n \n*\n \n-\n1\n),\n \n(\n19\n \n*\n \n45\n^-\n1\n),\n \n((\n1\n \n*\n \n9\n^-\n1\n)\n \n*\n \n-\n1\n)},\n \n{((\n1\n \n*\n \n15\n^-\n1\n)\n \n*\n \n-\n1\n),\n \n((\n11\n \n*\n \n45\n^-\n1\n)\n \n*\n \n-\n1\n),\n \n(\n2\n \n*\n \n9\n^-\n1\n)}}\n\n\n\n\n\n\nFurther examples\n\n\nSymbolic elements are handled correctly:\n\n\nIn\n[\n1\n]\n:=\n \n{{(\n1\n \n*\n \nb\n^-\n1\n)}}\n\n\nOut\n[\n1\n]\n=\n \nInverse\n[{{\nb\n}}]", 
            "title": "Inverse "
        }, 
        {
            "location": "/builtin/matrix/inverse/#inverse", 
            "text": "Inverse[mat]  finds the inverse of the square matrix  mat .  Attributes[Inverse] := {Protected}", 
            "title": "Inverse"
        }, 
        {
            "location": "/builtin/matrix/inverse/#details", 
            "text": "The row-reduce method has not been added yet, but the shortcuts to finding the inverses of matrices up to 3x3 have been added.", 
            "title": "Details"
        }, 
        {
            "location": "/builtin/matrix/inverse/#simple-examples", 
            "text": "In [ 1 ] :=   Inverse [{{ 1 ,   2 },   { 3 ,   4 }}]  Out [ 1 ] =   {{ - 2 ,   1 },   {( 3   *   2 ^- 1 ),   (( 1   *   2 ^- 1 )   *   - 1 )}}   In [ 2 ] :=   Inverse [{{ 3 ,   2 ,   1 },   { 1 ,   4 ,   2 },   { 2 ,   5 ,   7 }}]  Out [ 2 ] =   {{( 2   *   5 ^- 1 ),   (( 1   *   5 ^- 1 )   *   - 1 ),   0 },   {(( 1   *   15 ^- 1 )   *   - 1 ),   ( 19   *   45 ^- 1 ),   (( 1   *   9 ^- 1 )   *   - 1 )},   {(( 1   *   15 ^- 1 )   *   - 1 ),   (( 11   *   45 ^- 1 )   *   - 1 ),   ( 2   *   9 ^- 1 )}}", 
            "title": "Simple examples"
        }, 
        {
            "location": "/builtin/matrix/inverse/#further-examples", 
            "text": "Symbolic elements are handled correctly:  In [ 1 ] :=   {{( 1   *   b ^- 1 )}}  Out [ 1 ] =   Inverse [{{ b }}]", 
            "title": "Further examples"
        }, 
        {
            "location": "/builtin/matrix/dimensions/", 
            "text": "Dimensions\n\n\nDimensions[expr]\n finds the dimensions of \nexpr\n.\n\n\nAttributes[Dimensions] := {Protected}\n\n\nSimple examples\n\n\nIn\n[\n1\n]\n:=\n \nDimensions\n[{{\n1\n,\n \n3\n},\n \n{\n1\n,\n \n2\n}}]\n\n\nOut\n[\n1\n]\n=\n \n{\n2\n,\n \n2\n}\n\n\n\n\n\n\nIn\n[\n2\n]\n:=\n \nDimensions\n[{{{\n1\n,\n \n2\n},\n \n{\n3\n,\n \n2\n}},\n \n{{\n1\n,\n \n2\n}}}]\n\n\nOut\n[\n2\n]\n=\n \n{\n2\n}\n\n\n\n\n\n\nFurther examples\n\n\nIn\n[\n1\n]\n:=\n \nDimensions\n[\nfoo\n]\n\n\nOut\n[\n1\n]\n=\n \n{}\n\n\n\n\n\n\nDimensions\n works with any head, not just \nList\n:\n\n\nIn\n[\n2\n]\n:=\n \nDimensions\n[\nfoo\n[]]\n\n\nOut\n[\n2\n]\n=\n \n{\n0\n}", 
            "title": "Dimensions "
        }, 
        {
            "location": "/builtin/matrix/dimensions/#dimensions", 
            "text": "Dimensions[expr]  finds the dimensions of  expr .  Attributes[Dimensions] := {Protected}", 
            "title": "Dimensions"
        }, 
        {
            "location": "/builtin/matrix/dimensions/#simple-examples", 
            "text": "In [ 1 ] :=   Dimensions [{{ 1 ,   3 },   { 1 ,   2 }}]  Out [ 1 ] =   { 2 ,   2 }   In [ 2 ] :=   Dimensions [{{{ 1 ,   2 },   { 3 ,   2 }},   {{ 1 ,   2 }}}]  Out [ 2 ] =   { 2 }", 
            "title": "Simple examples"
        }, 
        {
            "location": "/builtin/matrix/dimensions/#further-examples", 
            "text": "In [ 1 ] :=   Dimensions [ foo ]  Out [ 1 ] =   {}   Dimensions  works with any head, not just  List :  In [ 2 ] :=   Dimensions [ foo []]  Out [ 2 ] =   { 0 }", 
            "title": "Further examples"
        }, 
        {
            "location": "/builtin/matrix/vectorq/", 
            "text": "VectorQ\n\n\nVectorQ[expr]\n returns True if \nexpr\n is a vector, False otherwise.\n\n\nAttributes[VectorQ] := {Protected}\n\n\nSimple examples\n\n\nIn\n[\n1\n]\n:=\n \nVectorQ\n[{\n1\n,\n \n2\n,\n \nc\n}]\n\n\nOut\n[\n1\n]\n=\n \nTrue\n\n\n\n\n\n\nIn\n[\n2\n]\n:=\n \nVectorQ\n[{\n1\n,\n \n2\n,\n \nfoo\n[\na\n]}]\n\n\nOut\n[\n2\n]\n=\n \nTrue\n\n\n\n\n\n\nIn\n[\n3\n]\n:=\n \nVectorQ\n[\nfoo\n[\n1\n,\n \n2\n,\n \n3\n]]\n\n\nOut\n[\n3\n]\n=\n \nFalse\n\n\n\n\n\n\nIn\n[\n4\n]\n:=\n \nVectorQ\n[{\n1\n,\n \n2\n,\n \n3\n,\n \n{}}]\n\n\nOut\n[\n4\n]\n=\n \nFalse\n\n\n\n\n\n\nIn\n[\n5\n]\n:=\n \nVectorQ\n[{\nf\n[\na\n],\n \nf\n[\nb\n]}]\n\n\nOut\n[\n5\n]\n=\n \nTrue\n\n\n\n\n\n\nIn\n[\n6\n]\n:=\n \nVectorQ\n[{\na\n,\n \nc\n}]\n\n\nOut\n[\n6\n]\n=\n \nTrue\n\n\n\n\n\n\nIn\n[\n7\n]\n:=\n \nVectorQ\n[{}]\n\n\nOut\n[\n7\n]\n=\n \nTrue", 
            "title": "VectorQ "
        }, 
        {
            "location": "/builtin/matrix/vectorq/#vectorq", 
            "text": "VectorQ[expr]  returns True if  expr  is a vector, False otherwise.  Attributes[VectorQ] := {Protected}", 
            "title": "VectorQ"
        }, 
        {
            "location": "/builtin/matrix/vectorq/#simple-examples", 
            "text": "In [ 1 ] :=   VectorQ [{ 1 ,   2 ,   c }]  Out [ 1 ] =   True   In [ 2 ] :=   VectorQ [{ 1 ,   2 ,   foo [ a ]}]  Out [ 2 ] =   True   In [ 3 ] :=   VectorQ [ foo [ 1 ,   2 ,   3 ]]  Out [ 3 ] =   False   In [ 4 ] :=   VectorQ [{ 1 ,   2 ,   3 ,   {}}]  Out [ 4 ] =   False   In [ 5 ] :=   VectorQ [{ f [ a ],   f [ b ]}]  Out [ 5 ] =   True   In [ 6 ] :=   VectorQ [{ a ,   c }]  Out [ 6 ] =   True   In [ 7 ] :=   VectorQ [{}]  Out [ 7 ] =   True", 
            "title": "Simple examples"
        }, 
        {
            "location": "/builtin/matrix/matrixq/", 
            "text": "MatrixQ\n\n\nMatrixQ[expr]\n returns True if \nexpr\n is a 2D matrix, False otherwise.\n\n\nAttributes[MatrixQ] := {Protected}\n\n\nSimple examples\n\n\nIn\n[\n1\n]\n:=\n \nMatrixQ\n[{}]\n\n\nOut\n[\n1\n]\n=\n \nFalse\n\n\n\n\n\n\nIn\n[\n2\n]\n:=\n \nMatrixQ\n[{{}}]\n\n\nOut\n[\n2\n]\n=\n \nTrue\n\n\n\n\n\n\nIn\n[\n3\n]\n:=\n \nMatrixQ\n[{{\na\n}}]\n\n\nOut\n[\n3\n]\n=\n \nTrue\n\n\n\n\n\n\nIn\n[\n4\n]\n:=\n \nMatrixQ\n[{{{}}}]\n\n\nOut\n[\n4\n]\n=\n \nFalse\n\n\n\n\n\n\nIn\n[\n5\n]\n:=\n \nMatrixQ\n[{{{\na\n}}}]\n\n\nOut\n[\n5\n]\n=\n \nFalse\n\n\n\n\n\n\nIn\n[\n6\n]\n:=\n \nMatrixQ\n[{{\na\n},\n \n{\nb\n}}]\n\n\nOut\n[\n6\n]\n=\n \nTrue\n\n\n\n\n\n\nIn\n[\n7\n]\n:=\n \nMatrixQ\n[{{\na\n,\n \nb\n},\n \n{\nc\n,\n \nd\n}}]\n\n\nOut\n[\n7\n]\n=\n \nTrue\n\n\n\n\n\n\nIn\n[\n8\n]\n:=\n \nMatrixQ\n[{{\na\n,\n \nb\n,\n \ne\n},\n \n{\nc\n,\n \nd\n}}]\n\n\nOut\n[\n8\n]\n=\n \nFalse\n\n\n\n\n\n\nIn\n[\n9\n]\n:=\n \nMatrixQ\n[{{\na\n,\n \nb\n,\n \ne\n},\n \n{\nc\n,\n \nd\n,\n \nf\n}}]\n\n\nOut\n[\n9\n]\n=\n \nTrue\n\n\n\n\n\n\nIn\n[\n10\n]\n:=\n \nMatrixQ\n[{{{\na\n},\n \n{\nb\n}},\n \n{{\nc\n},\n \n{\nd\n}}}]\n\n\nOut\n[\n10\n]\n=\n \nFalse\n\n\n\n\n\n\nIn\n[\n11\n]\n:=\n \nMatrixQ\n[{{\na\n,\n \nb\n,\n \ne\n}}]\n\n\nOut\n[\n11\n]\n=\n \nTrue", 
            "title": "MatrixQ "
        }, 
        {
            "location": "/builtin/matrix/matrixq/#matrixq", 
            "text": "MatrixQ[expr]  returns True if  expr  is a 2D matrix, False otherwise.  Attributes[MatrixQ] := {Protected}", 
            "title": "MatrixQ"
        }, 
        {
            "location": "/builtin/matrix/matrixq/#simple-examples", 
            "text": "In [ 1 ] :=   MatrixQ [{}]  Out [ 1 ] =   False   In [ 2 ] :=   MatrixQ [{{}}]  Out [ 2 ] =   True   In [ 3 ] :=   MatrixQ [{{ a }}]  Out [ 3 ] =   True   In [ 4 ] :=   MatrixQ [{{{}}}]  Out [ 4 ] =   False   In [ 5 ] :=   MatrixQ [{{{ a }}}]  Out [ 5 ] =   False   In [ 6 ] :=   MatrixQ [{{ a },   { b }}]  Out [ 6 ] =   True   In [ 7 ] :=   MatrixQ [{{ a ,   b },   { c ,   d }}]  Out [ 7 ] =   True   In [ 8 ] :=   MatrixQ [{{ a ,   b ,   e },   { c ,   d }}]  Out [ 8 ] =   False   In [ 9 ] :=   MatrixQ [{{ a ,   b ,   e },   { c ,   d ,   f }}]  Out [ 9 ] =   True   In [ 10 ] :=   MatrixQ [{{{ a },   { b }},   {{ c },   { d }}}]  Out [ 10 ] =   False   In [ 11 ] :=   MatrixQ [{{ a ,   b ,   e }}]  Out [ 11 ] =   True", 
            "title": "Simple examples"
        }, 
        {
            "location": "/builtin/matrix/dot/", 
            "text": "Dot\n\n\na.b\n computes the product of \na\n and \nb\n for vectors and matrices.\n\n\nAttributes[Dot] := {Flat, OneIdentity, Protected}\n\n\nSimple examples\n\n\nIn\n[\n1\n]\n:=\n \nDot\n[{\na\n,\n \nb\n},\n \n{\nc\n,\n \nd\n}]\n\n\nOut\n[\n1\n]\n=\n \n((\na\n \n*\n \nc\n)\n \n+\n \n(\nb\n \n*\n \nd\n))\n\n\n\n\n\n\nIn\n[\n2\n]\n:=\n \nDot\n[{\na\n,\n \nb\n},\n \n{\nc\n,\n \nd\n,\n \ne\n}]\n\n\nOut\n[\n2\n]\n=\n \nDot\n[{\na\n,\n \nb\n},\n \n{\nc\n,\n \nd\n,\n \ne\n}]\n\n\n\n\n\n\nIn\n[\n3\n]\n:=\n \nDot\n[\n1\n,\n \n{\nc\n,\n \nd\n,\n \ne\n}]\n\n\nOut\n[\n3\n]\n=\n \nDot\n[\n1\n,\n \n{\nc\n,\n \nd\n,\n \ne\n}]\n\n\n\n\n\n\nIn\n[\n4\n]\n:=\n \nDot\n[{},\n \n{}]\n\n\nOut\n[\n4\n]\n=\n \n0\n\n\n\n\n\n\nIn\n[\n5\n]\n:=\n \nDot\n[{{\na\n,\n \nb\n},\n \n{\nc\n,\n \nd\n}},\n \n{\ne\n,\n \nf\n,\n \ng\n}]\n\n\nOut\n[\n5\n]\n=\n \nDot\n[{{\na\n,\n \nb\n},\n \n{\nc\n,\n \nd\n}},\n \n{\ne\n,\n \nf\n,\n \ng\n}]\n\n\n\n\n\n\nIn\n[\n6\n]\n:=\n \nDot\n[{\na\n,\n \nb\n}]\n\n\nOut\n[\n6\n]\n=\n \n{\na\n,\n \nb\n}\n\n\n\n\n\n\nIn\n[\n7\n]\n:=\n \nDot\n[\na\n]\n\n\nOut\n[\n7\n]\n=\n \na\n\n\n\n\n\n\nIn\n[\n8\n]\n:=\n \nDot\n[\n1\n]\n\n\nOut\n[\n8\n]\n=\n \n1\n\n\n\n\n\n\nIn\n[\n9\n]\n:=\n \nDot\n[{{\na\n,\n \nb\n},\n \n{\nc\n,\n \nd\n}},\n \n{{\ne\n,\n \nf\n},\n \n{\ng\n,\n \nh\n}}]\n\n\nOut\n[\n9\n]\n=\n \n{{((\na\n \n*\n \ne\n)\n \n+\n \n(\nb\n \n*\n \ng\n)),\n \n((\na\n \n*\n \nf\n)\n \n+\n \n(\nb\n \n*\n \nh\n))},\n \n{((\nc\n \n*\n \ne\n)\n \n+\n \n(\nd\n \n*\n \ng\n)),\n \n((\nc\n \n*\n \nf\n)\n \n+\n \n(\nd\n \n*\n \nh\n))}}\n\n\n\n\n\n\nIn\n[\n10\n]\n:=\n \nDot\n[{{\na\n,\n \nb\n},\n \n{\nc\n,\n \nd\n}},\n \n{{\ne\n},\n \n{\nf\n}}]\n\n\nOut\n[\n10\n]\n=\n \n{{((\na\n \n*\n \ne\n)\n \n+\n \n(\nb\n \n*\n \nf\n))},\n \n{((\nc\n \n*\n \ne\n)\n \n+\n \n(\nd\n \n*\n \nf\n))}}\n\n\n\n\n\n\nIn\n[\n11\n]\n:=\n \nDot\n[{{\na\n,\n \nb\n},\n \n{\nc\n,\n \nd\n}},\n \n{{\ne\n,\n \nf\n}}]\n\n\nOut\n[\n11\n]\n=\n \nDot\n[{{\na\n,\n \nb\n},\n \n{\nc\n,\n \nd\n}},\n \n{{\ne\n,\n \nf\n}}]", 
            "title": "Dot "
        }, 
        {
            "location": "/builtin/matrix/dot/#dot", 
            "text": "a.b  computes the product of  a  and  b  for vectors and matrices.  Attributes[Dot] := {Flat, OneIdentity, Protected}", 
            "title": "Dot"
        }, 
        {
            "location": "/builtin/matrix/dot/#simple-examples", 
            "text": "In [ 1 ] :=   Dot [{ a ,   b },   { c ,   d }]  Out [ 1 ] =   (( a   *   c )   +   ( b   *   d ))   In [ 2 ] :=   Dot [{ a ,   b },   { c ,   d ,   e }]  Out [ 2 ] =   Dot [{ a ,   b },   { c ,   d ,   e }]   In [ 3 ] :=   Dot [ 1 ,   { c ,   d ,   e }]  Out [ 3 ] =   Dot [ 1 ,   { c ,   d ,   e }]   In [ 4 ] :=   Dot [{},   {}]  Out [ 4 ] =   0   In [ 5 ] :=   Dot [{{ a ,   b },   { c ,   d }},   { e ,   f ,   g }]  Out [ 5 ] =   Dot [{{ a ,   b },   { c ,   d }},   { e ,   f ,   g }]   In [ 6 ] :=   Dot [{ a ,   b }]  Out [ 6 ] =   { a ,   b }   In [ 7 ] :=   Dot [ a ]  Out [ 7 ] =   a   In [ 8 ] :=   Dot [ 1 ]  Out [ 8 ] =   1   In [ 9 ] :=   Dot [{{ a ,   b },   { c ,   d }},   {{ e ,   f },   { g ,   h }}]  Out [ 9 ] =   {{(( a   *   e )   +   ( b   *   g )),   (( a   *   f )   +   ( b   *   h ))},   {(( c   *   e )   +   ( d   *   g )),   (( c   *   f )   +   ( d   *   h ))}}   In [ 10 ] :=   Dot [{{ a ,   b },   { c ,   d }},   {{ e },   { f }}]  Out [ 10 ] =   {{(( a   *   e )   +   ( b   *   f ))},   {(( c   *   e )   +   ( d   *   f ))}}   In [ 11 ] :=   Dot [{{ a ,   b },   { c ,   d }},   {{ e ,   f }}]  Out [ 11 ] =   Dot [{{ a ,   b },   { c ,   d }},   {{ e ,   f }}]", 
            "title": "Simple examples"
        }, 
        {
            "location": "/builtin/matrix/transpose/", 
            "text": "Transpose\n\n\nTranspose[mat]\n transposes the first two levels of \nmat\n\n\nAttributes[Transpose] := {Protected}\n\n\nSimple examples\n\n\nIn\n[\n1\n]\n:=\n \nTranspose\n[{\na\n,\n \nb\n}]\n\n\nOut\n[\n1\n]\n=\n \nTranspose\n[{\na\n,\n \nb\n}]\n\n\n\n\n\n\nIn\n[\n2\n]\n:=\n \nTranspose\n[{{\na\n},\n \n{\nb\n}}]\n\n\nOut\n[\n2\n]\n=\n \n{{\na\n,\n \nb\n}}\n\n\n\n\n\n\nIn\n[\n3\n]\n:=\n \nTranspose\n[{{\na\n,\n \nb\n}}]\n\n\nOut\n[\n3\n]\n=\n \n{{\na\n},\n \n{\nb\n}}\n\n\n\n\n\n\nIn\n[\n4\n]\n:=\n \nTranspose\n[{{{\na\n},\n \n{\nb\n}}}]\n\n\nOut\n[\n4\n]\n=\n \n{{{\na\n}},\n \n{{\nb\n}}}\n\n\n\n\n\n\nIn\n[\n5\n]\n:=\n \nTranspose\n[\na\n]\n\n\nOut\n[\n5\n]\n=\n \nTranspose\n[\na\n]", 
            "title": "Transpose "
        }, 
        {
            "location": "/builtin/matrix/transpose/#transpose", 
            "text": "Transpose[mat]  transposes the first two levels of  mat  Attributes[Transpose] := {Protected}", 
            "title": "Transpose"
        }, 
        {
            "location": "/builtin/matrix/transpose/#simple-examples", 
            "text": "In [ 1 ] :=   Transpose [{ a ,   b }]  Out [ 1 ] =   Transpose [{ a ,   b }]   In [ 2 ] :=   Transpose [{{ a },   { b }}]  Out [ 2 ] =   {{ a ,   b }}   In [ 3 ] :=   Transpose [{{ a ,   b }}]  Out [ 3 ] =   {{ a },   { b }}   In [ 4 ] :=   Transpose [{{{ a },   { b }}}]  Out [ 4 ] =   {{{ a }},   {{ b }}}   In [ 5 ] :=   Transpose [ a ]  Out [ 5 ] =   Transpose [ a ]", 
            "title": "Simple examples"
        }, 
        {
            "location": "/builtin/arithmetic/", 
            "text": "arithmetic documentation\n\n\nPlus\n\n\nSum\n\n\nTimes\n\n\nProduct\n\n\nAbs\n\n\nDivide", 
            "title": "arithmetic"
        }, 
        {
            "location": "/builtin/arithmetic/#arithmetic-documentation", 
            "text": "Plus  Sum  Times  Product  Abs  Divide", 
            "title": "arithmetic documentation"
        }, 
        {
            "location": "/builtin/arithmetic/plus/", 
            "text": "Plus\n\n\n(e1 + e2 + ...)\n computes the sum of all expressions in the function.\n\n\nAttributes[Plus] := {Flat, Listable, NumericFunction, OneIdentity, Orderless, Protected}\n\n\nSimple examples\n\n\nIn\n[\n1\n]\n:=\n \n(\n1\n \n+\n \n1\n)\n\n\nOut\n[\n1\n]\n=\n \n2\n\n\n\n\n\n\nIf Reals are present, other Integers are demoted to Reals:\n\n\nIn\n[\n2\n]\n:=\n \n((\n5.2\n \n+\n \n(\n0.2\n \n*\n \n-\n1\n))\n \n+\n \n(\n5\n \n*\n \n-\n1\n))\n\n\nOut\n[\n2\n]\n=\n \n0.\n\n\n\n\n\n\nPlus automatically combines like terms:\n\n\nIn\n[\n3\n]\n:=\n \n(\na\n \n+\n \nb\n^\n2\n \n+\n \n(\n5\n \n*\n \nb\n^\n2\n))\n\n\nOut\n[\n3\n]\n=\n \n(\na\n \n+\n \n(\n6\n \n*\n \nb\n^\n2\n))\n\n\n\n\n\n\nIn\n[\n4\n]\n:=\n \n((\na\n \n+\n \nb\n)\n \n+\n \n((\na\n \n+\n \nb\n)\n \n*\n \n-\n1\n)\n \n+\n \n(\nc\n \n+\n \n(\nc\n \n*\n \n-\n1\n))\n \n+\n \n(\n2\n \n*\n \nc\n^\na\n)\n \n+\n \n(\n2\n \n*\n \nd\n)\n \n+\n \n(\n5\n \n*\n \nd\n)\n \n+\n \n(\nd\n \n+\n \n((\n5\n \n*\n \nd\n)\n \n*\n \n-\n1\n))\n \n+\n \n(\n3\n \n*\n \nc\n^\na\n))\n\n\nOut\n[\n4\n]\n=\n \n((\n5\n \n*\n \nc\n^\na\n)\n \n+\n \n(\n3\n \n*\n \nd\n))\n\n\n\n\n\n\nIn\n[\n5\n]\n:=\n \n((\n4\n \n*\n \na\n \n*\n \nb\n \n*\n \nc\n \n*\n \nd\n \n*\n \ne\n \n*\n \nf\n)\n \n+\n \n((\n7\n \n*\n \na\n \n*\n \nb\n \n*\n \nc\n \n*\n \nd\n \n*\n \ne\n \n*\n \nf\n)\n \n*\n \n-\n1\n))\n\n\nOut\n[\n5\n]\n=\n \n((\n3\n \n*\n \na\n \n*\n \nb\n \n*\n \nc\n \n*\n \nd\n \n*\n \ne\n \n*\n \nf\n)\n \n*\n \n-\n1\n)", 
            "title": "Plus "
        }, 
        {
            "location": "/builtin/arithmetic/plus/#plus", 
            "text": "(e1 + e2 + ...)  computes the sum of all expressions in the function.  Attributes[Plus] := {Flat, Listable, NumericFunction, OneIdentity, Orderless, Protected}", 
            "title": "Plus"
        }, 
        {
            "location": "/builtin/arithmetic/plus/#simple-examples", 
            "text": "In [ 1 ] :=   ( 1   +   1 )  Out [ 1 ] =   2   If Reals are present, other Integers are demoted to Reals:  In [ 2 ] :=   (( 5.2   +   ( 0.2   *   - 1 ))   +   ( 5   *   - 1 ))  Out [ 2 ] =   0.   Plus automatically combines like terms:  In [ 3 ] :=   ( a   +   b ^ 2   +   ( 5   *   b ^ 2 ))  Out [ 3 ] =   ( a   +   ( 6   *   b ^ 2 ))   In [ 4 ] :=   (( a   +   b )   +   (( a   +   b )   *   - 1 )   +   ( c   +   ( c   *   - 1 ))   +   ( 2   *   c ^ a )   +   ( 2   *   d )   +   ( 5   *   d )   +   ( d   +   (( 5   *   d )   *   - 1 ))   +   ( 3   *   c ^ a ))  Out [ 4 ] =   (( 5   *   c ^ a )   +   ( 3   *   d ))   In [ 5 ] :=   (( 4   *   a   *   b   *   c   *   d   *   e   *   f )   +   (( 7   *   a   *   b   *   c   *   d   *   e   *   f )   *   - 1 ))  Out [ 5 ] =   (( 3   *   a   *   b   *   c   *   d   *   e   *   f )   *   - 1 )", 
            "title": "Simple examples"
        }, 
        {
            "location": "/builtin/arithmetic/sum/", 
            "text": "Sum\n\n\nSum[expr, n]\n returns the sum of \nn\n copies of \nexpr\n.\n\n\nSum[expr, {sym, n}]\n returns the sum of \nexpr\n evaluated with \nsym\n = 1 to \nn\n.\n\n\nSum[expr, {sym, m, n}]\n returns the sum of \nexpr\n evaluated with \nsym\n = \nm\n to \nn\n.\n\n\nAttributes[Sum] := {HoldAll, Protected, ReadProtected}\n\n\nSimple examples\n\n\nIn\n[\n1\n]\n:=\n \nSum\n[\ni\n,\n \n{\ni\n,\n \n5\n,\n \n10\n}]\n\n\nOut\n[\n1\n]\n=\n \n45\n\n\n\n\n\n\nIn\n[\n2\n]\n:=\n \nSum\n[\ni\n,\n \n{\ni\n,\n \n1\n,\n \n10\n}]\n\n\nOut\n[\n2\n]\n=\n \n55\n\n\n\n\n\n\nIn\n[\n3\n]\n:=\n \nSum\n[\ni\n,\n \n{\ni\n,\n \n0\n,\n \n10\n}]\n\n\nOut\n[\n3\n]\n=\n \n55\n\n\n\n\n\n\nIn\n[\n4\n]\n:=\n \nSum\n[\ni\n,\n \n{\ni\n,\n \n1\n,\n \n30000\n}]\n\n\nOut\n[\n4\n]\n=\n \n450015000\n\n\n\n\n\n\nIn\n[\n5\n]\n:=\n \nSum\n[\ni\n,\n \n{\ni\n,\n \n0\n,\n \n30000\n}]\n\n\nOut\n[\n5\n]\n=\n \n450015000\n\n\n\n\n\n\nIn\n[\n6\n]\n:=\n \nSum\n[\ni\n,\n \n{\ni\n,\n \n0\n,\n \nn\n}]\n\n\nOut\n[\n6\n]\n=\n \n(\n1\n \n*\n \n2\n^-\n1\n \n*\n \nn\n \n*\n \n(\n1\n \n+\n \nn\n))\n\n\n\n\n\n\nIn\n[\n7\n]\n:=\n \nSum\n[\ni\n,\n \n{\ni\n,\n \n1\n,\n \nn\n}]\n\n\nOut\n[\n7\n]\n=\n \n(\n1\n \n*\n \n2\n^-\n1\n \n*\n \nn\n \n*\n \n(\n1\n \n+\n \nn\n))\n\n\n\n\n\n\nIn\n[\n8\n]\n:=\n \nSum\n[(\na\n \n+\n \nb\n),\n \n{\na\n,\n \n0\n,\n \n2\n},\n \n{\nb\n,\n \n0\n,\n \n3\n}]\n\n\nOut\n[\n8\n]\n=\n \n30\n\n\n\n\n\n\nIn\n[\n9\n]\n:=\n \nSum\n[\na\n,\n \n{\na\n,\n \n{\nb\n,\n \nc\n,\n \nd\n,\n \ne\n}}]\n\n\nOut\n[\n9\n]\n=\n \n(\nb\n \n+\n \nc\n \n+\n \nd\n \n+\n \ne\n)\n\n\n\n\n\n\nIn\n[\n10\n]\n:=\n \nSum\n[(\na\n \n*\n \nf\n),\n \n{\na\n,\n \n{\nb\n,\n \nc\n,\n \nd\n,\n \ne\n}},\n \n{\nf\n,\n \n{\ng\n,\n \nh\n}}]\n\n\nOut\n[\n10\n]\n=\n \n((\nb\n \n*\n \ng\n)\n \n+\n \n(\nc\n \n*\n \ng\n)\n \n+\n \n(\nd\n \n*\n \ng\n)\n \n+\n \n(\ne\n \n*\n \ng\n)\n \n+\n \n(\nb\n \n*\n \nh\n)\n \n+\n \n(\nc\n \n*\n \nh\n)\n \n+\n \n(\nd\n \n*\n \nh\n)\n \n+\n \n(\ne\n \n*\n \nh\n))", 
            "title": "Sum "
        }, 
        {
            "location": "/builtin/arithmetic/sum/#sum", 
            "text": "Sum[expr, n]  returns the sum of  n  copies of  expr .  Sum[expr, {sym, n}]  returns the sum of  expr  evaluated with  sym  = 1 to  n .  Sum[expr, {sym, m, n}]  returns the sum of  expr  evaluated with  sym  =  m  to  n .  Attributes[Sum] := {HoldAll, Protected, ReadProtected}", 
            "title": "Sum"
        }, 
        {
            "location": "/builtin/arithmetic/sum/#simple-examples", 
            "text": "In [ 1 ] :=   Sum [ i ,   { i ,   5 ,   10 }]  Out [ 1 ] =   45   In [ 2 ] :=   Sum [ i ,   { i ,   1 ,   10 }]  Out [ 2 ] =   55   In [ 3 ] :=   Sum [ i ,   { i ,   0 ,   10 }]  Out [ 3 ] =   55   In [ 4 ] :=   Sum [ i ,   { i ,   1 ,   30000 }]  Out [ 4 ] =   450015000   In [ 5 ] :=   Sum [ i ,   { i ,   0 ,   30000 }]  Out [ 5 ] =   450015000   In [ 6 ] :=   Sum [ i ,   { i ,   0 ,   n }]  Out [ 6 ] =   ( 1   *   2 ^- 1   *   n   *   ( 1   +   n ))   In [ 7 ] :=   Sum [ i ,   { i ,   1 ,   n }]  Out [ 7 ] =   ( 1   *   2 ^- 1   *   n   *   ( 1   +   n ))   In [ 8 ] :=   Sum [( a   +   b ),   { a ,   0 ,   2 },   { b ,   0 ,   3 }]  Out [ 8 ] =   30   In [ 9 ] :=   Sum [ a ,   { a ,   { b ,   c ,   d ,   e }}]  Out [ 9 ] =   ( b   +   c   +   d   +   e )   In [ 10 ] :=   Sum [( a   *   f ),   { a ,   { b ,   c ,   d ,   e }},   { f ,   { g ,   h }}]  Out [ 10 ] =   (( b   *   g )   +   ( c   *   g )   +   ( d   *   g )   +   ( e   *   g )   +   ( b   *   h )   +   ( c   *   h )   +   ( d   *   h )   +   ( e   *   h ))", 
            "title": "Simple examples"
        }, 
        {
            "location": "/builtin/arithmetic/times/", 
            "text": "Times\n\n\n(e1 * e2 * ...)\n computes the product of all expressions in the function.\n\n\nAttributes[Times] := {Flat, Listable, NumericFunction, OneIdentity, Orderless, Protected}\n\n\nSimple examples\n\n\nSimplification rules apply automatically:\n\n\nIn\n[\n1\n]\n:=\n \n((\n3\n \n+\n \n(\nx\n^\n2\n \n*\n \n0\n))\n \n*\n \n2\n^-\n1\n)\n\n\nOut\n[\n1\n]\n=\n \n(\n3\n \n*\n \n2\n^-\n1\n)\n\n\n\n\n\n\nIn\n[\n2\n]\n:=\n \n(\na\n^\n2\n \n*\n \na\n^\nc\n)\n\n\nOut\n[\n2\n]\n=\n \na\n^\n(\n2\n \n+\n \nc\n)\n\n\n\n\n\n\nIn\n[\n3\n]\n:=\n \n(((\na\n \n*\n \nb\n^-\n1\n)\n \n*\n \nc\n^-\n1\n)\n \n*\n \nd\n^-\n1\n)\n\n\nOut\n[\n3\n]\n=\n \n(\na\n \n*\n \n(\nb\n \n*\n \nc\n \n*\n \nd\n)\n^-\n1\n)\n\n\n\n\n\n\nFurther examples\n\n\nRational numbers are suppported (explicit rational declaration added for clarity):\n\n\nIn\n[\n1\n]\n:=\n \nRational\n[\n1\n,\n \n-\n2\n]\n*\nRational\n[\n-\n2\n,\n \n3\n]\n*-\n2\n\n\nOut\n[\n1\n]\n=\n \n-\n2\n/\n3\n\n\n\n\n\n\nThe product of nothing is defined to be one:\n\n\nIn\n[\n2\n]\n:=\n \nTimes\n[]\n\n\nOut\n[\n2\n]\n=\n \n1", 
            "title": "Times "
        }, 
        {
            "location": "/builtin/arithmetic/times/#times", 
            "text": "(e1 * e2 * ...)  computes the product of all expressions in the function.  Attributes[Times] := {Flat, Listable, NumericFunction, OneIdentity, Orderless, Protected}", 
            "title": "Times"
        }, 
        {
            "location": "/builtin/arithmetic/times/#simple-examples", 
            "text": "Simplification rules apply automatically:  In [ 1 ] :=   (( 3   +   ( x ^ 2   *   0 ))   *   2 ^- 1 )  Out [ 1 ] =   ( 3   *   2 ^- 1 )   In [ 2 ] :=   ( a ^ 2   *   a ^ c )  Out [ 2 ] =   a ^ ( 2   +   c )   In [ 3 ] :=   ((( a   *   b ^- 1 )   *   c ^- 1 )   *   d ^- 1 )  Out [ 3 ] =   ( a   *   ( b   *   c   *   d ) ^- 1 )", 
            "title": "Simple examples"
        }, 
        {
            "location": "/builtin/arithmetic/times/#further-examples", 
            "text": "Rational numbers are suppported (explicit rational declaration added for clarity):  In [ 1 ] :=   Rational [ 1 ,   - 2 ] * Rational [ - 2 ,   3 ] *- 2  Out [ 1 ] =   - 2 / 3   The product of nothing is defined to be one:  In [ 2 ] :=   Times []  Out [ 2 ] =   1", 
            "title": "Further examples"
        }, 
        {
            "location": "/builtin/arithmetic/product/", 
            "text": "Product\n\n\nProduct[expr, n]\n returns the product of \nn\n copies of \nexpr\n.\n\n\nProduct[expr, {sym, n}]\n returns the product of \nexpr\n evaluated with \nsym\n = 1 to \nn\n.\n\n\nProduct[expr, {sym, m, n}]\n returns the product of \nexpr\n evaluated with \nsym\n = \nm\n to \nn\n.\n\n\nAttributes[Product] := {HoldAll, Protected, ReadProtected}\n\n\nSimple examples\n\n\nIn\n[\n1\n]\n:=\n \nProduct\n[\na\n,\n \n{\na\n,\n \n1\n,\n \n5\n}]\n\n\nOut\n[\n1\n]\n=\n \n120\n\n\n\n\n\n\nIn\n[\n2\n]\n:=\n \nProduct\n[\nf\n[\na\n],\n \n{\na\n,\n \n1\n,\n \n5\n}]\n\n\nOut\n[\n2\n]\n=\n \n(\nf\n[\n1\n]\n \n*\n \nf\n[\n2\n]\n \n*\n \nf\n[\n3\n]\n \n*\n \nf\n[\n4\n]\n \n*\n \nf\n[\n5\n])\n\n\n\n\n\n\nIn\n[\n3\n]\n:=\n \nProduct\n[\na\n^\n2\n,\n \n{\na\n,\n \n4\n}]\n\n\nOut\n[\n3\n]\n=\n \n576\n\n\n\n\n\n\nIn\n[\n4\n]\n:=\n \nProduct\n[(\na\n \n+\n \nb\n),\n \n{\na\n,\n \n1\n,\n \n2\n},\n \n{\nb\n,\n \n1\n,\n \n3\n}]\n\n\nOut\n[\n4\n]\n=\n \n1440", 
            "title": "Product "
        }, 
        {
            "location": "/builtin/arithmetic/product/#product", 
            "text": "Product[expr, n]  returns the product of  n  copies of  expr .  Product[expr, {sym, n}]  returns the product of  expr  evaluated with  sym  = 1 to  n .  Product[expr, {sym, m, n}]  returns the product of  expr  evaluated with  sym  =  m  to  n .  Attributes[Product] := {HoldAll, Protected, ReadProtected}", 
            "title": "Product"
        }, 
        {
            "location": "/builtin/arithmetic/product/#simple-examples", 
            "text": "In [ 1 ] :=   Product [ a ,   { a ,   1 ,   5 }]  Out [ 1 ] =   120   In [ 2 ] :=   Product [ f [ a ],   { a ,   1 ,   5 }]  Out [ 2 ] =   ( f [ 1 ]   *   f [ 2 ]   *   f [ 3 ]   *   f [ 4 ]   *   f [ 5 ])   In [ 3 ] :=   Product [ a ^ 2 ,   { a ,   4 }]  Out [ 3 ] =   576   In [ 4 ] :=   Product [( a   +   b ),   { a ,   1 ,   2 },   { b ,   1 ,   3 }]  Out [ 4 ] =   1440", 
            "title": "Simple examples"
        }, 
        {
            "location": "/builtin/arithmetic/abs/", 
            "text": "Abs\n\n\nAbs[expr]\n calculates the absolute value of \nexpr\n.\n\n\nAttributes[Abs] := {Listable, NumericFunction, Protected, ReadProtected}\n\n\nSimple examples\n\n\nIn\n[\n1\n]\n:=\n \nAbs\n[\n-\n5.2\n]\n\n\nOut\n[\n1\n]\n=\n \n5.2\n\n\n\n\n\n\nIn\n[\n2\n]\n:=\n \nAbs\n[\n5\n]\n\n\nOut\n[\n2\n]\n=\n \n5\n\n\n\n\n\n\nAbsolute values of unspecified inputs will be left unevaluated:\n\n\nIn\n[\n3\n]\n:=\n \nAbs\n[\na\n]\n\n\nOut\n[\n3\n]\n=\n \nAbs\n[\na\n]\n\n\n\n\n\n\nBut sometimes simplifications can occur:\n\n\nIn\n[\n4\n]\n:=\n \nAbs\n[(\nSin\n[\nx\n]\n \n*\n \n-\n1\n)]\n\n\nOut\n[\n4\n]\n=\n \nAbs\n[\nSin\n[\nx\n]]", 
            "title": "Abs "
        }, 
        {
            "location": "/builtin/arithmetic/abs/#abs", 
            "text": "Abs[expr]  calculates the absolute value of  expr .  Attributes[Abs] := {Listable, NumericFunction, Protected, ReadProtected}", 
            "title": "Abs"
        }, 
        {
            "location": "/builtin/arithmetic/abs/#simple-examples", 
            "text": "In [ 1 ] :=   Abs [ - 5.2 ]  Out [ 1 ] =   5.2   In [ 2 ] :=   Abs [ 5 ]  Out [ 2 ] =   5   Absolute values of unspecified inputs will be left unevaluated:  In [ 3 ] :=   Abs [ a ]  Out [ 3 ] =   Abs [ a ]   But sometimes simplifications can occur:  In [ 4 ] :=   Abs [( Sin [ x ]   *   - 1 )]  Out [ 4 ] =   Abs [ Sin [ x ]]", 
            "title": "Simple examples"
        }, 
        {
            "location": "/builtin/arithmetic/divide/", 
            "text": "Divide\n\n\nDivide[a, b]\n computes \na/b\n.\n\n\nAttributes[Divide] := {Listable, NumericFunction, Protected}\n\n\nSimple examples\n\n\nIn\n[\n1\n]\n:=\n \nDivide\n[\n10\n,\n \n5\n]\n\n\nOut\n[\n1\n]\n=\n \n2", 
            "title": "Divide "
        }, 
        {
            "location": "/builtin/arithmetic/divide/#divide", 
            "text": "Divide[a, b]  computes  a/b .  Attributes[Divide] := {Listable, NumericFunction, Protected}", 
            "title": "Divide"
        }, 
        {
            "location": "/builtin/arithmetic/divide/#simple-examples", 
            "text": "In [ 1 ] :=   Divide [ 10 ,   5 ]  Out [ 1 ] =   2", 
            "title": "Simple examples"
        }, 
        {
            "location": "/builtin/specialsyms/", 
            "text": "specialsyms documentation\n\n\nInfinity\n\n\nComplexInfinity\n\n\nIndeterminate\n\n\nPi\n\n\nE", 
            "title": "specialsyms"
        }, 
        {
            "location": "/builtin/specialsyms/#specialsyms-documentation", 
            "text": "Infinity  ComplexInfinity  Indeterminate  Pi  E", 
            "title": "specialsyms documentation"
        }, 
        {
            "location": "/builtin/specialsyms/infinity/", 
            "text": "Infinity\n\n\nInfinity\n represents the mathematical concept of infinity.\n\n\nAttributes[Infinity] := {Protected, ReadProtected}\n\n\nSimple examples\n\n\nIn\n[\n1\n]\n:=\n \n(\nInfinity\n \n+\n \n(\n1\n \n*\n \n-\n1\n))\n\n\nOut\n[\n1\n]\n=\n \nInfinity\n\n\n\n\n\n\nIn\n[\n2\n]\n:=\n \n(\nInfinity\n \n+\n \n(\n990999999\n \n*\n \n-\n1\n))\n\n\nOut\n[\n2\n]\n=\n \nInfinity\n\n\n\n\n\n\nIn\n[\n3\n]\n:=\n \n(\nInfinity\n \n+\n \n(\n9.91\ne\n+\n08\n \n*\n \n-\n1\n))\n\n\nOut\n[\n3\n]\n=\n \nInfinity\n\n\n\n\n\n\nIn\n[\n4\n]\n:=\n \n(\nInfinity\n \n+\n \n(\nInfinity\n \n*\n \n-\n1\n))\n\n\nOut\n[\n4\n]\n=\n \nIndeterminate\n\n\n\n\n\n\nIn\n[\n5\n]\n:=\n \n(\nInfinity\n \n*\n \n-\n1\n)\n\n\nOut\n[\n5\n]\n=\n \n(\nInfinity\n \n*\n \n-\n1\n)\n\n\n\n\n\n\nIn\n[\n6\n]\n:=\n \n((\nInfinity\n \n*\n \n-\n1\n)\n \n+\n \n1\n)\n\n\nOut\n[\n6\n]\n=\n \n(\nInfinity\n \n*\n \n-\n1\n)\n\n\n\n\n\n\nIn\n[\n7\n]\n:=\n \n((\nInfinity\n \n*\n \n-\n1\n)\n \n+\n \n999\n)\n\n\nOut\n[\n7\n]\n=\n \n(\nInfinity\n \n*\n \n-\n1\n)\n\n\n\n\n\n\nIn\n[\n8\n]\n:=\n \n((\nInfinity\n \n*\n \n-\n1\n)\n \n*\n \n-\n1\n)\n\n\nOut\n[\n8\n]\n=\n \nInfinity\n\n\n\n\n\n\nIn\n[\n9\n]\n:=\n \n(\n1\n \n*\n \nInfinity\n^-\n1\n)\n\n\nOut\n[\n9\n]\n=\n \n0", 
            "title": "Infinity "
        }, 
        {
            "location": "/builtin/specialsyms/infinity/#infinity", 
            "text": "Infinity  represents the mathematical concept of infinity.  Attributes[Infinity] := {Protected, ReadProtected}", 
            "title": "Infinity"
        }, 
        {
            "location": "/builtin/specialsyms/infinity/#simple-examples", 
            "text": "In [ 1 ] :=   ( Infinity   +   ( 1   *   - 1 ))  Out [ 1 ] =   Infinity   In [ 2 ] :=   ( Infinity   +   ( 990999999   *   - 1 ))  Out [ 2 ] =   Infinity   In [ 3 ] :=   ( Infinity   +   ( 9.91 e + 08   *   - 1 ))  Out [ 3 ] =   Infinity   In [ 4 ] :=   ( Infinity   +   ( Infinity   *   - 1 ))  Out [ 4 ] =   Indeterminate   In [ 5 ] :=   ( Infinity   *   - 1 )  Out [ 5 ] =   ( Infinity   *   - 1 )   In [ 6 ] :=   (( Infinity   *   - 1 )   +   1 )  Out [ 6 ] =   ( Infinity   *   - 1 )   In [ 7 ] :=   (( Infinity   *   - 1 )   +   999 )  Out [ 7 ] =   ( Infinity   *   - 1 )   In [ 8 ] :=   (( Infinity   *   - 1 )   *   - 1 )  Out [ 8 ] =   Infinity   In [ 9 ] :=   ( 1   *   Infinity ^- 1 )  Out [ 9 ] =   0", 
            "title": "Simple examples"
        }, 
        {
            "location": "/builtin/specialsyms/complexinfinity/", 
            "text": "ComplexInfinity\n\n\nComplexInfinity\n represents an an infinite quantity that extends in an unknown direction in the complex plane.\n\n\nAttributes[ComplexInfinity] := {Protected}\n\n\nSimple examples\n\n\nIn\n[\n1\n]\n:=\n \n0\n^-\n1\n\n\nOut\n[\n1\n]\n=\n \nComplexInfinity\n\n\n\n\n\n\nIn\n[\n2\n]\n:=\n \n(\na\n \n*\n \n0\n^-\n1\n)\n\n\nOut\n[\n2\n]\n=\n \nComplexInfinity\n\n\n\n\n\n\nIn\n[\n3\n]\n:=\n \n(\nComplexInfinity\n \n*\n \nfoo\n[\nx\n])\n\n\nOut\n[\n3\n]\n=\n \nComplexInfinity\n\n\n\n\n\n\nIn\n[\n4\n]\n:=\n \nFactorial\n[\n-\n1\n]\n\n\nOut\n[\n4\n]\n=\n \nComplexInfinity", 
            "title": "ComplexInfinity "
        }, 
        {
            "location": "/builtin/specialsyms/complexinfinity/#complexinfinity", 
            "text": "ComplexInfinity  represents an an infinite quantity that extends in an unknown direction in the complex plane.  Attributes[ComplexInfinity] := {Protected}", 
            "title": "ComplexInfinity"
        }, 
        {
            "location": "/builtin/specialsyms/complexinfinity/#simple-examples", 
            "text": "In [ 1 ] :=   0 ^- 1  Out [ 1 ] =   ComplexInfinity   In [ 2 ] :=   ( a   *   0 ^- 1 )  Out [ 2 ] =   ComplexInfinity   In [ 3 ] :=   ( ComplexInfinity   *   foo [ x ])  Out [ 3 ] =   ComplexInfinity   In [ 4 ] :=   Factorial [ - 1 ]  Out [ 4 ] =   ComplexInfinity", 
            "title": "Simple examples"
        }, 
        {
            "location": "/builtin/specialsyms/indeterminate/", 
            "text": "Indeterminate\n\n\nIndeterminate\n represents an indeterminate form.\n\n\nAttributes[Indeterminate] := {Protected}\n\n\nSimple examples\n\n\nIn\n[\n1\n]\n:=\n \n(\n0\n \n*\n \n0\n^-\n1\n)\n\n\nOut\n[\n1\n]\n=\n \nIndeterminate\n\n\n\n\n\n\nIn\n[\n2\n]\n:=\n \n(\nInfinity\n \n+\n \n(\nInfinity\n \n*\n \n-\n1\n))\n\n\nOut\n[\n2\n]\n=\n \nIndeterminate\n\n\n\n\n\n\nIn\n[\n3\n]\n:=\n \n(\n0\n \n*\n \nInfinity\n)\n\n\nOut\n[\n3\n]\n=\n \nIndeterminate\n\n\n\n\n\n\nIn\n[\n4\n]\n:=\n \n(\n0\n \n*\n \nComplexInfinity\n)\n\n\nOut\n[\n4\n]\n=\n \nIndeterminate\n\n\n\n\n\n\nIn\n[\n5\n]\n:=\n \n0\n^\n0\n\n\nOut\n[\n5\n]\n=\n \nIndeterminate", 
            "title": "Indeterminate "
        }, 
        {
            "location": "/builtin/specialsyms/indeterminate/#indeterminate", 
            "text": "Indeterminate  represents an indeterminate form.  Attributes[Indeterminate] := {Protected}", 
            "title": "Indeterminate"
        }, 
        {
            "location": "/builtin/specialsyms/indeterminate/#simple-examples", 
            "text": "In [ 1 ] :=   ( 0   *   0 ^- 1 )  Out [ 1 ] =   Indeterminate   In [ 2 ] :=   ( Infinity   +   ( Infinity   *   - 1 ))  Out [ 2 ] =   Indeterminate   In [ 3 ] :=   ( 0   *   Infinity )  Out [ 3 ] =   Indeterminate   In [ 4 ] :=   ( 0   *   ComplexInfinity )  Out [ 4 ] =   Indeterminate   In [ 5 ] :=   0 ^ 0  Out [ 5 ] =   Indeterminate", 
            "title": "Simple examples"
        }, 
        {
            "location": "/builtin/specialsyms/pi/", 
            "text": "Pi\n\n\nPi\n is the constant of pi.\n\n\nAttributes[Pi] := {Constant, Protected, ReadProtected}", 
            "title": "Pi "
        }, 
        {
            "location": "/builtin/specialsyms/pi/#pi", 
            "text": "Pi  is the constant of pi.  Attributes[Pi] := {Constant, Protected, ReadProtected}", 
            "title": "Pi"
        }, 
        {
            "location": "/builtin/specialsyms/e/", 
            "text": "E\n\n\nE\n is the constant for the base of the natural logarithm.\n\n\nAttributes[E] := {Constant, Protected, ReadProtected}", 
            "title": "E "
        }, 
        {
            "location": "/builtin/specialsyms/e/#e", 
            "text": "E  is the constant for the base of the natural logarithm.  Attributes[E] := {Constant, Protected, ReadProtected}", 
            "title": "E"
        }, 
        {
            "location": "/builtin/power/", 
            "text": "power documentation\n\n\nPower\n\n\nExpand\n\n\nLog\n\n\nSqrt\n\n\nI\n\n\nPolynomialQ\n\n\nExponent\n\n\nCoefficient\n\n\nPolynomialQuotientRemainder\n\n\nPolynomialQuotient\n\n\nPolynomialRemainder\n\n\nFactorTermsList\n\n\nVariables\n\n\nPolynomialGCD\n\n\nSquareFreeQ\n\n\nFactorSquareFree", 
            "title": "power"
        }, 
        {
            "location": "/builtin/power/#power-documentation", 
            "text": "Power  Expand  Log  Sqrt  I  PolynomialQ  Exponent  Coefficient  PolynomialQuotientRemainder  PolynomialQuotient  PolynomialRemainder  FactorTermsList  Variables  PolynomialGCD  SquareFreeQ  FactorSquareFree", 
            "title": "power documentation"
        }, 
        {
            "location": "/builtin/power/power/", 
            "text": "Power\n\n\nbase^exp\n finds \nbase\n raised to the power of \nexp\n.\n\n\nAttributes[Power] := {Listable, NumericFunction, OneIdentity, Protected}\n\n\nSimple examples\n\n\nExponents of integers are computed exactly:\n\n\nIn\n[\n1\n]\n:=\n \n(\n-\n5\n)\n^-\n3\n\n\nOut\n[\n1\n]\n=\n \n-\n1\n/\n125\n\n\n\n\n\n\nFloating point exponents are handled with floating point precision:\n\n\nIn\n[\n2\n]\n:=\n \n.5\n^-\n10000.\n\n\nOut\n[\n2\n]\n=\n \n1.99506\ne\n+\n3010\n\n\n\n\n\n\nAutomatically apply some basic simplification rules:\n\n\nIn\n[\n3\n]\n:=\n \nm\n^\n2.\n^\n2\n\n\nOut\n[\n3\n]\n=\n \nm\n^\n4.\n\n\n\n\n\n\nFurther examples\n\n\nExpreduce handles problematic exponents accordingly:\n\n\nIn\n[\n1\n]\n:=\n \n0\n^\n0\n\n\nOut\n[\n1\n]\n=\n \nIndeterminate\n\n\n\n\n\n\nIn\n[\n2\n]\n:=\n \n0\n^-\n1\n\n\nOut\n[\n2\n]\n=\n \nComplexInfinity", 
            "title": "Power "
        }, 
        {
            "location": "/builtin/power/power/#power", 
            "text": "base^exp  finds  base  raised to the power of  exp .  Attributes[Power] := {Listable, NumericFunction, OneIdentity, Protected}", 
            "title": "Power"
        }, 
        {
            "location": "/builtin/power/power/#simple-examples", 
            "text": "Exponents of integers are computed exactly:  In [ 1 ] :=   ( - 5 ) ^- 3  Out [ 1 ] =   - 1 / 125   Floating point exponents are handled with floating point precision:  In [ 2 ] :=   .5 ^- 10000.  Out [ 2 ] =   1.99506 e + 3010   Automatically apply some basic simplification rules:  In [ 3 ] :=   m ^ 2. ^ 2  Out [ 3 ] =   m ^ 4.", 
            "title": "Simple examples"
        }, 
        {
            "location": "/builtin/power/power/#further-examples", 
            "text": "Expreduce handles problematic exponents accordingly:  In [ 1 ] :=   0 ^ 0  Out [ 1 ] =   Indeterminate   In [ 2 ] :=   0 ^- 1  Out [ 2 ] =   ComplexInfinity", 
            "title": "Further examples"
        }, 
        {
            "location": "/builtin/power/expand/", 
            "text": "Expand\n\n\nExpand[expr]\n attempts to expand \nexpr\n.\n\n\nAttributes[Expand] := {Protected}\n\n\nSimple examples\n\n\nIn\n[\n1\n]\n:=\n \nExpand\n[(\na\n \n+\n \nb\n \n+\n \nc\n)\n^\n3\n]\n\n\nOut\n[\n1\n]\n=\n \n(\na\n^\n3\n \n+\n \n(\n3\n \n*\n \na\n^\n2\n \n*\n \nb\n)\n \n+\n \n(\n3\n \n*\n \na\n \n*\n \nb\n^\n2\n)\n \n+\n \nb\n^\n3\n \n+\n \n(\n3\n \n*\n \na\n^\n2\n \n*\n \nc\n)\n \n+\n \n(\n6\n \n*\n \na\n \n*\n \nb\n \n*\n \nc\n)\n \n+\n \n(\n3\n \n*\n \nb\n^\n2\n \n*\n \nc\n)\n \n+\n \n(\n3\n \n*\n \na\n \n*\n \nc\n^\n2\n)\n \n+\n \n(\n3\n \n*\n \nb\n \n*\n \nc\n^\n2\n)\n \n+\n \nc\n^\n3\n)\n\n\n\n\n\n\nIn\n[\n2\n]\n:=\n \nExpand\n[((\na\n \n+\n \nb\n)\n \n*\n \n(\nc\n \n+\n \nd\n \n+\n \ne\n))]\n\n\nOut\n[\n2\n]\n=\n \n((\na\n \n*\n \nc\n)\n \n+\n \n(\nb\n \n*\n \nc\n)\n \n+\n \n(\na\n \n*\n \nd\n)\n \n+\n \n(\nb\n \n*\n \nd\n)\n \n+\n \n(\na\n \n*\n \ne\n)\n \n+\n \n(\nb\n \n*\n \ne\n))\n\n\n\n\n\n\nIn\n[\n3\n]\n:=\n \nExpand\n[((\na\n \n+\n \nb\n \n+\n \nc\n)\n \n*\n \n(\nd\n \n+\n \ne\n)\n^\n2\n)]\n\n\nOut\n[\n3\n]\n=\n \n((\na\n \n*\n \nd\n^\n2\n)\n \n+\n \n(\nb\n \n*\n \nd\n^\n2\n)\n \n+\n \n(\nc\n \n*\n \nd\n^\n2\n)\n \n+\n \n(\n2\n \n*\n \na\n \n*\n \nd\n \n*\n \ne\n)\n \n+\n \n(\n2\n \n*\n \nb\n \n*\n \nd\n \n*\n \ne\n)\n \n+\n \n(\n2\n \n*\n \nc\n \n*\n \nd\n \n*\n \ne\n)\n \n+\n \n(\na\n \n*\n \ne\n^\n2\n)\n \n+\n \n(\nb\n \n*\n \ne\n^\n2\n)\n \n+\n \n(\nc\n \n*\n \ne\n^\n2\n))\n\n\n\n\n\n\nIn\n[\n4\n]\n:=\n \nExpand\n[(\na\n^\nb\n \n+\n \nc\n^\nd\n)\n^\n2\n]\n\n\nOut\n[\n4\n]\n=\n \n(\na\n^\n(\n2\n \n*\n \nb\n)\n \n+\n \n(\n2\n \n*\n \na\n^\nb\n \n*\n \nc\n^\nd\n)\n \n+\n \nc\n^\n(\n2\n \n*\n \nd\n))\n\n\n\n\n\n\nIn\n[\n5\n]\n:=\n \nExpand\n[((\na\n \n+\n \nb\n \n+\n \nc\n)\n \n*\n \nd\n^-\n1\n)]\n\n\nOut\n[\n5\n]\n=\n \n((\na\n \n*\n \nd\n^-\n1\n)\n \n+\n \n(\nb\n \n*\n \nd\n^-\n1\n)\n \n+\n \n(\nc\n \n*\n \nd\n^-\n1\n))\n\n\n\n\n\n\nIn\n[\n6\n]\n:=\n \nExpand\n[(((\na\n \n+\n \n1\n)\n^\n2\n \n+\n \nb\n \n+\n \nc\n)\n \n*\n \nd\n^-\n1\n)]\n\n\nOut\n[\n6\n]\n=\n \n((\n1\n \n*\n \nd\n^-\n1\n)\n \n+\n \n((\n2\n \n*\n \na\n)\n \n*\n \nd\n^-\n1\n)\n \n+\n \n(\na\n^\n2\n \n*\n \nd\n^-\n1\n)\n \n+\n \n(\nb\n \n*\n \nd\n^-\n1\n)\n \n+\n \n(\nc\n \n*\n \nd\n^-\n1\n))\n\n\n\n\n\n\nIn\n[\n7\n]\n:=\n \nExpand\n[(\n2\n \n*\n \n(\na\n \n+\n \n1\n))]\n\n\nOut\n[\n7\n]\n=\n \n(\n2\n \n+\n \n(\n2\n \n*\n \na\n))", 
            "title": "Expand "
        }, 
        {
            "location": "/builtin/power/expand/#expand", 
            "text": "Expand[expr]  attempts to expand  expr .  Attributes[Expand] := {Protected}", 
            "title": "Expand"
        }, 
        {
            "location": "/builtin/power/expand/#simple-examples", 
            "text": "In [ 1 ] :=   Expand [( a   +   b   +   c ) ^ 3 ]  Out [ 1 ] =   ( a ^ 3   +   ( 3   *   a ^ 2   *   b )   +   ( 3   *   a   *   b ^ 2 )   +   b ^ 3   +   ( 3   *   a ^ 2   *   c )   +   ( 6   *   a   *   b   *   c )   +   ( 3   *   b ^ 2   *   c )   +   ( 3   *   a   *   c ^ 2 )   +   ( 3   *   b   *   c ^ 2 )   +   c ^ 3 )   In [ 2 ] :=   Expand [(( a   +   b )   *   ( c   +   d   +   e ))]  Out [ 2 ] =   (( a   *   c )   +   ( b   *   c )   +   ( a   *   d )   +   ( b   *   d )   +   ( a   *   e )   +   ( b   *   e ))   In [ 3 ] :=   Expand [(( a   +   b   +   c )   *   ( d   +   e ) ^ 2 )]  Out [ 3 ] =   (( a   *   d ^ 2 )   +   ( b   *   d ^ 2 )   +   ( c   *   d ^ 2 )   +   ( 2   *   a   *   d   *   e )   +   ( 2   *   b   *   d   *   e )   +   ( 2   *   c   *   d   *   e )   +   ( a   *   e ^ 2 )   +   ( b   *   e ^ 2 )   +   ( c   *   e ^ 2 ))   In [ 4 ] :=   Expand [( a ^ b   +   c ^ d ) ^ 2 ]  Out [ 4 ] =   ( a ^ ( 2   *   b )   +   ( 2   *   a ^ b   *   c ^ d )   +   c ^ ( 2   *   d ))   In [ 5 ] :=   Expand [(( a   +   b   +   c )   *   d ^- 1 )]  Out [ 5 ] =   (( a   *   d ^- 1 )   +   ( b   *   d ^- 1 )   +   ( c   *   d ^- 1 ))   In [ 6 ] :=   Expand [((( a   +   1 ) ^ 2   +   b   +   c )   *   d ^- 1 )]  Out [ 6 ] =   (( 1   *   d ^- 1 )   +   (( 2   *   a )   *   d ^- 1 )   +   ( a ^ 2   *   d ^- 1 )   +   ( b   *   d ^- 1 )   +   ( c   *   d ^- 1 ))   In [ 7 ] :=   Expand [( 2   *   ( a   +   1 ))]  Out [ 7 ] =   ( 2   +   ( 2   *   a ))", 
            "title": "Simple examples"
        }, 
        {
            "location": "/builtin/power/log/", 
            "text": "Log\n\n\nLog[e]\n finds the natural logarithm of \ne\n.\n\n\nAttributes[Log] := {Listable, NumericFunction, Protected}\n\n\nSimple examples\n\n\nIn\n[\n1\n]\n:=\n \nLog\n[\nE\n]\n\n\nOut\n[\n1\n]\n=\n \n1\n\n\n\n\n\n\nIn\n[\n2\n]\n:=\n \nLog\n[\nE\n^-\n2\n]\n\n\nOut\n[\n2\n]\n=\n \n-\n2\n\n\n\n\n\n\nIn\n[\n3\n]\n:=\n \nLog\n[\n2\n]\n\n\nOut\n[\n3\n]\n=\n \nLog\n[\n2\n]", 
            "title": "Log "
        }, 
        {
            "location": "/builtin/power/log/#log", 
            "text": "Log[e]  finds the natural logarithm of  e .  Attributes[Log] := {Listable, NumericFunction, Protected}", 
            "title": "Log"
        }, 
        {
            "location": "/builtin/power/log/#simple-examples", 
            "text": "In [ 1 ] :=   Log [ E ]  Out [ 1 ] =   1   In [ 2 ] :=   Log [ E ^- 2 ]  Out [ 2 ] =   - 2   In [ 3 ] :=   Log [ 2 ]  Out [ 3 ] =   Log [ 2 ]", 
            "title": "Simple examples"
        }, 
        {
            "location": "/builtin/power/sqrt/", 
            "text": "Sqrt\n\n\nSqrt[e]\n finds the square root of \ne\n.\n\n\nAttributes[Sqrt] := {Listable, NumericFunction, Protected}\n\n\nSimple examples\n\n\nIn\n[\n1\n]\n:=\n \nSqrt\n[\n3\n]\n\n\nOut\n[\n1\n]\n=\n \nSqrt\n[\n3\n]\n\n\n\n\n\n\nIn\n[\n2\n]\n:=\n \nSqrt\n[\n-\n1\n]\n\n\nOut\n[\n2\n]\n=\n \nI\n\n\n\n\n\n\nIn\n[\n3\n]\n:=\n \nSqrt\n[\n-\n3\n]\n\n\nOut\n[\n3\n]\n=\n \n(\nI\n \n*\n \nSqrt\n[\n3\n])\n\n\n\n\n\n\nIn\n[\n4\n]\n:=\n \nSqrt\n[\n1\n]\n\n\nOut\n[\n4\n]\n=\n \n1\n\n\n\n\n\n\nIn\n[\n5\n]\n:=\n \nSqrt\n[\n0\n]\n\n\nOut\n[\n5\n]\n=\n \n0", 
            "title": "Sqrt "
        }, 
        {
            "location": "/builtin/power/sqrt/#sqrt", 
            "text": "Sqrt[e]  finds the square root of  e .  Attributes[Sqrt] := {Listable, NumericFunction, Protected}", 
            "title": "Sqrt"
        }, 
        {
            "location": "/builtin/power/sqrt/#simple-examples", 
            "text": "In [ 1 ] :=   Sqrt [ 3 ]  Out [ 1 ] =   Sqrt [ 3 ]   In [ 2 ] :=   Sqrt [ - 1 ]  Out [ 2 ] =   I   In [ 3 ] :=   Sqrt [ - 3 ]  Out [ 3 ] =   ( I   *   Sqrt [ 3 ])   In [ 4 ] :=   Sqrt [ 1 ]  Out [ 4 ] =   1   In [ 5 ] :=   Sqrt [ 0 ]  Out [ 5 ] =   0", 
            "title": "Simple examples"
        }, 
        {
            "location": "/builtin/power/i/", 
            "text": "I\n\n\nI\n is the imaginary number representing \nSqrt[-1]\n.\n\n\nAttributes[I] := {Locked, Protected, ReadProtected}", 
            "title": "I "
        }, 
        {
            "location": "/builtin/power/i/#i", 
            "text": "I  is the imaginary number representing  Sqrt[-1] .  Attributes[I] := {Locked, Protected, ReadProtected}", 
            "title": "I"
        }, 
        {
            "location": "/builtin/power/polynomialq/", 
            "text": "PolynomialQ\n\n\nPolynomialQ[e, var]\n returns True if \ne\n is a polynomial in \nvar\n.\n\n\nAttributes[PolynomialQ] := {Protected}", 
            "title": "PolynomialQ "
        }, 
        {
            "location": "/builtin/power/polynomialq/#polynomialq", 
            "text": "PolynomialQ[e, var]  returns True if  e  is a polynomial in  var .  Attributes[PolynomialQ] := {Protected}", 
            "title": "PolynomialQ"
        }, 
        {
            "location": "/builtin/power/exponent/", 
            "text": "Exponent\n\n\nExponent[p, var]\n returns the degree of \np\n with respect to the variable \nvar\n.\n\n\nAttributes[Exponent] := {Listable, Protected}\n\n\nSimple examples\n\n\nFind the degree of a polynomial:\n\n\nIn\n[\n1\n]\n:=\n \nExponent\n[(\n3\n \n+\n \nx\n^\n3\n \n+\n \n(\nk\n \n*\n \nx\n^\n5\n)),\n \nx\n]\n\n\nOut\n[\n1\n]\n=\n \n5\n\n\n\n\n\n\nFurther examples\n\n\nFind the degree of a polynomial:\n\n\nIn\n[\n1\n]\n:=\n \nExponent\n[(\n3\n \n+\n \nx\n^\n3\n \n+\n \n(\nk\n \n*\n \nx\n^\n5\n)),\n \nx\n,\n \nList\n]\n\n\nOut\n[\n1\n]\n=\n \n{\n0\n,\n \n3\n,\n \n5\n}", 
            "title": "Exponent "
        }, 
        {
            "location": "/builtin/power/exponent/#exponent", 
            "text": "Exponent[p, var]  returns the degree of  p  with respect to the variable  var .  Attributes[Exponent] := {Listable, Protected}", 
            "title": "Exponent"
        }, 
        {
            "location": "/builtin/power/exponent/#simple-examples", 
            "text": "Find the degree of a polynomial:  In [ 1 ] :=   Exponent [( 3   +   x ^ 3   +   ( k   *   x ^ 5 )),   x ]  Out [ 1 ] =   5", 
            "title": "Simple examples"
        }, 
        {
            "location": "/builtin/power/exponent/#further-examples", 
            "text": "Find the degree of a polynomial:  In [ 1 ] :=   Exponent [( 3   +   x ^ 3   +   ( k   *   x ^ 5 )),   x ,   List ]  Out [ 1 ] =   { 0 ,   3 ,   5 }", 
            "title": "Further examples"
        }, 
        {
            "location": "/builtin/power/coefficient/", 
            "text": "Coefficient\n\n\nCoefficient[p, form]\n returns the coefficient of form \nform\n in polynomial \np\n.\n\n\nAttributes[Coefficient] := {Listable, Protected}\n\n\nSimple examples\n\n\nIn\n[\n1\n]\n:=\n \nCoefficient\n[(\na\n \n+\n \nb\n)\n^\n3\n,\n \n(\na\n \n*\n \nb\n^\n2\n)]\n\n\nOut\n[\n1\n]\n=\n \n3", 
            "title": "Coefficient "
        }, 
        {
            "location": "/builtin/power/coefficient/#coefficient", 
            "text": "Coefficient[p, form]  returns the coefficient of form  form  in polynomial  p .  Attributes[Coefficient] := {Listable, Protected}", 
            "title": "Coefficient"
        }, 
        {
            "location": "/builtin/power/coefficient/#simple-examples", 
            "text": "In [ 1 ] :=   Coefficient [( a   +   b ) ^ 3 ,   ( a   *   b ^ 2 )]  Out [ 1 ] =   3", 
            "title": "Simple examples"
        }, 
        {
            "location": "/builtin/power/polynomialquotientremainder/", 
            "text": "PolynomialQuotientRemainder\n\n\nPolynomialQuotientRemainder[poly_, div_, var_]\n returns the quotient and remainder of \npoly\n divided by \ndiv\n treating \nvar\n as the polynomial variable.\n\n\nAttributes[PolynomialQuotientRemainder] := {Protected}\n\n\nSimple examples\n\n\nIn\n[\n1\n]\n:=\n \nPolynomialQuotientRemainder\n[(\n2\n \n+\n \nx\n^\n2\n \n+\n \nx\n^\n3\n),\n \n(\n2\n \n+\n \n(\n2\n \n*\n \nx\n)),\n \nx\n]\n\n\nOut\n[\n1\n]\n=\n \n{(\nx\n^\n2\n \n*\n \n2\n^-\n1\n),\n \n2\n}\n\n\n\n\n\n\nIn\n[\n2\n]\n:=\n \nPolynomialQuotientRemainder\n[\nx\n^\n3\n,\n \n(\nx\n \n+\n \ny\n),\n \nx\n]\n\n\nOut\n[\n2\n]\n=\n \n{(\nx\n^\n2\n \n+\n \n((\nx\n \n*\n \ny\n)\n \n*\n \n-\n1\n)\n \n+\n \ny\n^\n2\n),\n \n(\ny\n^\n3\n \n*\n \n-\n1\n)}\n\n\n\n\n\n\nIn\n[\n3\n]\n:=\n \nPolynomialQuotientRemainder\n[(\n1\n \n+\n \nx\n^\n3\n),\n \n(\n1\n \n+\n \n(\na\n \n*\n \nx\n^\n2\n)),\n \nx\n]\n\n\nOut\n[\n3\n]\n=\n \n{(\nx\n \n*\n \na\n^-\n1\n),\n \n(\n1\n \n+\n \n((\nx\n \n*\n \na\n^-\n1\n)\n \n*\n \n-\n1\n))}", 
            "title": "PolynomialQuotientRemainder "
        }, 
        {
            "location": "/builtin/power/polynomialquotientremainder/#polynomialquotientremainder", 
            "text": "PolynomialQuotientRemainder[poly_, div_, var_]  returns the quotient and remainder of  poly  divided by  div  treating  var  as the polynomial variable.  Attributes[PolynomialQuotientRemainder] := {Protected}", 
            "title": "PolynomialQuotientRemainder"
        }, 
        {
            "location": "/builtin/power/polynomialquotientremainder/#simple-examples", 
            "text": "In [ 1 ] :=   PolynomialQuotientRemainder [( 2   +   x ^ 2   +   x ^ 3 ),   ( 2   +   ( 2   *   x )),   x ]  Out [ 1 ] =   {( x ^ 2   *   2 ^- 1 ),   2 }   In [ 2 ] :=   PolynomialQuotientRemainder [ x ^ 3 ,   ( x   +   y ),   x ]  Out [ 2 ] =   {( x ^ 2   +   (( x   *   y )   *   - 1 )   +   y ^ 2 ),   ( y ^ 3   *   - 1 )}   In [ 3 ] :=   PolynomialQuotientRemainder [( 1   +   x ^ 3 ),   ( 1   +   ( a   *   x ^ 2 )),   x ]  Out [ 3 ] =   {( x   *   a ^- 1 ),   ( 1   +   (( x   *   a ^- 1 )   *   - 1 ))}", 
            "title": "Simple examples"
        }, 
        {
            "location": "/builtin/power/polynomialquotient/", 
            "text": "PolynomialQuotient\n\n\nPolynomialQuotient[poly_, div_, var_]\n returns the quotient of \npoly\n divided by \ndiv\n treating \nvar\n as the polynomial variable.\n\n\nAttributes[PolynomialQuotient] := {Protected}\n\n\nSimple examples\n\n\nIn\n[\n1\n]\n:=\n \nPolynomialQuotient\n[(\n2\n \n+\n \nx\n^\n2\n \n+\n \nx\n^\n3\n),\n \n(\n2\n \n+\n \n(\n2\n \n*\n \nx\n)),\n \nx\n]\n\n\nOut\n[\n1\n]\n=\n \n(\nx\n^\n2\n \n*\n \n2\n^-\n1\n)\n\n\n\n\n\n\nIn\n[\n2\n]\n:=\n \nPolynomialQuotient\n[\nx\n^\n3\n,\n \n(\nx\n \n+\n \ny\n),\n \nx\n]\n\n\nOut\n[\n2\n]\n=\n \n(\nx\n^\n2\n \n+\n \n((\nx\n \n*\n \ny\n)\n \n*\n \n-\n1\n)\n \n+\n \ny\n^\n2\n)\n\n\n\n\n\n\nIn\n[\n3\n]\n:=\n \nPolynomialQuotient\n[(\n1\n \n+\n \nx\n^\n3\n),\n \n(\n1\n \n+\n \n(\na\n \n*\n \nx\n^\n2\n)),\n \nx\n]\n\n\nOut\n[\n3\n]\n=\n \n(\nx\n \n*\n \na\n^-\n1\n)", 
            "title": "PolynomialQuotient "
        }, 
        {
            "location": "/builtin/power/polynomialquotient/#polynomialquotient", 
            "text": "PolynomialQuotient[poly_, div_, var_]  returns the quotient of  poly  divided by  div  treating  var  as the polynomial variable.  Attributes[PolynomialQuotient] := {Protected}", 
            "title": "PolynomialQuotient"
        }, 
        {
            "location": "/builtin/power/polynomialquotient/#simple-examples", 
            "text": "In [ 1 ] :=   PolynomialQuotient [( 2   +   x ^ 2   +   x ^ 3 ),   ( 2   +   ( 2   *   x )),   x ]  Out [ 1 ] =   ( x ^ 2   *   2 ^- 1 )   In [ 2 ] :=   PolynomialQuotient [ x ^ 3 ,   ( x   +   y ),   x ]  Out [ 2 ] =   ( x ^ 2   +   (( x   *   y )   *   - 1 )   +   y ^ 2 )   In [ 3 ] :=   PolynomialQuotient [( 1   +   x ^ 3 ),   ( 1   +   ( a   *   x ^ 2 )),   x ]  Out [ 3 ] =   ( x   *   a ^- 1 )", 
            "title": "Simple examples"
        }, 
        {
            "location": "/builtin/power/polynomialremainder/", 
            "text": "PolynomialRemainder\n\n\nPolynomialRemainder[poly_, div_, var_]\n returns the remainder of \npoly\n divided by \ndiv\n treating \nvar\n as the polynomial variable.\n\n\nAttributes[PolynomialRemainder] := {Protected}\n\n\nSimple examples\n\n\nIn\n[\n1\n]\n:=\n \nPolynomialRemainder\n[(\n2\n \n+\n \nx\n^\n2\n \n+\n \nx\n^\n3\n),\n \n(\n2\n \n+\n \n(\n2\n \n*\n \nx\n)),\n \nx\n]\n\n\nOut\n[\n1\n]\n=\n \n2\n\n\n\n\n\n\nIn\n[\n2\n]\n:=\n \nPolynomialRemainder\n[\nx\n^\n3\n,\n \n(\nx\n \n+\n \ny\n),\n \nx\n]\n\n\nOut\n[\n2\n]\n=\n \n(\ny\n^\n3\n \n*\n \n-\n1\n)\n\n\n\n\n\n\nIn\n[\n3\n]\n:=\n \nPolynomialRemainder\n[(\n1\n \n+\n \nx\n^\n3\n),\n \n(\n1\n \n+\n \n(\na\n \n*\n \nx\n^\n2\n)),\n \nx\n]\n\n\nOut\n[\n3\n]\n=\n \n(\n1\n \n+\n \n((\nx\n \n*\n \na\n^-\n1\n)\n \n*\n \n-\n1\n))", 
            "title": "PolynomialRemainder "
        }, 
        {
            "location": "/builtin/power/polynomialremainder/#polynomialremainder", 
            "text": "PolynomialRemainder[poly_, div_, var_]  returns the remainder of  poly  divided by  div  treating  var  as the polynomial variable.  Attributes[PolynomialRemainder] := {Protected}", 
            "title": "PolynomialRemainder"
        }, 
        {
            "location": "/builtin/power/polynomialremainder/#simple-examples", 
            "text": "In [ 1 ] :=   PolynomialRemainder [( 2   +   x ^ 2   +   x ^ 3 ),   ( 2   +   ( 2   *   x )),   x ]  Out [ 1 ] =   2   In [ 2 ] :=   PolynomialRemainder [ x ^ 3 ,   ( x   +   y ),   x ]  Out [ 2 ] =   ( y ^ 3   *   - 1 )   In [ 3 ] :=   PolynomialRemainder [( 1   +   x ^ 3 ),   ( 1   +   ( a   *   x ^ 2 )),   x ]  Out [ 3 ] =   ( 1   +   (( x   *   a ^- 1 )   *   - 1 ))", 
            "title": "Simple examples"
        }, 
        {
            "location": "/builtin/power/factortermslist/", 
            "text": "FactorTermsList\n\n\nFactorTermsList[expr]\n factors out the constant term of \nexpr\n and puts the factored result into a \nList\n.\n\n\nAttributes[FactorTermsList] := {Protected}\n\n\nSimple examples\n\n\nIn\n[\n1\n]\n:=\n \nFactorTermsList\n[(\n2\n \n*\n \nSin\n[(\n8\n \n*\n \nk\n)])]\n\n\nOut\n[\n1\n]\n=\n \n{\n2\n,\n \nSin\n[(\n8\n \n*\n \nk\n)]}\n\n\n\n\n\n\nIn\n[\n2\n]\n:=\n \nFactorTermsList\n[((\na\n \n*\n \n2\n^-\n1\n)\n \n+\n \n(\nx\n \n*\n \n2\n^-\n1\n))]\n\n\nOut\n[\n2\n]\n=\n \n{(\n1\n \n*\n \n2\n^-\n1\n),\n \n(\na\n \n+\n \nx\n)}\n\n\n\n\n\n\nIn\n[\n3\n]\n:=\n \nFactorTermsList\n[(\na\n \n+\n \nx\n)]\n\n\nOut\n[\n3\n]\n=\n \n{\n1\n,\n \n(\na\n \n+\n \nx\n)}", 
            "title": "FactorTermsList "
        }, 
        {
            "location": "/builtin/power/factortermslist/#factortermslist", 
            "text": "FactorTermsList[expr]  factors out the constant term of  expr  and puts the factored result into a  List .  Attributes[FactorTermsList] := {Protected}", 
            "title": "FactorTermsList"
        }, 
        {
            "location": "/builtin/power/factortermslist/#simple-examples", 
            "text": "In [ 1 ] :=   FactorTermsList [( 2   *   Sin [( 8   *   k )])]  Out [ 1 ] =   { 2 ,   Sin [( 8   *   k )]}   In [ 2 ] :=   FactorTermsList [(( a   *   2 ^- 1 )   +   ( x   *   2 ^- 1 ))]  Out [ 2 ] =   {( 1   *   2 ^- 1 ),   ( a   +   x )}   In [ 3 ] :=   FactorTermsList [( a   +   x )]  Out [ 3 ] =   { 1 ,   ( a   +   x )}", 
            "title": "Simple examples"
        }, 
        {
            "location": "/builtin/power/variables/", 
            "text": "Variables\n\n\nAttributes[Variables] := {Protected}\n\n\nSimple examples\n\n\nIn\n[\n1\n]\n:=\n \nVariables\n[(\nx\n \n+\n \ny\n \n+\n \ny\n^\n2\n)]\n\n\nOut\n[\n1\n]\n=\n \n{\nx\n,\n \ny\n}\n\n\n\n\n\n\nIn\n[\n2\n]\n:=\n \nVariables\n[(\nw\n^\nw\n \n+\n \nx\n^\ny\n \n+\n \nz\n)]\n\n\nOut\n[\n2\n]\n=\n \n{\nw\n^\nw\n,\n \nx\n^\ny\n,\n \nz\n}\n\n\n\n\n\n\nIn\n[\n3\n]\n:=\n \nVariables\n[(\na\n^\n2\n \n*\n \nb\n^\n((\n2\n \n*\n \nc\n)\n \n+\n \n(\n2\n \n*\n \nd\n)))]\n\n\nOut\n[\n3\n]\n=\n \n{\na\n,\n \nb\n^\nc\n,\n \nb\n^\nd\n}", 
            "title": "Variables "
        }, 
        {
            "location": "/builtin/power/variables/#variables", 
            "text": "Attributes[Variables] := {Protected}", 
            "title": "Variables"
        }, 
        {
            "location": "/builtin/power/variables/#simple-examples", 
            "text": "In [ 1 ] :=   Variables [( x   +   y   +   y ^ 2 )]  Out [ 1 ] =   { x ,   y }   In [ 2 ] :=   Variables [( w ^ w   +   x ^ y   +   z )]  Out [ 2 ] =   { w ^ w ,   x ^ y ,   z }   In [ 3 ] :=   Variables [( a ^ 2   *   b ^ (( 2   *   c )   +   ( 2   *   d )))]  Out [ 3 ] =   { a ,   b ^ c ,   b ^ d }", 
            "title": "Simple examples"
        }, 
        {
            "location": "/builtin/power/polynomialgcd/", 
            "text": "PolynomialGCD\n\n\nPolynomialGCD[a, b]\n calculates the polynomial GCD of \na\n and \nb\n.\n\n\nAttributes[PolynomialGCD] := {Listable, Protected}\n\n\nSimple examples\n\n\nIn\n[\n1\n]\n:=\n \nPolynomialGCD\n[(\n15\n \n+\n \n(\n13\n \n*\n \na\n)\n \n+\n \n(\n2\n \n*\n \na\n^\n2\n)),\n \n(\n10\n \n+\n \n(\n7\n \n*\n \na\n)\n \n+\n \na\n^\n2\n)]\n\n\nOut\n[\n1\n]\n=\n \n(\n5\n \n+\n \na\n)\n\n\n\n\n\n\nIn\n[\n2\n]\n:=\n \nPolynomialGCD\n[(\n15\n \n+\n \n(\n13\n \n*\n \na\n)\n \n+\n \n(\n5\n \n*\n \na\n^\n2\n)\n \n+\n \n(\n2\n \n*\n \na\n^\n3\n)),\n \n(\n10\n \n+\n \n(\n7\n \n*\n \na\n)\n \n+\n \n(\n3\n \n*\n \na\n^\n2\n)\n \n+\n \na\n^\n3\n)]\n\n\nOut\n[\n2\n]\n=\n \n(\n5\n \n+\n \na\n \n+\n \na\n^\n2\n)\n\n\n\n\n\n\nIn\n[\n3\n]\n:=\n \nPolynomialGCD\n[(\n15\n \n+\n \n((\n13\n \n*\n \na\n)\n \n+\n \n(\na\n^\n2\n \n*\n \n-\n1\n)\n \n+\n \n((\n2\n \n*\n \na\n^\n3\n)\n \n*\n \n-\n1\n))),\n \n(\n5\n \n+\n \n(\na\n \n+\n \n(\na\n^\n2\n \n*\n \n-\n1\n)))]\n\n\nOut\n[\n3\n]\n=\n \n(\n-\n5\n \n+\n \n(\na\n \n*\n \n-\n1\n)\n \n+\n \na\n^\n2\n)", 
            "title": "PolynomialGCD "
        }, 
        {
            "location": "/builtin/power/polynomialgcd/#polynomialgcd", 
            "text": "PolynomialGCD[a, b]  calculates the polynomial GCD of  a  and  b .  Attributes[PolynomialGCD] := {Listable, Protected}", 
            "title": "PolynomialGCD"
        }, 
        {
            "location": "/builtin/power/polynomialgcd/#simple-examples", 
            "text": "In [ 1 ] :=   PolynomialGCD [( 15   +   ( 13   *   a )   +   ( 2   *   a ^ 2 )),   ( 10   +   ( 7   *   a )   +   a ^ 2 )]  Out [ 1 ] =   ( 5   +   a )   In [ 2 ] :=   PolynomialGCD [( 15   +   ( 13   *   a )   +   ( 5   *   a ^ 2 )   +   ( 2   *   a ^ 3 )),   ( 10   +   ( 7   *   a )   +   ( 3   *   a ^ 2 )   +   a ^ 3 )]  Out [ 2 ] =   ( 5   +   a   +   a ^ 2 )   In [ 3 ] :=   PolynomialGCD [( 15   +   (( 13   *   a )   +   ( a ^ 2   *   - 1 )   +   (( 2   *   a ^ 3 )   *   - 1 ))),   ( 5   +   ( a   +   ( a ^ 2   *   - 1 )))]  Out [ 3 ] =   ( - 5   +   ( a   *   - 1 )   +   a ^ 2 )", 
            "title": "Simple examples"
        }, 
        {
            "location": "/builtin/power/squarefreeq/", 
            "text": "SquareFreeQ\n\n\nSquareFreeQ[expr]\n returns True if \nexpr\n is a square-free polynomial.\n\n\nAttributes[SquareFreeQ] := {Protected, ReadProtected}\n\n\nSimple examples\n\n\nIn\n[\n1\n]\n:=\n \nSquareFreeQ\n[\nExpand\n[((\nx\n \n+\n \n1\n)\n \n*\n \n(\nx\n \n+\n \n2\n)\n^\n2\n)]]\n\n\nOut\n[\n1\n]\n=\n \nFalse\n\n\n\n\n\n\nIn\n[\n2\n]\n:=\n \nSquareFreeQ\n[((\nx\n \n+\n \n1\n)\n \n*\n \n(\nx\n \n+\n \n2\n))]\n\n\nOut\n[\n2\n]\n=\n \nTrue\n\n\n\n\n\n\nIn\n[\n3\n]\n:=\n \nSquareFreeQ\n[\nExpand\n[(((\n2\n \n*\n \nx\n)\n \n+\n \n3\n)\n \n*\n \n(\nx\n \n+\n \n2\n))]]\n\n\nOut\n[\n3\n]\n=\n \nTrue\n\n\n\n\n\n\nIn\n[\n4\n]\n:=\n \nSquareFreeQ\n[((\n2\n \n*\n \nx\n)\n \n+\n \n3\n)\n^\n2\n]\n\n\nOut\n[\n4\n]\n=\n \nFalse", 
            "title": "SquareFreeQ "
        }, 
        {
            "location": "/builtin/power/squarefreeq/#squarefreeq", 
            "text": "SquareFreeQ[expr]  returns True if  expr  is a square-free polynomial.  Attributes[SquareFreeQ] := {Protected, ReadProtected}", 
            "title": "SquareFreeQ"
        }, 
        {
            "location": "/builtin/power/squarefreeq/#simple-examples", 
            "text": "In [ 1 ] :=   SquareFreeQ [ Expand [(( x   +   1 )   *   ( x   +   2 ) ^ 2 )]]  Out [ 1 ] =   False   In [ 2 ] :=   SquareFreeQ [(( x   +   1 )   *   ( x   +   2 ))]  Out [ 2 ] =   True   In [ 3 ] :=   SquareFreeQ [ Expand [((( 2   *   x )   +   3 )   *   ( x   +   2 ))]]  Out [ 3 ] =   True   In [ 4 ] :=   SquareFreeQ [(( 2   *   x )   +   3 ) ^ 2 ]  Out [ 4 ] =   False", 
            "title": "Simple examples"
        }, 
        {
            "location": "/builtin/power/factorsquarefree/", 
            "text": "FactorSquareFree\n\n\nFactorSquareFree[poly]\n computes the square free factorization of \npoly\n.\n\n\nAttributes[FactorSquareFree] := {Listable, Protected}\n\n\nSimple examples\n\n\nIn\n[\n1\n]\n:=\n \nFactorSquareFree\n[(\n1\n \n+\n \n((\n2\n \n*\n \nx\n^\n2\n)\n \n*\n \n-\n1\n)\n \n+\n \nx\n^\n4\n)]\n\n\nOut\n[\n1\n]\n=\n \n(\n-\n1\n \n+\n \nx\n^\n2\n)\n^\n2\n\n\n\n\n\n\nIn\n[\n2\n]\n:=\n \nFactorSquareFree\n[(\n1\n \n+\n \n(\nx\n^\n2\n \n*\n \n-\n1\n)\n \n+\n \n(\nx\n^\n3\n \n*\n \n-\n1\n)\n \n+\n \nx\n^\n5\n)]\n\n\nOut\n[\n2\n]\n=\n \n((\n-\n1\n \n+\n \nx\n)\n^\n2\n \n*\n \n(\n1\n \n+\n \n(\n2\n \n*\n \nx\n)\n \n+\n \n(\n2\n \n*\n \nx\n^\n2\n)\n \n+\n \nx\n^\n3\n))\n\n\n\n\n\n\nIn\n[\n3\n]\n:=\n \nFactorSquareFree\n[(\n18\n \n+\n \n((\n39\n \n*\n \nx\n)\n \n*\n \n-\n1\n)\n \n+\n \n((\n29\n \n*\n \nx\n^\n2\n)\n \n+\n \n((\n9\n \n*\n \nx\n^\n3\n)\n \n*\n \n-\n1\n))\n \n+\n \nx\n^\n4\n)]\n\n\nOut\n[\n3\n]\n=\n \n((\n-\n3\n \n+\n \nx\n)\n^\n2\n \n*\n \n(\n2\n \n+\n \n((\n3\n \n*\n \nx\n)\n \n*\n \n-\n1\n)\n \n+\n \nx\n^\n2\n))\n\n\n\n\n\n\nIn\n[\n4\n]\n:=\n \nFactorSquareFree\n[(\n-\n108\n \n+\n \n((\n108\n \n*\n \nx\n)\n \n*\n \n-\n1\n)\n \n+\n \n(\n207\n \n*\n \nx\n^\n2\n)\n \n+\n \n((\n239\n \n*\n \nx\n^\n3\n)\n \n+\n \n((\n81\n \n*\n \nx\n^\n4\n)\n \n*\n \n-\n1\n)\n \n+\n \n((\n153\n \n*\n \nx\n^\n5\n)\n \n*\n \n-\n1\n)\n \n+\n \n((\n27\n \n*\n \nx\n^\n6\n)\n \n*\n \n-\n1\n))\n \n+\n \n(\n21\n \n*\n \nx\n^\n7\n)\n \n+\n \n(\n9\n \n*\n \nx\n^\n8\n)\n \n+\n \nx\n^\n9\n)]\n\n\nOut\n[\n4\n]\n=\n \n((\n3\n \n+\n \nx\n)\n^\n3\n \n*\n \n(\n-\n4\n \n+\n \nx\n^\n2\n)\n \n*\n \n(\n-\n1\n \n+\n \nx\n^\n2\n)\n^\n2\n)", 
            "title": "FactorSquareFree "
        }, 
        {
            "location": "/builtin/power/factorsquarefree/#factorsquarefree", 
            "text": "FactorSquareFree[poly]  computes the square free factorization of  poly .  Attributes[FactorSquareFree] := {Listable, Protected}", 
            "title": "FactorSquareFree"
        }, 
        {
            "location": "/builtin/power/factorsquarefree/#simple-examples", 
            "text": "In [ 1 ] :=   FactorSquareFree [( 1   +   (( 2   *   x ^ 2 )   *   - 1 )   +   x ^ 4 )]  Out [ 1 ] =   ( - 1   +   x ^ 2 ) ^ 2   In [ 2 ] :=   FactorSquareFree [( 1   +   ( x ^ 2   *   - 1 )   +   ( x ^ 3   *   - 1 )   +   x ^ 5 )]  Out [ 2 ] =   (( - 1   +   x ) ^ 2   *   ( 1   +   ( 2   *   x )   +   ( 2   *   x ^ 2 )   +   x ^ 3 ))   In [ 3 ] :=   FactorSquareFree [( 18   +   (( 39   *   x )   *   - 1 )   +   (( 29   *   x ^ 2 )   +   (( 9   *   x ^ 3 )   *   - 1 ))   +   x ^ 4 )]  Out [ 3 ] =   (( - 3   +   x ) ^ 2   *   ( 2   +   (( 3   *   x )   *   - 1 )   +   x ^ 2 ))   In [ 4 ] :=   FactorSquareFree [( - 108   +   (( 108   *   x )   *   - 1 )   +   ( 207   *   x ^ 2 )   +   (( 239   *   x ^ 3 )   +   (( 81   *   x ^ 4 )   *   - 1 )   +   (( 153   *   x ^ 5 )   *   - 1 )   +   (( 27   *   x ^ 6 )   *   - 1 ))   +   ( 21   *   x ^ 7 )   +   ( 9   *   x ^ 8 )   +   x ^ 9 )]  Out [ 4 ] =   (( 3   +   x ) ^ 3   *   ( - 4   +   x ^ 2 )   *   ( - 1   +   x ^ 2 ) ^ 2 )", 
            "title": "Simple examples"
        }, 
        {
            "location": "/builtin/random/", 
            "text": "random documentation\n\n\nRandomReal\n\n\nSeedRandom", 
            "title": "random"
        }, 
        {
            "location": "/builtin/random/#random-documentation", 
            "text": "RandomReal  SeedRandom", 
            "title": "random documentation"
        }, 
        {
            "location": "/builtin/random/randomreal/", 
            "text": "RandomReal\n\n\nRandomReal[]\n generates a random floating point from 0 to 1.\n\n\nRandomReal[max]\n generates a random floating point from 0 to \nmax\n.\n\n\nRandomReal[min, max]\n generates a random floating point from \nmin\n to `max.\n\n\nAttributes[RandomReal] := {Protected}\n\n\nDetails\n\n\nSeedRandom[UnixTime[]]\n is called automatically upon initialization of Expreduce, so random number sequences will not repeat over subsequent sessions.\n\n\nSimple examples\n\n\nIn\n[\n1\n]\n:=\n \nRandomReal\n[]\n\n\nOut\n[\n1\n]\n=\n \n0.0750914\n\n\n\n\n\n\nFurther examples\n\n\nUse \nSeedRandom\n to seed the RNG:\n\n\nIn\n[\n1\n]\n:=\n \nSeedRandom\n[\n3\n]\n\n\nOut\n[\n1\n]\n=\n \nNull\n\n\n\n\n\n\nIn\n[\n2\n]\n:=\n \nRandomReal\n[]\n\n\nOut\n[\n2\n]\n=\n \n0.719983\n\n\n\n\n\n\nIn\n[\n3\n]\n:=\n \nRandomReal\n[]\n\n\nOut\n[\n3\n]\n=\n \n0.652631\n\n\n\n\n\n\nIn\n[\n4\n]\n:=\n \nSeedRandom\n[\n3\n]\n\n\nOut\n[\n4\n]\n=\n \nNull\n\n\n\n\n\n\nIn\n[\n5\n]\n:=\n \nRandomReal\n[]\n\n\nOut\n[\n5\n]\n=\n \n0.719983", 
            "title": "RandomReal "
        }, 
        {
            "location": "/builtin/random/randomreal/#randomreal", 
            "text": "RandomReal[]  generates a random floating point from 0 to 1.  RandomReal[max]  generates a random floating point from 0 to  max .  RandomReal[min, max]  generates a random floating point from  min  to `max.  Attributes[RandomReal] := {Protected}", 
            "title": "RandomReal"
        }, 
        {
            "location": "/builtin/random/randomreal/#details", 
            "text": "SeedRandom[UnixTime[]]  is called automatically upon initialization of Expreduce, so random number sequences will not repeat over subsequent sessions.", 
            "title": "Details"
        }, 
        {
            "location": "/builtin/random/randomreal/#simple-examples", 
            "text": "In [ 1 ] :=   RandomReal []  Out [ 1 ] =   0.0750914", 
            "title": "Simple examples"
        }, 
        {
            "location": "/builtin/random/randomreal/#further-examples", 
            "text": "Use  SeedRandom  to seed the RNG:  In [ 1 ] :=   SeedRandom [ 3 ]  Out [ 1 ] =   Null   In [ 2 ] :=   RandomReal []  Out [ 2 ] =   0.719983   In [ 3 ] :=   RandomReal []  Out [ 3 ] =   0.652631   In [ 4 ] :=   SeedRandom [ 3 ]  Out [ 4 ] =   Null   In [ 5 ] :=   RandomReal []  Out [ 5 ] =   0.719983", 
            "title": "Further examples"
        }, 
        {
            "location": "/builtin/random/seedrandom/", 
            "text": "SeedRandom\n\n\nSeedRandom[seed]\n seeds the internal random number generator with a given integer \nseed\n.\n\n\nAttributes[SeedRandom] := {Protected}\n\n\nDetails\n\n\nSeedRandom[UnixTime[]]\n is called automatically upon initialization of Expreduce, so random number sequences will not repeat over subsequent sessions.\n\n\nSimple examples\n\n\nIn\n[\n1\n]\n:=\n \nRandomReal\n[]\n\n\nOut\n[\n1\n]\n=\n \n0.0750914\n\n\n\n\n\n\nIn\n[\n2\n]\n:=\n \nSeedRandom\n[\n3\n]\n\n\nOut\n[\n2\n]\n=\n \nNull\n\n\n\n\n\n\nIn\n[\n3\n]\n:=\n \nRandomReal\n[]\n\n\nOut\n[\n3\n]\n=\n \n0.719983\n\n\n\n\n\n\nIn\n[\n4\n]\n:=\n \nRandomReal\n[]\n\n\nOut\n[\n4\n]\n=\n \n0.652631\n\n\n\n\n\n\nIn\n[\n5\n]\n:=\n \nSeedRandom\n[\n3\n]\n\n\nOut\n[\n5\n]\n=\n \nNull\n\n\n\n\n\n\nIn\n[\n6\n]\n:=\n \nRandomReal\n[]\n\n\nOut\n[\n6\n]\n=\n \n0.719983", 
            "title": "SeedRandom "
        }, 
        {
            "location": "/builtin/random/seedrandom/#seedrandom", 
            "text": "SeedRandom[seed]  seeds the internal random number generator with a given integer  seed .  Attributes[SeedRandom] := {Protected}", 
            "title": "SeedRandom"
        }, 
        {
            "location": "/builtin/random/seedrandom/#details", 
            "text": "SeedRandom[UnixTime[]]  is called automatically upon initialization of Expreduce, so random number sequences will not repeat over subsequent sessions.", 
            "title": "Details"
        }, 
        {
            "location": "/builtin/random/seedrandom/#simple-examples", 
            "text": "In [ 1 ] :=   RandomReal []  Out [ 1 ] =   0.0750914   In [ 2 ] :=   SeedRandom [ 3 ]  Out [ 2 ] =   Null   In [ 3 ] :=   RandomReal []  Out [ 3 ] =   0.719983   In [ 4 ] :=   RandomReal []  Out [ 4 ] =   0.652631   In [ 5 ] :=   SeedRandom [ 3 ]  Out [ 5 ] =   Null   In [ 6 ] :=   RandomReal []  Out [ 6 ] =   0.719983", 
            "title": "Simple examples"
        }, 
        {
            "location": "/builtin/replacement/", 
            "text": "replacement documentation\n\n\nReplaceAll\n\n\nReplace\n\n\nReplaceRepeated\n\n\nRule\n\n\nRuleDelayed", 
            "title": "replacement"
        }, 
        {
            "location": "/builtin/replacement/#replacement-documentation", 
            "text": "ReplaceAll  Replace  ReplaceRepeated  Rule  RuleDelayed", 
            "title": "replacement documentation"
        }, 
        {
            "location": "/builtin/replacement/replaceall/", 
            "text": "ReplaceAll\n\n\nexpr /. rule\n replaces all occurences of the LHS of \nrule\n with the RHS of \nrule\n in \nexpr\n.\n\n\nexpr /. {r1, r2, ...}\n performes the same operation as \nexpr /. rule\n, but evaluating each \nr_n\n in sequence.\n\n\nAttributes[ReplaceAll] := {Protected}\n\n\nSimple examples\n\n\nIn\n[\n1\n]\n:=\n \n((\n2\n^\n(\nx\n^\n2\n \n+\n \n1\n)\n \n+\n \nx\n^\n2\n))\n \n/.\n \n((\nx\n^\n2\n)\n \n-\n \n(\ny\n))\n\n\nOut\n[\n1\n]\n=\n \n(\n2\n^\n(\ny\n \n+\n \n1\n)\n \n+\n \ny\n)\n\n\n\n\n\n\nIf no match is found, \nReplaceAll\n evaluates to an unchanged \nexpr\n:\n\n\nIn\n[\n2\n]\n:=\n \n((\n2\n^\n(\nx\n^\n2\n \n+\n \n1\n)\n \n+\n \nx\n^\n2\n))\n \n/.\n \n((\nz\n^\n2\n)\n \n-\n \n(\ny\n))\n\n\nOut\n[\n2\n]\n=\n \n(\n2\n^\n(\nx\n^\n2\n \n+\n \n1\n)\n \n+\n \nx\n^\n2\n)\n\n\n\n\n\n\nReplaceAll\n works within Orderless expressions as well (such as \nPlus\n):\n\n\nIn\n[\n3\n]\n:=\n \n((\na\n \n+\n \nb\n \n+\n \nc\n \n+\n \nc\n^\n2\n))\n \n/.\n \n(((\nc\n^\n2\n \n+\n \na\n))\n \n-\n \n(\nd\n))\n\n\nOut\n[\n3\n]\n=\n \n(\nb\n \n+\n \nc\n \n+\n \nd\n)\n\n\n\n\n\n\nReplaceAll\n can use named patterns:\n\n\nIn\n[\n4\n]\n:=\n \n((\na\n \n+\n \nb\n \n+\n \nc\n \n+\n \nd\n))\n \n/.\n \n(((\nx_Symbol\n \n+\n \ny_Symbol\n))\n \n-\n \n(\nx\n^\ny\n))\n\n\nOut\n[\n4\n]\n=\n \n(\na\n^\nb\n \n+\n \nc\n \n+\n \nd\n)\n\n\n\n\n\n\nIn\n[\n5\n]\n:=\n \n((\na\n \n+\n \n(\n2\n \n*\n \nb\n)\n \n+\n \n(\n5\n \n*\n \nc\n)))\n \n/.\n \n(((\nc1_Integer\n \n*\n \na_Symbol\n))\n \n-\n \n((\n99\n \n*\n \na\n)))\n\n\nOut\n[\n5\n]\n=\n \n(\na\n \n+\n \n(\n99\n \n*\n \nb\n)\n \n+\n \n(\n99\n \n*\n \nc\n))\n\n\n\n\n\n\nFurther examples\n\n\nReplaceAll\n can be used to replace sequences of expressions:\n\n\nIn\n[\n1\n]\n:=\n \n((\na\n \n+\n \nb\n \n+\n \nc\n \n+\n \nd\n))\n \n/.\n \n(((\na\n \n+\n \namatch___\n))\n \n-\n \n(\nfoo\n[\namatch\n]))\n\n\nOut\n[\n1\n]\n=\n \nfoo\n[\nb\n,\n \nc\n,\n \nd\n]\n\n\n\n\n\n\nThe \nHead\n of functions can be replaced just as the subexpressions:\n\n\nIn\n[\n2\n]\n:=\n \n((\nx\n \n+\n \n2\n)[\n5\n,\n \n6\n])\n \n/.\n \n(((\n2\n \n+\n \nx\n))\n \n-\n \n(\nPlus\n))\n\n\nOut\n[\n2\n]\n=\n \n11\n\n\n\n\n\n\nIn\n[\n3\n]\n:=\n \n((\na\n \n*\n \nb\n \n*\n \nc\n \n*\n \nd\n))\n \n/.\n \n((\n_Symbol\n)\n \n-\n \n(\n2\n))\n\n\nOut\n[\n3\n]\n=\n \n2\n[\n2\n,\n \n2\n,\n \n2\n,\n \n2\n]", 
            "title": "ReplaceAll "
        }, 
        {
            "location": "/builtin/replacement/replaceall/#replaceall", 
            "text": "expr /. rule  replaces all occurences of the LHS of  rule  with the RHS of  rule  in  expr .  expr /. {r1, r2, ...}  performes the same operation as  expr /. rule , but evaluating each  r_n  in sequence.  Attributes[ReplaceAll] := {Protected}", 
            "title": "ReplaceAll"
        }, 
        {
            "location": "/builtin/replacement/replaceall/#simple-examples", 
            "text": "In [ 1 ] :=   (( 2 ^ ( x ^ 2   +   1 )   +   x ^ 2 ))   /.   (( x ^ 2 )   -   ( y ))  Out [ 1 ] =   ( 2 ^ ( y   +   1 )   +   y )   If no match is found,  ReplaceAll  evaluates to an unchanged  expr :  In [ 2 ] :=   (( 2 ^ ( x ^ 2   +   1 )   +   x ^ 2 ))   /.   (( z ^ 2 )   -   ( y ))  Out [ 2 ] =   ( 2 ^ ( x ^ 2   +   1 )   +   x ^ 2 )   ReplaceAll  works within Orderless expressions as well (such as  Plus ):  In [ 3 ] :=   (( a   +   b   +   c   +   c ^ 2 ))   /.   ((( c ^ 2   +   a ))   -   ( d ))  Out [ 3 ] =   ( b   +   c   +   d )   ReplaceAll  can use named patterns:  In [ 4 ] :=   (( a   +   b   +   c   +   d ))   /.   ((( x_Symbol   +   y_Symbol ))   -   ( x ^ y ))  Out [ 4 ] =   ( a ^ b   +   c   +   d )   In [ 5 ] :=   (( a   +   ( 2   *   b )   +   ( 5   *   c )))   /.   ((( c1_Integer   *   a_Symbol ))   -   (( 99   *   a )))  Out [ 5 ] =   ( a   +   ( 99   *   b )   +   ( 99   *   c ))", 
            "title": "Simple examples"
        }, 
        {
            "location": "/builtin/replacement/replaceall/#further-examples", 
            "text": "ReplaceAll  can be used to replace sequences of expressions:  In [ 1 ] :=   (( a   +   b   +   c   +   d ))   /.   ((( a   +   amatch___ ))   -   ( foo [ amatch ]))  Out [ 1 ] =   foo [ b ,   c ,   d ]   The  Head  of functions can be replaced just as the subexpressions:  In [ 2 ] :=   (( x   +   2 )[ 5 ,   6 ])   /.   ((( 2   +   x ))   -   ( Plus ))  Out [ 2 ] =   11   In [ 3 ] :=   (( a   *   b   *   c   *   d ))   /.   (( _Symbol )   -   ( 2 ))  Out [ 3 ] =   2 [ 2 ,   2 ,   2 ,   2 ]", 
            "title": "Further examples"
        }, 
        {
            "location": "/builtin/replacement/replace/", 
            "text": "Replace\n\n\nReplace[expr, rules]\n applies \nrules\n to \nexpr\n if they match at the base level.\n\n\nAttributes[Replace] := {Protected}\n\n\nSimple examples\n\n\nIn\n[\n1\n]\n:=\n \nReplace\n[(\na\n \n+\n \nb\n),\n \n((\na\n \n+\n \nb\n))\n \n-\n \n(\n2\n)]\n\n\nOut\n[\n1\n]\n=\n \n2\n\n\n\n\n\n\nIn\n[\n2\n]\n:=\n \nReplace\n[(\na\n \n+\n \nb\n),\n \n(\na\n)\n \n-\n \n(\n2\n)]\n\n\nOut\n[\n2\n]\n=\n \n(\na\n \n+\n \nb\n)\n\n\n\n\n\n\nIn\n[\n3\n]\n:=\n \nReplace\n[(\na\n \n+\n \nb\n),\n \n(\n_\n)\n \n-\n \n(\n2\n)]\n\n\nOut\n[\n3\n]\n=\n \n2\n\n\n\n\n\n\nIn\n[\n4\n]\n:=\n \nReplace\n[(\na\n \n+\n \nb\n),\n \n{((\na\n \n+\n \nb\n))\n \n-\n \n((\nc\n \n+\n \nd\n)),\n \n((\nc\n \n+\n \nd\n))\n \n-\n \n(\n3\n)}]\n\n\nOut\n[\n4\n]\n=\n \n(\nc\n \n+\n \nd\n)", 
            "title": "Replace "
        }, 
        {
            "location": "/builtin/replacement/replace/#replace", 
            "text": "Replace[expr, rules]  applies  rules  to  expr  if they match at the base level.  Attributes[Replace] := {Protected}", 
            "title": "Replace"
        }, 
        {
            "location": "/builtin/replacement/replace/#simple-examples", 
            "text": "In [ 1 ] :=   Replace [( a   +   b ),   (( a   +   b ))   -   ( 2 )]  Out [ 1 ] =   2   In [ 2 ] :=   Replace [( a   +   b ),   ( a )   -   ( 2 )]  Out [ 2 ] =   ( a   +   b )   In [ 3 ] :=   Replace [( a   +   b ),   ( _ )   -   ( 2 )]  Out [ 3 ] =   2   In [ 4 ] :=   Replace [( a   +   b ),   {(( a   +   b ))   -   (( c   +   d )),   (( c   +   d ))   -   ( 3 )}]  Out [ 4 ] =   ( c   +   d )", 
            "title": "Simple examples"
        }, 
        {
            "location": "/builtin/replacement/replacerepeated/", 
            "text": "ReplaceRepeated\n\n\nexpr //. rule\n replaces all occurences of the LHS of \nrule\n with the RHS of \nrule\n in \nexpr\n repeatedly until the expression stabilizes.\n\n\nexpr //. {r1, r2, ...}\n performes the same operation as \nexpr //. rule\n, but evaluating each \nr_n\n in sequence.\n\n\nAttributes[ReplaceRepeated] := {Protected}\n\n\nSimple examples\n\n\nReplaceRepeated\n can be used to implement logarithm expansion:\n\n\nIn\n[\n1\n]\n:=\n \n(\nlogRules\n)\n \n:=\n \n({(\nLog\n[(\nx_\n \n*\n \ny_\n)])\n \n:\n \n((\nLog\n[\nx\n]\n \n+\n \nLog\n[\ny\n])),\n \n(\nLog\n[\nx_\n^\nk_\n])\n \n:\n \n((\nk\n \n*\n \nLog\n[\nx\n]))})\n\n\nOut\n[\n1\n]\n=\n \nNull\n\n\n\n\n\n\nIn\n[\n2\n]\n:=\n \n(\nLog\n[(\na\n^\nb\n \n*\n \nb\n^\nc\n^\nd\n)])\n \n//.\n \n(\nlogRules\n)\n\n\nOut\n[\n2\n]\n=\n \n((\nb\n \n*\n \nLog\n[\na\n])\n \n+\n \n(\nc\n^\nd\n \n*\n \nLog\n[\nb\n]))", 
            "title": "ReplaceRepeated "
        }, 
        {
            "location": "/builtin/replacement/replacerepeated/#replacerepeated", 
            "text": "expr //. rule  replaces all occurences of the LHS of  rule  with the RHS of  rule  in  expr  repeatedly until the expression stabilizes.  expr //. {r1, r2, ...}  performes the same operation as  expr //. rule , but evaluating each  r_n  in sequence.  Attributes[ReplaceRepeated] := {Protected}", 
            "title": "ReplaceRepeated"
        }, 
        {
            "location": "/builtin/replacement/replacerepeated/#simple-examples", 
            "text": "ReplaceRepeated  can be used to implement logarithm expansion:  In [ 1 ] :=   ( logRules )   :=   ({( Log [( x_   *   y_ )])   :   (( Log [ x ]   +   Log [ y ])),   ( Log [ x_ ^ k_ ])   :   (( k   *   Log [ x ]))})  Out [ 1 ] =   Null   In [ 2 ] :=   ( Log [( a ^ b   *   b ^ c ^ d )])   //.   ( logRules )  Out [ 2 ] =   (( b   *   Log [ a ])   +   ( c ^ d   *   Log [ b ]))", 
            "title": "Simple examples"
        }, 
        {
            "location": "/builtin/replacement/rule/", 
            "text": "Rule\n\n\nlhs -\n rhs\n can be used in replacement functions to say that instances of \nlhs\n should be replaced with \nrhs\n.\n\n\nAttributes[Rule] := {Protected, SequenceHold}\n\n\nSimple examples\n\n\nIn\n[\n1\n]\n:=\n \n((\n2\n^\n(\nx\n^\n2\n \n+\n \n1\n)\n \n+\n \nx\n^\n2\n))\n \n/.\n \n((\nx\n^\n2\n)\n \n-\n \n(\ny\n))\n\n\nOut\n[\n1\n]\n=\n \n(\n2\n^\n(\ny\n \n+\n \n1\n)\n \n+\n \ny\n)\n\n\n\n\n\n\nTo demonstrate the difference between \nRule\n and \nRuleDelayed\n:\n\n\nIn\n[\n2\n]\n:=\n \nApply\n[\nEqual\n,\n \n({\n1\n,\n \n1\n})\n \n/.\n \n((\n1\n)\n \n-\n \n(\nRandomReal\n[]))]\n\n\nOut\n[\n2\n]\n=\n \nTrue\n\n\n\n\n\n\nIn\n[\n3\n]\n:=\n \nApply\n[\nEqual\n,\n \n({\n1\n,\n \n1\n})\n \n/.\n \n((\n1\n)\n \n:\n \n(\nRandomReal\n[]))]\n\n\nOut\n[\n3\n]\n=\n \nFalse", 
            "title": "Rule "
        }, 
        {
            "location": "/builtin/replacement/rule/#rule", 
            "text": "lhs -  rhs  can be used in replacement functions to say that instances of  lhs  should be replaced with  rhs .  Attributes[Rule] := {Protected, SequenceHold}", 
            "title": "Rule"
        }, 
        {
            "location": "/builtin/replacement/rule/#simple-examples", 
            "text": "In [ 1 ] :=   (( 2 ^ ( x ^ 2   +   1 )   +   x ^ 2 ))   /.   (( x ^ 2 )   -   ( y ))  Out [ 1 ] =   ( 2 ^ ( y   +   1 )   +   y )   To demonstrate the difference between  Rule  and  RuleDelayed :  In [ 2 ] :=   Apply [ Equal ,   ({ 1 ,   1 })   /.   (( 1 )   -   ( RandomReal []))]  Out [ 2 ] =   True   In [ 3 ] :=   Apply [ Equal ,   ({ 1 ,   1 })   /.   (( 1 )   :   ( RandomReal []))]  Out [ 3 ] =   False", 
            "title": "Simple examples"
        }, 
        {
            "location": "/builtin/replacement/ruledelayed/", 
            "text": "RuleDelayed\n\n\nlhs :\n rhs\n can be used in replacement functions to say that instances of \nlhs\n should be replaced with \nrhs\n, evaluating \nrhs\n only after replacement.\n\n\nAttributes[RuleDelayed] := {HoldRest, Protected, SequenceHold}\n\n\nSimple examples\n\n\nIn\n[\n1\n]\n:=\n \n((\n2\n^\n(\nx\n^\n2\n \n+\n \n1\n)\n \n+\n \nx\n^\n2\n))\n \n/.\n \n((\nx\n^\n2\n)\n \n:\n \n(\ny\n))\n\n\nOut\n[\n1\n]\n=\n \n(\n2\n^\n(\ny\n \n+\n \n1\n)\n \n+\n \ny\n)\n\n\n\n\n\n\nTo demonstrate the difference between \nRule\n and \nRuleDelayed\n:\n\n\nIn\n[\n2\n]\n:=\n \nApply\n[\nEqual\n,\n \n({\n1\n,\n \n1\n})\n \n/.\n \n((\n1\n)\n \n-\n \n(\nRandomReal\n[]))]\n\n\nOut\n[\n2\n]\n=\n \nTrue\n\n\n\n\n\n\nIn\n[\n3\n]\n:=\n \nApply\n[\nEqual\n,\n \n({\n1\n,\n \n1\n})\n \n/.\n \n((\n1\n)\n \n:\n \n(\nRandomReal\n[]))]\n\n\nOut\n[\n3\n]\n=\n \nFalse", 
            "title": "RuleDelayed "
        }, 
        {
            "location": "/builtin/replacement/ruledelayed/#ruledelayed", 
            "text": "lhs :  rhs  can be used in replacement functions to say that instances of  lhs  should be replaced with  rhs , evaluating  rhs  only after replacement.  Attributes[RuleDelayed] := {HoldRest, Protected, SequenceHold}", 
            "title": "RuleDelayed"
        }, 
        {
            "location": "/builtin/replacement/ruledelayed/#simple-examples", 
            "text": "In [ 1 ] :=   (( 2 ^ ( x ^ 2   +   1 )   +   x ^ 2 ))   /.   (( x ^ 2 )   :   ( y ))  Out [ 1 ] =   ( 2 ^ ( y   +   1 )   +   y )   To demonstrate the difference between  Rule  and  RuleDelayed :  In [ 2 ] :=   Apply [ Equal ,   ({ 1 ,   1 })   /.   (( 1 )   -   ( RandomReal []))]  Out [ 2 ] =   True   In [ 3 ] :=   Apply [ Equal ,   ({ 1 ,   1 })   /.   (( 1 )   :   ( RandomReal []))]  Out [ 3 ] =   False", 
            "title": "Simple examples"
        }, 
        {
            "location": "/builtin/sort/", 
            "text": "sort documentation\n\n\nSort\n\n\nOrder", 
            "title": "sort"
        }, 
        {
            "location": "/builtin/sort/#sort-documentation", 
            "text": "Sort  Order", 
            "title": "sort documentation"
        }, 
        {
            "location": "/builtin/sort/sort/", 
            "text": "Sort\n\n\nSort[list]\n sorts the elements in list according to \nOrder\n.\n\n\nAttributes[Sort] := {Protected}\n\n\nSimple examples\n\n\nSort a list of numbers:\n\n\nIn\n[\n1\n]\n:=\n \nSort\n[{\n6\n,\n \n2\n,\n \n3.2\n,\n \n-\n5.1\n}]\n\n\nOut\n[\n1\n]\n=\n \n{\n-\n5.1\n,\n \n2\n,\n \n3.2\n,\n \n6\n}\n\n\n\n\n\n\nSort a list of strings:\n\n\nIn\n[\n2\n]\n:=\n \nSort\n[{\nhello\n,\n \na\n,\n \naa\n,\n \nzzz\n}]\n\n\nOut\n[\n2\n]\n=\n \n{\na\n,\n \naa\n,\n \nhello\n,\n \nzzz\n}\n\n\n\n\n\n\nSort a list of symbols:\n\n\nIn\n[\n3\n]\n:=\n \nSort\n[{\nd\n,\n \na\n,\n \nb\n,\n \nc\n}]\n\n\nOut\n[\n3\n]\n=\n \n{\na\n,\n \nb\n,\n \nc\n,\n \nd\n}\n\n\n\n\n\n\nSort a list of heterogenous expressions:\n\n\nIn\n[\n4\n]\n:=\n \nSort\n[{\n5\n,\n \nh\n,\n \nfoo\n[\ny\n,\n \n2\n],\n \nbar\n[\na\n^\nx\n]}]\n\n\nOut\n[\n4\n]\n=\n \n{\n5\n,\n \nh\n,\n \nbar\n[\na\n^\nx\n],\n \nfoo\n[\ny\n,\n \n2\n]}\n\n\n\n\n\n\nFurther examples\n\n\nThe object to sort need not be a list:\n\n\nIn\n[\n1\n]\n:=\n \nSort\n[\nfoo\n[\nd\n,\n \na\n,\n \nb\n,\n \nc\n]]\n\n\nOut\n[\n1\n]\n=\n \nfoo\n[\na\n,\n \nb\n,\n \nc\n,\n \nd\n]", 
            "title": "Sort "
        }, 
        {
            "location": "/builtin/sort/sort/#sort", 
            "text": "Sort[list]  sorts the elements in list according to  Order .  Attributes[Sort] := {Protected}", 
            "title": "Sort"
        }, 
        {
            "location": "/builtin/sort/sort/#simple-examples", 
            "text": "Sort a list of numbers:  In [ 1 ] :=   Sort [{ 6 ,   2 ,   3.2 ,   - 5.1 }]  Out [ 1 ] =   { - 5.1 ,   2 ,   3.2 ,   6 }   Sort a list of strings:  In [ 2 ] :=   Sort [{ hello ,   a ,   aa ,   zzz }]  Out [ 2 ] =   { a ,   aa ,   hello ,   zzz }   Sort a list of symbols:  In [ 3 ] :=   Sort [{ d ,   a ,   b ,   c }]  Out [ 3 ] =   { a ,   b ,   c ,   d }   Sort a list of heterogenous expressions:  In [ 4 ] :=   Sort [{ 5 ,   h ,   foo [ y ,   2 ],   bar [ a ^ x ]}]  Out [ 4 ] =   { 5 ,   h ,   bar [ a ^ x ],   foo [ y ,   2 ]}", 
            "title": "Simple examples"
        }, 
        {
            "location": "/builtin/sort/sort/#further-examples", 
            "text": "The object to sort need not be a list:  In [ 1 ] :=   Sort [ foo [ d ,   a ,   b ,   c ]]  Out [ 1 ] =   foo [ a ,   b ,   c ,   d ]", 
            "title": "Further examples"
        }, 
        {
            "location": "/builtin/sort/order/", 
            "text": "Order\n\n\nOrder[e1, e2]\n returns 1 if \ne1\n should come before \ne2\n in canonical ordering, -1 if it should come after, and 0 if the two expressions are equal.\n\n\nAttributes[Order] := {Protected}\n\n\nSimple examples\n\n\nFind the relative order of symbols:\n\n\nIn\n[\n1\n]\n:=\n \nOrder\n[\na\n,\n \nb\n]\n\n\nOut\n[\n1\n]\n=\n \n1\n\n\n\n\n\n\nIn\n[\n2\n]\n:=\n \nOrder\n[\nb\n,\n \na\n]\n\n\nOut\n[\n2\n]\n=\n \n-\n1\n\n\n\n\n\n\nIn\n[\n3\n]\n:=\n \nOrder\n[\na\n,\n \naa\n]\n\n\nOut\n[\n3\n]\n=\n \n1\n\n\n\n\n\n\nFind the relative order of numbers:\n\n\nIn\n[\n4\n]\n:=\n \nOrder\n[\n2\n,\n \n1.\n]\n\n\nOut\n[\n4\n]\n=\n \n-\n1\n\n\n\n\n\n\nIn\n[\n5\n]\n:=\n \nOrder\n[\n1\n,\n \n2\n]\n\n\nOut\n[\n5\n]\n=\n \n1\n\n\n\n\n\n\nIn\n[\n6\n]\n:=\n \nOrder\n[\n1\n,\n \n1\n]\n\n\nOut\n[\n6\n]\n=\n \n0\n\n\n\n\n\n\nFind the relative order of strings:\n\n\nIn\n[\n7\n]\n:=\n \nOrder\n[\na\n,\n \nb\n]\n\n\nOut\n[\n7\n]\n=\n \n1\n\n\n\n\n\n\nIn\n[\n8\n]\n:=\n \nOrder\n[\nb\n,\n \na\n]\n\n\nOut\n[\n8\n]\n=\n \n-\n1\n\n\n\n\n\n\nFind the relative order of heterogenous types:\n\n\nIn\n[\n9\n]\n:=\n \nOrder\n[\nab\n,\n \n1\n]\n\n\nOut\n[\n9\n]\n=\n \n-\n1\n\n\n\n\n\n\nIn\n[\n10\n]\n:=\n \nOrder\n[\n1\n,\n \nab\n]\n\n\nOut\n[\n10\n]\n=\n \n1\n\n\n\n\n\n\nIn\n[\n11\n]\n:=\n \nOrder\n[\ny\n[\na\n],\n \nx\n]\n\n\nOut\n[\n11\n]\n=\n \n-\n1\n\n\n\n\n\n\nFind the relative order of rationals:\n\n\nIn\n[\n12\n]\n:=\n \nOrder\n[\nRational\n[\n-\n5\n,\n \n3\n],\n \nRational\n[\n-\n4\n,\n \n6\n]]\n\n\nOut\n[\n12\n]\n=\n \n1\n\n\n\n\n\n\nIn\n[\n13\n]\n:=\n \nOrder\n[\nRational\n[\n4\n,\n \n6\n],\n \n0.6\n]\n\n\nOut\n[\n13\n]\n=\n \n-\n1\n\n\n\n\n\n\nIn\n[\n14\n]\n:=\n \nOrder\n[\n0.6\n,\n \nRational\n[\n4\n,\n \n6\n]]\n\n\nOut\n[\n14\n]\n=\n \n1\n\n\n\n\n\n\nIn\n[\n15\n]\n:=\n \nOrder\n[\nRational\n[\n4\n,\n \n6\n],\n \n0.7\n]\n\n\nOut\n[\n15\n]\n=\n \n1\n\n\n\n\n\n\nFind the relative order of expressions:\n\n\nIn\n[\n16\n]\n:=\n \nOrder\n[\nbar\n[\nx\n,\n \ny\n],\n \nbar\n[\nx\n,\n \ny\n]]\n\n\nOut\n[\n16\n]\n=\n \n0\n\n\n\n\n\n\nIn\n[\n17\n]\n:=\n \nOrder\n[\nfizz\n[\nbar\n[\nx\n,\n \ny\n]],\n \nfizz\n[\nbar\n[\nx\n,\n \ny\n,\n \na\n]]]\n\n\nOut\n[\n17\n]\n=\n \n1", 
            "title": "Order "
        }, 
        {
            "location": "/builtin/sort/order/#order", 
            "text": "Order[e1, e2]  returns 1 if  e1  should come before  e2  in canonical ordering, -1 if it should come after, and 0 if the two expressions are equal.  Attributes[Order] := {Protected}", 
            "title": "Order"
        }, 
        {
            "location": "/builtin/sort/order/#simple-examples", 
            "text": "Find the relative order of symbols:  In [ 1 ] :=   Order [ a ,   b ]  Out [ 1 ] =   1   In [ 2 ] :=   Order [ b ,   a ]  Out [ 2 ] =   - 1   In [ 3 ] :=   Order [ a ,   aa ]  Out [ 3 ] =   1   Find the relative order of numbers:  In [ 4 ] :=   Order [ 2 ,   1. ]  Out [ 4 ] =   - 1   In [ 5 ] :=   Order [ 1 ,   2 ]  Out [ 5 ] =   1   In [ 6 ] :=   Order [ 1 ,   1 ]  Out [ 6 ] =   0   Find the relative order of strings:  In [ 7 ] :=   Order [ a ,   b ]  Out [ 7 ] =   1   In [ 8 ] :=   Order [ b ,   a ]  Out [ 8 ] =   - 1   Find the relative order of heterogenous types:  In [ 9 ] :=   Order [ ab ,   1 ]  Out [ 9 ] =   - 1   In [ 10 ] :=   Order [ 1 ,   ab ]  Out [ 10 ] =   1   In [ 11 ] :=   Order [ y [ a ],   x ]  Out [ 11 ] =   - 1   Find the relative order of rationals:  In [ 12 ] :=   Order [ Rational [ - 5 ,   3 ],   Rational [ - 4 ,   6 ]]  Out [ 12 ] =   1   In [ 13 ] :=   Order [ Rational [ 4 ,   6 ],   0.6 ]  Out [ 13 ] =   - 1   In [ 14 ] :=   Order [ 0.6 ,   Rational [ 4 ,   6 ]]  Out [ 14 ] =   1   In [ 15 ] :=   Order [ Rational [ 4 ,   6 ],   0.7 ]  Out [ 15 ] =   1   Find the relative order of expressions:  In [ 16 ] :=   Order [ bar [ x ,   y ],   bar [ x ,   y ]]  Out [ 16 ] =   0   In [ 17 ] :=   Order [ fizz [ bar [ x ,   y ]],   fizz [ bar [ x ,   y ,   a ]]]  Out [ 17 ] =   1", 
            "title": "Simple examples"
        }, 
        {
            "location": "/builtin/system/", 
            "text": "system documentation\n\n\nExpreduceSetLogging\n\n\nExpreduceDefinitionTimes\n\n\nAttributes\n\n\nDefault\n\n\nClear\n\n\nSet\n\n\nSetDelayed\n\n\nTiming\n\n\nPrint\n\n\nMessageName\n\n\nTrace\n\n\nN\n\n\nListable\n\n\nGet\n\n\nModule\n\n\nHash", 
            "title": "system"
        }, 
        {
            "location": "/builtin/system/#system-documentation", 
            "text": "ExpreduceSetLogging  ExpreduceDefinitionTimes  Attributes  Default  Clear  Set  SetDelayed  Timing  Print  MessageName  Trace  N  Listable  Get  Module  Hash", 
            "title": "system documentation"
        }, 
        {
            "location": "/builtin/system/expreducesetlogging/", 
            "text": "ExpreduceSetLogging\n\n\nExpreduceSetLogging[bool, level]\n sets the logging state to \nbool\n and the level to \nlevel\n.\n\n\nAttributes[ExpreduceSetLogging] := {Protected}\n\n\nDetails\n\n\nLogging output prints to the console. There can be a lot of logging output, especially for more complicated pattern matches. Valid levels are \nDebug\n, \nInfo\n, \nNotice\n, \nWarning\n, \nError\n, and \nCritical\n.", 
            "title": "ExpreduceSetLogging "
        }, 
        {
            "location": "/builtin/system/expreducesetlogging/#expreducesetlogging", 
            "text": "ExpreduceSetLogging[bool, level]  sets the logging state to  bool  and the level to  level .  Attributes[ExpreduceSetLogging] := {Protected}", 
            "title": "ExpreduceSetLogging"
        }, 
        {
            "location": "/builtin/system/expreducesetlogging/#details", 
            "text": "Logging output prints to the console. There can be a lot of logging output, especially for more complicated pattern matches. Valid levels are  Debug ,  Info ,  Notice ,  Warning ,  Error , and  Critical .", 
            "title": "Details"
        }, 
        {
            "location": "/builtin/system/expreducedefinitiontimes/", 
            "text": "ExpreduceDefinitionTimes\n\n\nExpreduceDefinitionTimes[]\n prints the time in seconds evaluating various definitions.\n\n\nAttributes[ExpreduceDefinitionTimes] := {Protected}\n\n\nDetails\n\n\nFor timing information to record, debug mode must be enabled through \nExpreduceSetLogging\n.", 
            "title": "ExpreduceDefinitionTimes "
        }, 
        {
            "location": "/builtin/system/expreducedefinitiontimes/#expreducedefinitiontimes", 
            "text": "ExpreduceDefinitionTimes[]  prints the time in seconds evaluating various definitions.  Attributes[ExpreduceDefinitionTimes] := {Protected}", 
            "title": "ExpreduceDefinitionTimes"
        }, 
        {
            "location": "/builtin/system/expreducedefinitiontimes/#details", 
            "text": "For timing information to record, debug mode must be enabled through  ExpreduceSetLogging .", 
            "title": "Details"
        }, 
        {
            "location": "/builtin/system/attributes/", 
            "text": "Attributes\n\n\nAttributes[sym]\n returns a \nList\n of attributes for \nsym\n.\n\n\nAttributes[Attributes] := {HoldAll, Listable, Protected}\n\n\nSimple examples\n\n\nIn\n[\n1\n]\n:=\n \nAttributes\n[\nInfinity\n]\n\n\nOut\n[\n1\n]\n=\n \n{\nProtected\n,\n \nReadProtected\n}\n\n\n\n\n\n\nIn\n[\n2\n]\n:=\n \nAttributes\n[\nAttributes\n]\n\n\nOut\n[\n2\n]\n=\n \n{\nHoldAll\n,\n \nListable\n,\n \nProtected\n}\n\n\n\n\n\n\nIn\n[\n3\n]\n:=\n \nAttributes\n[\nPlus\n]\n\n\nOut\n[\n3\n]\n=\n \n{\nFlat\n,\n \nListable\n,\n \nNumericFunction\n,\n \nOneIdentity\n,\n \nOrderless\n,\n \nProtected\n}\n\n\n\n\n\n\nThe default set of attributes is the empty list:\n\n\nIn\n[\n4\n]\n:=\n \nAttributes\n[\nundefinedSym\n]\n\n\nOut\n[\n4\n]\n=\n \n{}\n\n\n\n\n\n\nFurther examples\n\n\nOnly symbols can have attributes:\n\n\nIn\n[\n1\n]\n:=\n \nAttributes\n[\n2\n]\n\n\nOut\n[\n1\n]\n=\n \nAttributes\n[\n2\n]\n\n\n\n\n\n\nIn\n[\n2\n]\n:=\n \nAttributes\n[\na\n^\n2\n]\n\n\nOut\n[\n2\n]\n=\n \nAttributes\n[\na\n^\n2\n]", 
            "title": "Attributes "
        }, 
        {
            "location": "/builtin/system/attributes/#attributes", 
            "text": "Attributes[sym]  returns a  List  of attributes for  sym .  Attributes[Attributes] := {HoldAll, Listable, Protected}", 
            "title": "Attributes"
        }, 
        {
            "location": "/builtin/system/attributes/#simple-examples", 
            "text": "In [ 1 ] :=   Attributes [ Infinity ]  Out [ 1 ] =   { Protected ,   ReadProtected }   In [ 2 ] :=   Attributes [ Attributes ]  Out [ 2 ] =   { HoldAll ,   Listable ,   Protected }   In [ 3 ] :=   Attributes [ Plus ]  Out [ 3 ] =   { Flat ,   Listable ,   NumericFunction ,   OneIdentity ,   Orderless ,   Protected }   The default set of attributes is the empty list:  In [ 4 ] :=   Attributes [ undefinedSym ]  Out [ 4 ] =   {}", 
            "title": "Simple examples"
        }, 
        {
            "location": "/builtin/system/attributes/#further-examples", 
            "text": "Only symbols can have attributes:  In [ 1 ] :=   Attributes [ 2 ]  Out [ 1 ] =   Attributes [ 2 ]   In [ 2 ] :=   Attributes [ a ^ 2 ]  Out [ 2 ] =   Attributes [ a ^ 2 ]", 
            "title": "Further examples"
        }, 
        {
            "location": "/builtin/system/default/", 
            "text": "Default\n\n\nDefault[sym]\n returns the default value of \nsym\n when used as an \nOptional\n pattern without a default specified.\n\n\nAttributes[Default] := {Protected}\n\n\nSimple examples\n\n\nIn\n[\n1\n]\n:=\n \nDefault\n[\nTimes\n]\n\n\nOut\n[\n1\n]\n=\n \n1\n\n\n\n\n\n\nIn\n[\n2\n]\n:=\n \nDefault\n[\nPlus\n]\n\n\nOut\n[\n2\n]\n=\n \n0", 
            "title": "Default "
        }, 
        {
            "location": "/builtin/system/default/#default", 
            "text": "Default[sym]  returns the default value of  sym  when used as an  Optional  pattern without a default specified.  Attributes[Default] := {Protected}", 
            "title": "Default"
        }, 
        {
            "location": "/builtin/system/default/#simple-examples", 
            "text": "In [ 1 ] :=   Default [ Times ]  Out [ 1 ] =   1   In [ 2 ] :=   Default [ Plus ]  Out [ 2 ] =   0", 
            "title": "Simple examples"
        }, 
        {
            "location": "/builtin/system/clear/", 
            "text": "Clear\n\n\nClear[sym1, sym2, ...]\n clears the symbol definitions from the evaluation context.\n\n\nAttributes[Clear] := {HoldAll, Protected}\n\n\nSimple examples\n\n\nIn\n[\n1\n]\n:=\n \na\n\n\nOut\n[\n1\n]\n=\n \na\n\n\n\n\n\n\nIn\n[\n2\n]\n:=\n \n(\na\n)\n \n=\n \n(\n5\n)\n\n\nOut\n[\n2\n]\n=\n \n5\n\n\n\n\n\n\nIn\n[\n3\n]\n:=\n \n(\nb\n)\n \n=\n \n(\n6\n)\n\n\nOut\n[\n3\n]\n=\n \n6\n\n\n\n\n\n\nIn\n[\n4\n]\n:=\n \n(\nc\n)\n \n=\n \n(\n7\n)\n\n\nOut\n[\n4\n]\n=\n \n7\n\n\n\n\n\n\nIn\n[\n5\n]\n:=\n \na\n\n\nOut\n[\n5\n]\n=\n \n5\n\n\n\n\n\n\nIn\n[\n6\n]\n:=\n \nClear\n[\na\n,\n \n99\n,\n \nb\n]\n\n\nOut\n[\n6\n]\n=\n \nNull\n\n\n\n\n\n\nIn\n[\n7\n]\n:=\n \nHead\n[\na\n]\n\n\nOut\n[\n7\n]\n=\n \nSymbol\n\n\n\n\n\n\nIn\n[\n8\n]\n:=\n \nHead\n[\nb\n]\n\n\nOut\n[\n8\n]\n=\n \nSymbol\n\n\n\n\n\n\nIn\n[\n9\n]\n:=\n \nHead\n[\nc\n]\n\n\nOut\n[\n9\n]\n=\n \nInteger\n\n\n\n\n\n\nIn\n[\n10\n]\n:=\n \nClear\n[\nc\n]\n\n\nOut\n[\n10\n]\n=\n \nNull\n\n\n\n\n\n\nIn\n[\n11\n]\n:=\n \nHead\n[\nc\n]\n\n\nOut\n[\n11\n]\n=\n \nSymbol", 
            "title": "Clear "
        }, 
        {
            "location": "/builtin/system/clear/#clear", 
            "text": "Clear[sym1, sym2, ...]  clears the symbol definitions from the evaluation context.  Attributes[Clear] := {HoldAll, Protected}", 
            "title": "Clear"
        }, 
        {
            "location": "/builtin/system/clear/#simple-examples", 
            "text": "In [ 1 ] :=   a  Out [ 1 ] =   a   In [ 2 ] :=   ( a )   =   ( 5 )  Out [ 2 ] =   5   In [ 3 ] :=   ( b )   =   ( 6 )  Out [ 3 ] =   6   In [ 4 ] :=   ( c )   =   ( 7 )  Out [ 4 ] =   7   In [ 5 ] :=   a  Out [ 5 ] =   5   In [ 6 ] :=   Clear [ a ,   99 ,   b ]  Out [ 6 ] =   Null   In [ 7 ] :=   Head [ a ]  Out [ 7 ] =   Symbol   In [ 8 ] :=   Head [ b ]  Out [ 8 ] =   Symbol   In [ 9 ] :=   Head [ c ]  Out [ 9 ] =   Integer   In [ 10 ] :=   Clear [ c ]  Out [ 10 ] =   Null   In [ 11 ] :=   Head [ c ]  Out [ 11 ] =   Symbol", 
            "title": "Simple examples"
        }, 
        {
            "location": "/builtin/system/set/", 
            "text": "Set\n\n\nlhs = rhs\n sets \nlhs\n to stand for \nrhs\n.\n\n\nAttributes[Set] := {HoldFirst, Protected, SequenceHold}\n\n\nSimple examples\n\n\nIn\n[\n1\n]\n:=\n \nx\n=\n1\n+\n2\n\n\nOut\n[\n1\n]\n=\n \n3\n\n\n\n\n\n\nIn\n[\n2\n]\n:=\n \nx\n\n\nOut\n[\n2\n]\n=\n \n3\n\n\n\n\n\n\nIn\n[\n3\n]\n:=\n \nx\n+\n1\n\n\nOut\n[\n3\n]\n=\n \n4\n\n\n\n\n\n\nIn\n[\n4\n]\n:=\n \nx\n+\n1\n\n\nOut\n[\n4\n]\n=\n \n4\n\n\n\n\n\n\nIn\n[\n5\n]\n:=\n \nx\n=\n1\n+\n2\n\n\nOut\n[\n5\n]\n=\n \n3\n\n\n\n\n\n\nIn\n[\n6\n]\n:=\n \nx\n*\n2\n\n\nOut\n[\n6\n]\n=\n \n6\n\n\n\n\n\n\nIn\n[\n7\n]\n:=\n \nx\n=\nx\n*\n2\n\n\nOut\n[\n7\n]\n=\n \n6\n\n\n\n\n\n\nIn\n[\n8\n]\n:=\n \nx\n=\nx\n*\nx\n\n\nOut\n[\n8\n]\n=\n \n36\n\n\n\n\n\n\nFurther examples\n\n\nSet\n has the \nHoldFirst\n attribute, meaning \nrhs\n is evaluated before assignment:\n\n\nIn\n[\n1\n]\n:=\n \nAttributes\n[\nSet\n]\n\n\nOut\n[\n1\n]\n=\n \n{\nHoldFirst\n,\n \nProtected\n,\n \nSequenceHold\n}\n\n\n\n\n\n\nSetDelayed\n has the \nHoldAll\n attribute, meaning \nrhs\n is not evaluated during assignment:\n\n\nIn\n[\n2\n]\n:=\n \nAttributes\n[\nSetDelayed\n]\n\n\nOut\n[\n2\n]\n=\n \n{\nHoldAll\n,\n \nProtected\n,\n \nSequenceHold\n}", 
            "title": "Set "
        }, 
        {
            "location": "/builtin/system/set/#set", 
            "text": "lhs = rhs  sets  lhs  to stand for  rhs .  Attributes[Set] := {HoldFirst, Protected, SequenceHold}", 
            "title": "Set"
        }, 
        {
            "location": "/builtin/system/set/#simple-examples", 
            "text": "In [ 1 ] :=   x = 1 + 2  Out [ 1 ] =   3   In [ 2 ] :=   x  Out [ 2 ] =   3   In [ 3 ] :=   x + 1  Out [ 3 ] =   4   In [ 4 ] :=   x + 1  Out [ 4 ] =   4   In [ 5 ] :=   x = 1 + 2  Out [ 5 ] =   3   In [ 6 ] :=   x * 2  Out [ 6 ] =   6   In [ 7 ] :=   x = x * 2  Out [ 7 ] =   6   In [ 8 ] :=   x = x * x  Out [ 8 ] =   36", 
            "title": "Simple examples"
        }, 
        {
            "location": "/builtin/system/set/#further-examples", 
            "text": "Set  has the  HoldFirst  attribute, meaning  rhs  is evaluated before assignment:  In [ 1 ] :=   Attributes [ Set ]  Out [ 1 ] =   { HoldFirst ,   Protected ,   SequenceHold }   SetDelayed  has the  HoldAll  attribute, meaning  rhs  is not evaluated during assignment:  In [ 2 ] :=   Attributes [ SetDelayed ]  Out [ 2 ] =   { HoldAll ,   Protected ,   SequenceHold }", 
            "title": "Further examples"
        }, 
        {
            "location": "/builtin/system/setdelayed/", 
            "text": "SetDelayed\n\n\nlhs := rhs\n sets \nlhs\n to stand for \nrhs\n, with \nrhs\n not being evaluated until it is referenced by \nlhs\n.\n\n\nAttributes[SetDelayed] := {HoldAll, Protected, SequenceHold}\n\n\nSimple examples\n\n\nSetDelayed\n can be used to define functions:\n\n\nIn\n[\n1\n]\n:=\n \ntesta\n[\nx_\n]\n \n:=\n \nx\n*\n2\n\n\nOut\n[\n1\n]\n=\n \nNull\n\n\n\n\n\n\nIn\n[\n2\n]\n:=\n \ntesta\n[\nx_Integer\n]\n \n:=\n \nx\n*\n3\n\n\nOut\n[\n2\n]\n=\n \nNull\n\n\n\n\n\n\nIn\n[\n3\n]\n:=\n \ntesta\n[\nx_Real\n]\n \n:=\n \nx\n*\n4\n\n\nOut\n[\n3\n]\n=\n \nNull\n\n\n\n\n\n\nThe more \"specific\" definitions match first:\n\n\nIn\n[\n4\n]\n:=\n \ntesta\n[\n2.\n]\n\n\nOut\n[\n4\n]\n=\n \n8.\n\n\n\n\n\n\nIn\n[\n5\n]\n:=\n \ntesta\n[\n2\n]\n\n\nOut\n[\n5\n]\n=\n \n6\n\n\n\n\n\n\nThere is no specific match for \ntesta[k]\n, so the general case matches:\n\n\nIn\n[\n6\n]\n:=\n \ntesta\n[\nk\n]\n\n\nOut\n[\n6\n]\n=\n \n2\n \n*\n \nk\n\n\n\n\n\n\nFurther examples\n\n\nSet\n has the \nHoldFirst\n attribute, meaning \nrhs\n is evaluated before assignment:\n\n\nIn\n[\n1\n]\n:=\n \nAttributes\n[\nSet\n]\n\n\nOut\n[\n1\n]\n=\n \n{\nHoldFirst\n,\n \nProtected\n,\n \nSequenceHold\n}\n\n\n\n\n\n\nSetDelayed\n has the \nHoldAll\n attribute, meaning \nrhs\n is not evaluated during assignment:\n\n\nIn\n[\n2\n]\n:=\n \nAttributes\n[\nSetDelayed\n]\n\n\nOut\n[\n2\n]\n=\n \n{\nHoldAll\n,\n \nProtected\n,\n \nSequenceHold\n}", 
            "title": "SetDelayed "
        }, 
        {
            "location": "/builtin/system/setdelayed/#setdelayed", 
            "text": "lhs := rhs  sets  lhs  to stand for  rhs , with  rhs  not being evaluated until it is referenced by  lhs .  Attributes[SetDelayed] := {HoldAll, Protected, SequenceHold}", 
            "title": "SetDelayed"
        }, 
        {
            "location": "/builtin/system/setdelayed/#simple-examples", 
            "text": "SetDelayed  can be used to define functions:  In [ 1 ] :=   testa [ x_ ]   :=   x * 2  Out [ 1 ] =   Null   In [ 2 ] :=   testa [ x_Integer ]   :=   x * 3  Out [ 2 ] =   Null   In [ 3 ] :=   testa [ x_Real ]   :=   x * 4  Out [ 3 ] =   Null   The more \"specific\" definitions match first:  In [ 4 ] :=   testa [ 2. ]  Out [ 4 ] =   8.   In [ 5 ] :=   testa [ 2 ]  Out [ 5 ] =   6   There is no specific match for  testa[k] , so the general case matches:  In [ 6 ] :=   testa [ k ]  Out [ 6 ] =   2   *   k", 
            "title": "Simple examples"
        }, 
        {
            "location": "/builtin/system/setdelayed/#further-examples", 
            "text": "Set  has the  HoldFirst  attribute, meaning  rhs  is evaluated before assignment:  In [ 1 ] :=   Attributes [ Set ]  Out [ 1 ] =   { HoldFirst ,   Protected ,   SequenceHold }   SetDelayed  has the  HoldAll  attribute, meaning  rhs  is not evaluated during assignment:  In [ 2 ] :=   Attributes [ SetDelayed ]  Out [ 2 ] =   { HoldAll ,   Protected ,   SequenceHold }", 
            "title": "Further examples"
        }, 
        {
            "location": "/builtin/system/timing/", 
            "text": "Timing\n\n\nTiming[expr]\n returns a \nList\n with the first element being the time in seconds for the evaluation of \nexpr\n, and the second element being the result.\n\n\nAttributes[Timing] := {HoldAll, Protected, SequenceHold}\n\n\nSimple examples\n\n\nIn\n[\n1\n]\n:=\n \nTiming\n[\nSum\n[\na\n,\n \n{\na\n,\n \n100000000\n}]]\n\n\nOut\n[\n1\n]\n=\n \n{\n0.00167509\n,\n \n5000000050000000\n}", 
            "title": "Timing "
        }, 
        {
            "location": "/builtin/system/timing/#timing", 
            "text": "Timing[expr]  returns a  List  with the first element being the time in seconds for the evaluation of  expr , and the second element being the result.  Attributes[Timing] := {HoldAll, Protected, SequenceHold}", 
            "title": "Timing"
        }, 
        {
            "location": "/builtin/system/timing/#simple-examples", 
            "text": "In [ 1 ] :=   Timing [ Sum [ a ,   { a ,   100000000 }]]  Out [ 1 ] =   { 0.00167509 ,   5000000050000000 }", 
            "title": "Simple examples"
        }, 
        {
            "location": "/builtin/system/print/", 
            "text": "Print\n\n\nPrint[expr1, expr2, ...]\n prints the string representation of the expressions to the console and returns \nNull\n.\n\n\nAttributes[Print] := {Protected}", 
            "title": "Print "
        }, 
        {
            "location": "/builtin/system/print/#print", 
            "text": "Print[expr1, expr2, ...]  prints the string representation of the expressions to the console and returns  Null .  Attributes[Print] := {Protected}", 
            "title": "Print"
        }, 
        {
            "location": "/builtin/system/messagename/", 
            "text": "MessageName\n\n\nsym::msg\n references a particular message for \nsym\n.\n\n\nAttributes[MessageName] := {HoldFirst, Protected, ReadProtected}\n\n\nSimple examples\n\n\nMessageName\n is used to store the usage messages of built-in symbols:\n\n\nIn\n[\n1\n]\n:=\n \nMessageName\n[\nMessageName\n,\n \nusage\n]\n\n\nOut\n[\n1\n]\n=\n \n`sym::msg` references a particular message for `sym`.", 
            "title": "MessageName "
        }, 
        {
            "location": "/builtin/system/messagename/#messagename", 
            "text": "sym::msg  references a particular message for  sym .  Attributes[MessageName] := {HoldFirst, Protected, ReadProtected}", 
            "title": "MessageName"
        }, 
        {
            "location": "/builtin/system/messagename/#simple-examples", 
            "text": "MessageName  is used to store the usage messages of built-in symbols:  In [ 1 ] :=   MessageName [ MessageName ,   usage ]  Out [ 1 ] =   `sym::msg` references a particular message for `sym`.", 
            "title": "Simple examples"
        }, 
        {
            "location": "/builtin/system/trace/", 
            "text": "Trace\n\n\nTrace[expr]\n traces the evaluation of \nexpr\n.\n\n\nAttributes[Trace] := {HoldAll, Protected}\n\n\nSimple examples\n\n\nIn\n[\n1\n]\n:=\n \nTrace\n[(\n1\n \n+\n \n2\n)]\n\n\nOut\n[\n1\n]\n=\n \n{(\n1\n \n+\n \n2\n),\n \n3\n}\n\n\n\n\n\n\nIn\n[\n2\n]\n:=\n \nTrace\n[((\n1\n \n+\n \n3\n)\n \n+\n \n2\n)]\n\n\nOut\n[\n2\n]\n=\n \n{{(\n1\n \n+\n \n3\n),\n \n4\n},\n \n(\n4\n \n+\n \n2\n),\n \n6\n}\n\n\n\n\n\n\nIn\n[\n3\n]\n:=\n \nTrace\n[(\n2\n \n+\n \n(\n1\n \n+\n \n3\n))]\n\n\nOut\n[\n3\n]\n=\n \n{{(\n1\n \n+\n \n3\n),\n \n4\n},\n \n(\n2\n \n+\n \n4\n),\n \n6\n}", 
            "title": "Trace "
        }, 
        {
            "location": "/builtin/system/trace/#trace", 
            "text": "Trace[expr]  traces the evaluation of  expr .  Attributes[Trace] := {HoldAll, Protected}", 
            "title": "Trace"
        }, 
        {
            "location": "/builtin/system/trace/#simple-examples", 
            "text": "In [ 1 ] :=   Trace [( 1   +   2 )]  Out [ 1 ] =   {( 1   +   2 ),   3 }   In [ 2 ] :=   Trace [(( 1   +   3 )   +   2 )]  Out [ 2 ] =   {{( 1   +   3 ),   4 },   ( 4   +   2 ),   6 }   In [ 3 ] :=   Trace [( 2   +   ( 1   +   3 ))]  Out [ 3 ] =   {{( 1   +   3 ),   4 },   ( 2   +   4 ),   6 }", 
            "title": "Simple examples"
        }, 
        {
            "location": "/builtin/system/n/", 
            "text": "N\n\n\nN[expr]\n attempts to convert \nexpr\n to a numeric value.\n\n\nAttributes[N] := {Protected}", 
            "title": "N "
        }, 
        {
            "location": "/builtin/system/n/#n", 
            "text": "N[expr]  attempts to convert  expr  to a numeric value.  Attributes[N] := {Protected}", 
            "title": "N"
        }, 
        {
            "location": "/builtin/system/listable/", 
            "text": "Listable\n\n\nListable\n is an attribute that calls for functions to automatically map over lists.\n\n\nAttributes[Listable] := {Protected}\n\n\nSimple examples\n\n\nIn\n[\n1\n]\n:=\n \nBoole\n[{\nTrue\n,\n \nTrue\n,\n \nTrue\n,\n \nFalse\n}]\n\n\nOut\n[\n1\n]\n=\n \n{\n1\n,\n \n1\n,\n \n1\n,\n \n0\n}\n\n\n\n\n\n\nIn\n[\n2\n]\n:=\n \nPositive\n[{\n-\n1\n,\n \n4\n,\n \n5\n}]\n\n\nOut\n[\n2\n]\n=\n \n{\nFalse\n,\n \nTrue\n,\n \nTrue\n}\n\n\n\n\n\n\nIn\n[\n3\n]\n:=\n \nPositive\n[{{\n-\n1\n,\n \n4\n,\n \n5\n}}]\n\n\nOut\n[\n3\n]\n=\n \n{{\nFalse\n,\n \nTrue\n,\n \nTrue\n}}\n\n\n\n\n\n\nIn\n[\n4\n]\n:=\n \nPositive\n[{{\n-\n1\n,\n \n4\n,\n \n5\n},\n \n{\n6\n,\n \n-\n1\n}}]\n\n\nOut\n[\n4\n]\n=\n \n{{\nFalse\n,\n \nTrue\n,\n \nTrue\n},\n \n{\nTrue\n,\n \nFalse\n}}", 
            "title": "Listable "
        }, 
        {
            "location": "/builtin/system/listable/#listable", 
            "text": "Listable  is an attribute that calls for functions to automatically map over lists.  Attributes[Listable] := {Protected}", 
            "title": "Listable"
        }, 
        {
            "location": "/builtin/system/listable/#simple-examples", 
            "text": "In [ 1 ] :=   Boole [{ True ,   True ,   True ,   False }]  Out [ 1 ] =   { 1 ,   1 ,   1 ,   0 }   In [ 2 ] :=   Positive [{ - 1 ,   4 ,   5 }]  Out [ 2 ] =   { False ,   True ,   True }   In [ 3 ] :=   Positive [{{ - 1 ,   4 ,   5 }}]  Out [ 3 ] =   {{ False ,   True ,   True }}   In [ 4 ] :=   Positive [{{ - 1 ,   4 ,   5 },   { 6 ,   - 1 }}]  Out [ 4 ] =   {{ False ,   True ,   True },   { True ,   False }}", 
            "title": "Simple examples"
        }, 
        {
            "location": "/builtin/system/get/", 
            "text": "Get\n\n\nGet[file]\n loads \nfile\n and returns the last expression.\n\n\nAttributes[Get] := {Protected}", 
            "title": "Get "
        }, 
        {
            "location": "/builtin/system/get/#get", 
            "text": "Get[file]  loads  file  and returns the last expression.  Attributes[Get] := {Protected}", 
            "title": "Get"
        }, 
        {
            "location": "/builtin/system/module/", 
            "text": "Module\n\n\nModule[{locals}, expr]\n evaluates \nexpr\n with the local variables \nlocals\n.\n\n\nAttributes[Module] := {HoldAll, Protected}", 
            "title": "Module "
        }, 
        {
            "location": "/builtin/system/module/#module", 
            "text": "Module[{locals}, expr]  evaluates  expr  with the local variables  locals .  Attributes[Module] := {HoldAll, Protected}", 
            "title": "Module"
        }, 
        {
            "location": "/builtin/system/hash/", 
            "text": "Hash\n\n\nHash[expr]\n returns an integer hash of \nexpr\n.\n\n\nAttributes[Hash] := {Protected}", 
            "title": "Hash "
        }, 
        {
            "location": "/builtin/system/hash/#hash", 
            "text": "Hash[expr]  returns an integer hash of  expr .  Attributes[Hash] := {Protected}", 
            "title": "Hash"
        }, 
        {
            "location": "/builtin/trig/", 
            "text": "trig documentation\n\n\nSin\n\n\nCos\n\n\nTan", 
            "title": "trig"
        }, 
        {
            "location": "/builtin/trig/#trig-documentation", 
            "text": "Sin  Cos  Tan", 
            "title": "trig documentation"
        }, 
        {
            "location": "/builtin/trig/sin/", 
            "text": "Sin\n\n\nSin[x]\n is the sine of \nx\n.\n\n\nAttributes[Sin] := {Listable, NumericFunction, Protected}", 
            "title": "Sin "
        }, 
        {
            "location": "/builtin/trig/sin/#sin", 
            "text": "Sin[x]  is the sine of  x .  Attributes[Sin] := {Listable, NumericFunction, Protected}", 
            "title": "Sin"
        }, 
        {
            "location": "/builtin/trig/cos/", 
            "text": "Cos\n\n\nCos[x]\n is the cosine of \nx\n.\n\n\nAttributes[Cos] := {Listable, NumericFunction, Protected}", 
            "title": "Cos "
        }, 
        {
            "location": "/builtin/trig/cos/#cos", 
            "text": "Cos[x]  is the cosine of  x .  Attributes[Cos] := {Listable, NumericFunction, Protected}", 
            "title": "Cos"
        }, 
        {
            "location": "/builtin/trig/tan/", 
            "text": "Tan\n\n\nTan[x]\n is the tangent of \nx\n.\n\n\nAttributes[Tan] := {Listable, NumericFunction, Protected}", 
            "title": "Tan "
        }, 
        {
            "location": "/builtin/trig/tan/#tan", 
            "text": "Tan[x]  is the tangent of  x .  Attributes[Tan] := {Listable, NumericFunction, Protected}", 
            "title": "Tan"
        }, 
        {
            "location": "/builtin/string/", 
            "text": "string documentation\n\n\nToString\n\n\nStringJoin\n\n\nInfix", 
            "title": "string"
        }, 
        {
            "location": "/builtin/string/#string-documentation", 
            "text": "ToString  StringJoin  Infix", 
            "title": "string documentation"
        }, 
        {
            "location": "/builtin/string/tostring/", 
            "text": "ToString\n\n\nToString[expr, form]\n converts \nexpr\n into a string using printing method \nform\n.\n\n\nAttributes[ToString] := {Protected}\n\n\nSimple examples\n\n\nIn\n[\n1\n]\n:=\n \nToString\n[\na\n^\n2\n,\n \nInputForm\n]\n\n\nOut\n[\n1\n]\n=\n \na^2\n\n\n\n\n\n\nIn\n[\n2\n]\n:=\n \nToString\n[\nHello World\n]\n\n\nOut\n[\n2\n]\n=\n \nHello World", 
            "title": "ToString "
        }, 
        {
            "location": "/builtin/string/tostring/#tostring", 
            "text": "ToString[expr, form]  converts  expr  into a string using printing method  form .  Attributes[ToString] := {Protected}", 
            "title": "ToString"
        }, 
        {
            "location": "/builtin/string/tostring/#simple-examples", 
            "text": "In [ 1 ] :=   ToString [ a ^ 2 ,   InputForm ]  Out [ 1 ] =   a^2   In [ 2 ] :=   ToString [ Hello World ]  Out [ 2 ] =   Hello World", 
            "title": "Simple examples"
        }, 
        {
            "location": "/builtin/string/stringjoin/", 
            "text": "StringJoin\n\n\ns1 \n s2 \n ...\n can join a list of strings into a single string.\n\n\nAttributes[StringJoin] := {Flat, OneIdentity, Protected}\n\n\nSimple examples\n\n\nIn\n[\n1\n]\n:=\n \n(\nHello\n \n \n \n \n \nWorld\n)\n\n\nOut\n[\n1\n]\n=\n \nHello World\n\n\n\n\n\n\nIn\n[\n2\n]\n:=\n \n(\nIf a=2, then \n \n \nToString\n[\na\n^\n2\n,\n \nInputForm\n]\n \n \n=\n \n \nToString\n[(\na\n^\n2\n)\n \n/.\n \n((\na\n)\n \n-\n \n(\n2\n)),\n \nInputForm\n])\n\n\nOut\n[\n2\n]\n=\n \nIf a=2, then a^2=4\n\n\n\n\n\n\nFurther examples\n\n\nThe \nStringJoin\n of nothing is the empty string:\n\n\nIn\n[\n1\n]\n:=\n \nStringJoin\n[]\n\n\nOut\n[\n1\n]\n=\n \n\n\n\n\n\n\nIf \nStringJoin\n receives any non-string arguments, the expression does not evaluate:\n\n\nIn\n[\n2\n]\n:=\n \n(\nHello\n \n \n5\n)\n\n\nOut\n[\n2\n]\n=\n \n(\nHello\n \n \n5\n)\n\n\n\n\n\n\nThis function takes \nList\n arguments as well:\n\n\nIn\n[\n3\n]\n:=\n \nStringJoin\n[{\na\n,\n \nb\n,\n \nc\n}]\n\n\nOut\n[\n3\n]\n=\n \nabc", 
            "title": "StringJoin "
        }, 
        {
            "location": "/builtin/string/stringjoin/#stringjoin", 
            "text": "s1   s2   ...  can join a list of strings into a single string.  Attributes[StringJoin] := {Flat, OneIdentity, Protected}", 
            "title": "StringJoin"
        }, 
        {
            "location": "/builtin/string/stringjoin/#simple-examples", 
            "text": "In [ 1 ] :=   ( Hello           World )  Out [ 1 ] =   Hello World   In [ 2 ] :=   ( If a=2, then      ToString [ a ^ 2 ,   InputForm ]     =     ToString [( a ^ 2 )   /.   (( a )   -   ( 2 )),   InputForm ])  Out [ 2 ] =   If a=2, then a^2=4", 
            "title": "Simple examples"
        }, 
        {
            "location": "/builtin/string/stringjoin/#further-examples", 
            "text": "The  StringJoin  of nothing is the empty string:  In [ 1 ] :=   StringJoin []  Out [ 1 ] =     If  StringJoin  receives any non-string arguments, the expression does not evaluate:  In [ 2 ] :=   ( Hello     5 )  Out [ 2 ] =   ( Hello     5 )   This function takes  List  arguments as well:  In [ 3 ] :=   StringJoin [{ a ,   b ,   c }]  Out [ 3 ] =   abc", 
            "title": "Further examples"
        }, 
        {
            "location": "/builtin/string/infix/", 
            "text": "Infix\n\n\nInfix[expr, sep]\n represents \nexpr\n in infix form with separator \nsep\n when converted to a string.\n\n\nAttributes[Infix] := {Protected}\n\n\nSimple examples\n\n\nIn\n[\n1\n]\n:=\n \nToString\n[(\nbar\n|\nfuzz\n|\nzip\n)]\n\n\nOut\n[\n1\n]\n=\n \n(bar|fuzz|zip)", 
            "title": "Infix "
        }, 
        {
            "location": "/builtin/string/infix/#infix", 
            "text": "Infix[expr, sep]  represents  expr  in infix form with separator  sep  when converted to a string.  Attributes[Infix] := {Protected}", 
            "title": "Infix"
        }, 
        {
            "location": "/builtin/string/infix/#simple-examples", 
            "text": "In [ 1 ] :=   ToString [( bar | fuzz | zip )]  Out [ 1 ] =   (bar|fuzz|zip)", 
            "title": "Simple examples"
        }, 
        {
            "location": "/builtin/time/", 
            "text": "time documentation\n\n\nUnixTime", 
            "title": "time"
        }, 
        {
            "location": "/builtin/time/#time-documentation", 
            "text": "UnixTime", 
            "title": "time documentation"
        }, 
        {
            "location": "/builtin/time/unixtime/", 
            "text": "UnixTime\n\n\nUnixTime[]\n returns the integer seconds since the Unix epoch in UTC time.\n\n\nAttributes[UnixTime] := {Protected, ReadProtected}\n\n\nSimple examples\n\n\nGet the current Unix timestamp:\n\n\nIn\n[\n1\n]\n:=\n \nUnixTime\n[]\n\n\nOut\n[\n1\n]\n=\n \n1484805639\n\n\n\n\n\n\nUnixTime\n returns an Integer:\n\n\nIn\n[\n2\n]\n:=\n \nHead\n[\nUnixTime\n[]]\n\n\nOut\n[\n2\n]\n=\n \nInteger", 
            "title": "UnixTime "
        }, 
        {
            "location": "/builtin/time/unixtime/#unixtime", 
            "text": "UnixTime[]  returns the integer seconds since the Unix epoch in UTC time.  Attributes[UnixTime] := {Protected, ReadProtected}", 
            "title": "UnixTime"
        }, 
        {
            "location": "/builtin/time/unixtime/#simple-examples", 
            "text": "Get the current Unix timestamp:  In [ 1 ] :=   UnixTime []  Out [ 1 ] =   1484805639   UnixTime  returns an Integer:  In [ 2 ] :=   Head [ UnixTime []]  Out [ 2 ] =   Integer", 
            "title": "Simple examples"
        }, 
        {
            "location": "/builtin/pattern/", 
            "text": "pattern documentation\n\n\nMatchQ\n\n\nPattern\n\n\nBlank\n\n\nBlankSequence\n\n\nBlankNullSequence\n\n\nExcept\n\n\nPatternTest\n\n\nCondition\n\n\nAlternatives\n\n\nFreeQ\n\n\nReplaceList\n\n\nRepeated\n\n\nOptional", 
            "title": "pattern"
        }, 
        {
            "location": "/builtin/pattern/#pattern-documentation", 
            "text": "MatchQ  Pattern  Blank  BlankSequence  BlankNullSequence  Except  PatternTest  Condition  Alternatives  FreeQ  ReplaceList  Repeated  Optional", 
            "title": "pattern documentation"
        }, 
        {
            "location": "/builtin/pattern/matchq/", 
            "text": "MatchQ\n\n\nMatchQ[expr, form]\n returns True if \nexpr\n matches \nform\n, False otherwise.\n\n\nAttributes[MatchQ] := {Protected}\n\n\nSimple examples\n\n\nA \nBlank[]\n expression matches everything:\n\n\nIn\n[\n1\n]\n:=\n \nMatchQ\n[(\n2\n \n*\n \nx\n),\n \n_\n]\n\n\nOut\n[\n1\n]\n=\n \nTrue\n\n\n\n\n\n\nAlthough a more specific pattern would have matched as well:\n\n\nIn\n[\n2\n]\n:=\n \nMatchQ\n[(\n2\n \n*\n \nx\n),\n \n(\nc1_Integer\n \n*\n \na_Symbol\n)]\n\n\nOut\n[\n2\n]\n=\n \nTrue\n\n\n\n\n\n\nSince \nTimes\n is \nOrderless\n, this would work as well:\n\n\nIn\n[\n3\n]\n:=\n \nMatchQ\n[(\nx\n \n*\n \n2\n),\n \n(\nc1_Integer\n \n*\n \na_Symbol\n)]\n\n\nOut\n[\n3\n]\n=\n \nTrue\n\n\n\n\n\n\nAs would the \nFullForm\n:\n\n\nIn\n[\n4\n]\n:=\n \nMatchQ\n[(\nx\n \n*\n \n2\n),\n \n(\nc1_Integer\n \n*\n \na_Symbol\n)]\n\n\nOut\n[\n4\n]\n=\n \nTrue\n\n\n\n\n\n\nNamed patterns must match the same expression, or the match will fail:\n\n\nIn\n[\n5\n]\n:=\n \nMatchQ\n[(\na\n \n+\n \nb\n),\n \n(\nx_Symbol\n \n+\n \nx_Symbol\n)]\n\n\nOut\n[\n5\n]\n=\n \nFalse\n\n\n\n\n\n\nFurther examples\n\n\nIn\n[\n1\n]\n:=\n \nMatchQ\n[{\n2\n^\na\n,\n \na\n},\n \n{\n2\n^\nx_Symbol\n,\n \nx_Symbol\n}]\n\n\nOut\n[\n1\n]\n=\n \nTrue\n\n\n\n\n\n\nIn\n[\n2\n]\n:=\n \nMatchQ\n[{\n2\n^\na\n,\n \nb\n},\n \n{\n2\n^\nx_Symbol\n,\n \nx_Symbol\n}]\n\n\nOut\n[\n2\n]\n=\n \nFalse\n\n\n\n\n\n\nBlank\n sequences allow for the matching of multiple objects. \nBlankSequence\n (__) matches one or more parts of the expression:\n\n\nIn\n[\n3\n]\n:=\n \nMatchQ\n[{\na\n,\n \nb\n},\n \n{\na\n,\n \n__\n}]\n\n\nOut\n[\n3\n]\n=\n \nTrue\n\n\n\n\n\n\nIn\n[\n4\n]\n:=\n \nMatchQ\n[{\na\n},\n \n{\na\n,\n \n__\n}]\n\n\nOut\n[\n4\n]\n=\n \nFalse\n\n\n\n\n\n\nBlankNullSequence\n (___) allows for zero or more matches:\n\n\nIn\n[\n5\n]\n:=\n \nMatchQ\n[{\na\n},\n \n{\na\n,\n \n___\n}]\n\n\nOut\n[\n5\n]\n=\n \nTrue", 
            "title": "MatchQ "
        }, 
        {
            "location": "/builtin/pattern/matchq/#matchq", 
            "text": "MatchQ[expr, form]  returns True if  expr  matches  form , False otherwise.  Attributes[MatchQ] := {Protected}", 
            "title": "MatchQ"
        }, 
        {
            "location": "/builtin/pattern/matchq/#simple-examples", 
            "text": "A  Blank[]  expression matches everything:  In [ 1 ] :=   MatchQ [( 2   *   x ),   _ ]  Out [ 1 ] =   True   Although a more specific pattern would have matched as well:  In [ 2 ] :=   MatchQ [( 2   *   x ),   ( c1_Integer   *   a_Symbol )]  Out [ 2 ] =   True   Since  Times  is  Orderless , this would work as well:  In [ 3 ] :=   MatchQ [( x   *   2 ),   ( c1_Integer   *   a_Symbol )]  Out [ 3 ] =   True   As would the  FullForm :  In [ 4 ] :=   MatchQ [( x   *   2 ),   ( c1_Integer   *   a_Symbol )]  Out [ 4 ] =   True   Named patterns must match the same expression, or the match will fail:  In [ 5 ] :=   MatchQ [( a   +   b ),   ( x_Symbol   +   x_Symbol )]  Out [ 5 ] =   False", 
            "title": "Simple examples"
        }, 
        {
            "location": "/builtin/pattern/matchq/#further-examples", 
            "text": "In [ 1 ] :=   MatchQ [{ 2 ^ a ,   a },   { 2 ^ x_Symbol ,   x_Symbol }]  Out [ 1 ] =   True   In [ 2 ] :=   MatchQ [{ 2 ^ a ,   b },   { 2 ^ x_Symbol ,   x_Symbol }]  Out [ 2 ] =   False   Blank  sequences allow for the matching of multiple objects.  BlankSequence  (__) matches one or more parts of the expression:  In [ 3 ] :=   MatchQ [{ a ,   b },   { a ,   __ }]  Out [ 3 ] =   True   In [ 4 ] :=   MatchQ [{ a },   { a ,   __ }]  Out [ 4 ] =   False   BlankNullSequence  (___) allows for zero or more matches:  In [ 5 ] :=   MatchQ [{ a },   { a ,   ___ }]  Out [ 5 ] =   True", 
            "title": "Further examples"
        }, 
        {
            "location": "/builtin/pattern/pattern/", 
            "text": "Pattern\n\n\nname{BLANKFORM}\n is equivalent to \nPattern[name, {BLANKFORM}]\n and can be used in pattern matching to refer to the matched expression as \nname\n, where \n{BLANKFORM}\n is one of \n{_, __, ___}\n.\n\n\nname{BLANKFORM}head\n is equivalent to \nPattern[name, {BLANKFORM}head]\n and can be used in pattern matching to refer to the matched expression as \nname\n, where \n{BLANKFORM}\n is one of \n{_, __, ___}\n.\n\n\nAttributes[Pattern] := {HoldFirst, Protected}\n\n\nSimple examples\n\n\nTo demonstrate referencing \nname\n in the replacement RHS:\n\n\nIn\n[\n1\n]\n:=\n \n(\nfoo\n[\n2\n,\n \n1\n])\n \n/.\n \n((\nfoo\n[\na_\n,\n \nb_\n])\n \n-\n \n(\na\n))\n\n\nOut\n[\n1\n]\n=\n \n2\n\n\n\n\n\n\nIf two matches share the same name, they must be equivalent:\n\n\nIn\n[\n2\n]\n:=\n \n(\nfoo\n[\n2\n,\n \n1\n])\n \n/.\n \n((\nfoo\n[\na_\n,\n \na_\n])\n \n-\n \n(\na\n))\n\n\nOut\n[\n2\n]\n=\n \nfoo\n[\n2\n,\n \n1\n]\n\n\n\n\n\n\nIn\n[\n3\n]\n:=\n \n(\nfoo\n[\n2\n,\n \n2\n])\n \n/.\n \n((\nfoo\n[\na_\n,\n \na_\n])\n \n-\n \n(\na\n))\n\n\nOut\n[\n3\n]\n=\n \n2\n\n\n\n\n\n\nTo demonstrate the head matching capability:\n\n\nIn\n[\n4\n]\n:=\n \nMatchQ\n[\n2\n,\n \na_Integer\n]\n\n\nOut\n[\n4\n]\n=\n \nTrue\n\n\n\n\n\n\nIn\n[\n5\n]\n:=\n \nMatchQ\n[\n2\n,\n \na_Real\n]\n\n\nOut\n[\n5\n]\n=\n \nFalse\n\n\n\n\n\n\nFurther examples\n\n\nTo demonstrate patterns matching a sequence of expressions:\n\n\nIn\n[\n1\n]\n:=\n \n(\nfoo\n[\n2\n,\n \n1\n])\n \n/.\n \n((\nfoo\n[\na___Integer\n])\n \n-\n \n(\nbar\n[\na\n]))\n\n\nOut\n[\n1\n]\n=\n \nbar\n[\n2\n,\n \n1\n]", 
            "title": "Pattern "
        }, 
        {
            "location": "/builtin/pattern/pattern/#pattern", 
            "text": "name{BLANKFORM}  is equivalent to  Pattern[name, {BLANKFORM}]  and can be used in pattern matching to refer to the matched expression as  name , where  {BLANKFORM}  is one of  {_, __, ___} .  name{BLANKFORM}head  is equivalent to  Pattern[name, {BLANKFORM}head]  and can be used in pattern matching to refer to the matched expression as  name , where  {BLANKFORM}  is one of  {_, __, ___} .  Attributes[Pattern] := {HoldFirst, Protected}", 
            "title": "Pattern"
        }, 
        {
            "location": "/builtin/pattern/pattern/#simple-examples", 
            "text": "To demonstrate referencing  name  in the replacement RHS:  In [ 1 ] :=   ( foo [ 2 ,   1 ])   /.   (( foo [ a_ ,   b_ ])   -   ( a ))  Out [ 1 ] =   2   If two matches share the same name, they must be equivalent:  In [ 2 ] :=   ( foo [ 2 ,   1 ])   /.   (( foo [ a_ ,   a_ ])   -   ( a ))  Out [ 2 ] =   foo [ 2 ,   1 ]   In [ 3 ] :=   ( foo [ 2 ,   2 ])   /.   (( foo [ a_ ,   a_ ])   -   ( a ))  Out [ 3 ] =   2   To demonstrate the head matching capability:  In [ 4 ] :=   MatchQ [ 2 ,   a_Integer ]  Out [ 4 ] =   True   In [ 5 ] :=   MatchQ [ 2 ,   a_Real ]  Out [ 5 ] =   False", 
            "title": "Simple examples"
        }, 
        {
            "location": "/builtin/pattern/pattern/#further-examples", 
            "text": "To demonstrate patterns matching a sequence of expressions:  In [ 1 ] :=   ( foo [ 2 ,   1 ])   /.   (( foo [ a___Integer ])   -   ( bar [ a ]))  Out [ 1 ] =   bar [ 2 ,   1 ]", 
            "title": "Further examples"
        }, 
        {
            "location": "/builtin/pattern/blank/", 
            "text": "Blank\n\n\n_\n matches any expression.\n\n\n_head\n matches any expression with a \nHead\n of \nhead\n.\n\n\nAttributes[Blank] := {Protected}\n\n\nSimple examples\n\n\nIn\n[\n1\n]\n:=\n \nMatchQ\n[(\na\n \n+\n \nb\n),\n \n_\n]\n\n\nOut\n[\n1\n]\n=\n \nTrue\n\n\n\n\n\n\nIn\n[\n2\n]\n:=\n \nMatchQ\n[\n1\n,\n \n_Integer\n]\n\n\nOut\n[\n2\n]\n=\n \nTrue\n\n\n\n\n\n\nIn\n[\n3\n]\n:=\n \nMatchQ\n[\ns\n,\n \n_Integer\n]\n\n\nOut\n[\n3\n]\n=\n \nFalse\n\n\n\n\n\n\nBlank\n works with nonatomic \nhead\ns:\n\n\nIn\n[\n4\n]\n:=\n \n((\na\n \n*\n \nb\n \n*\n \nc\n \n*\n \nd\n))\n \n/.\n \n((\n_Times\n)\n \n-\n \n(\n2\n))\n\n\nOut\n[\n4\n]\n=\n \n2\n\n\n\n\n\n\nFurther examples\n\n\nFor \nOrderless\n functions, the match engine will attempt to find a match in any order:\n\n\nIn\n[\n1\n]\n:=\n \nMatchQ\n[(\nx\n \n+\n \n3.\n),\n \n(\nc1match_Real\n \n+\n \nmatcha_\n)]\n\n\nOut\n[\n1\n]\n=\n \nTrue", 
            "title": "Blank "
        }, 
        {
            "location": "/builtin/pattern/blank/#blank", 
            "text": "_  matches any expression.  _head  matches any expression with a  Head  of  head .  Attributes[Blank] := {Protected}", 
            "title": "Blank"
        }, 
        {
            "location": "/builtin/pattern/blank/#simple-examples", 
            "text": "In [ 1 ] :=   MatchQ [( a   +   b ),   _ ]  Out [ 1 ] =   True   In [ 2 ] :=   MatchQ [ 1 ,   _Integer ]  Out [ 2 ] =   True   In [ 3 ] :=   MatchQ [ s ,   _Integer ]  Out [ 3 ] =   False   Blank  works with nonatomic  head s:  In [ 4 ] :=   (( a   *   b   *   c   *   d ))   /.   (( _Times )   -   ( 2 ))  Out [ 4 ] =   2", 
            "title": "Simple examples"
        }, 
        {
            "location": "/builtin/pattern/blank/#further-examples", 
            "text": "For  Orderless  functions, the match engine will attempt to find a match in any order:  In [ 1 ] :=   MatchQ [( x   +   3. ),   ( c1match_Real   +   matcha_ )]  Out [ 1 ] =   True", 
            "title": "Further examples"
        }, 
        {
            "location": "/builtin/pattern/blanksequence/", 
            "text": "BlankSequence\n\n\n__\n matches any sequence of one or more expressions.\n\n\n__head\n matches any sequence of one or more expressions, each with a \nHead\n of \nhead\n.\n\n\nAttributes[BlankSequence] := {Protected}\n\n\nSimple examples\n\n\nIn\n[\n1\n]\n:=\n \nMatchQ\n[(\na\n \n+\n \nb\n \n+\n \nc\n),\n \n(\na\n \n+\n \nb\n \n+\n \n__\n)]\n\n\nOut\n[\n1\n]\n=\n \nTrue\n\n\n\n\n\n\nIn\n[\n2\n]\n:=\n \nMatchQ\n[(\na\n \n+\n \nb\n \n+\n \nc\n),\n \n(\na\n \n+\n \nb\n \n+\n \nc\n \n+\n \n__\n)]\n\n\nOut\n[\n2\n]\n=\n \nFalse\n\n\n\n\n\n\nFurther examples\n\n\nWith head assertions:\n\n\nIn\n[\n1\n]\n:=\n \nMatchQ\n[(\na\n \n*\n \nb\n),\n \n__Symbol\n]\n\n\nOut\n[\n1\n]\n=\n \nFalse\n\n\n\n\n\n\nIn\n[\n2\n]\n:=\n \nMatchQ\n[(\na\n \n*\n \nb\n),\n \nx__Symbol\n]\n\n\nOut\n[\n2\n]\n=\n \nFalse\n\n\n\n\n\n\nIn\n[\n3\n]\n:=\n \nMatchQ\n[\na\n,\n \n__Symbol\n]\n\n\nOut\n[\n3\n]\n=\n \nTrue\n\n\n\n\n\n\nIn\n[\n4\n]\n:=\n \nMatchQ\n[(\na\n \n*\n \nb\n),\n \nx__Times\n]\n\n\nOut\n[\n4\n]\n=\n \nTrue\n\n\n\n\n\n\nIn\n[\n5\n]\n:=\n \nMatchQ\n[(\na\n \n*\n \nb\n),\n \nx__Plus\n]\n\n\nOut\n[\n5\n]\n=\n \nFalse\n\n\n\n\n\n\nIn\n[\n6\n]\n:=\n \nMatchQ\n[(\na\n \n+\n \nb\n),\n \nx__Plus\n]\n\n\nOut\n[\n6\n]\n=\n \nTrue", 
            "title": "BlankSequence "
        }, 
        {
            "location": "/builtin/pattern/blanksequence/#blanksequence", 
            "text": "__  matches any sequence of one or more expressions.  __head  matches any sequence of one or more expressions, each with a  Head  of  head .  Attributes[BlankSequence] := {Protected}", 
            "title": "BlankSequence"
        }, 
        {
            "location": "/builtin/pattern/blanksequence/#simple-examples", 
            "text": "In [ 1 ] :=   MatchQ [( a   +   b   +   c ),   ( a   +   b   +   __ )]  Out [ 1 ] =   True   In [ 2 ] :=   MatchQ [( a   +   b   +   c ),   ( a   +   b   +   c   +   __ )]  Out [ 2 ] =   False", 
            "title": "Simple examples"
        }, 
        {
            "location": "/builtin/pattern/blanksequence/#further-examples", 
            "text": "With head assertions:  In [ 1 ] :=   MatchQ [( a   *   b ),   __Symbol ]  Out [ 1 ] =   False   In [ 2 ] :=   MatchQ [( a   *   b ),   x__Symbol ]  Out [ 2 ] =   False   In [ 3 ] :=   MatchQ [ a ,   __Symbol ]  Out [ 3 ] =   True   In [ 4 ] :=   MatchQ [( a   *   b ),   x__Times ]  Out [ 4 ] =   True   In [ 5 ] :=   MatchQ [( a   *   b ),   x__Plus ]  Out [ 5 ] =   False   In [ 6 ] :=   MatchQ [( a   +   b ),   x__Plus ]  Out [ 6 ] =   True", 
            "title": "Further examples"
        }, 
        {
            "location": "/builtin/pattern/blanknullsequence/", 
            "text": "BlankNullSequence\n\n\n___\n matches any sequence of zero or more expressions.\n\n\n___head\n matches any sequence of zero or more expressions, each with a \nHead\n of \nhead\n.\n\n\nAttributes[BlankNullSequence] := {Protected}\n\n\nSimple examples\n\n\nIn\n[\n1\n]\n:=\n \nMatchQ\n[(\na\n \n*\n \nb\n),\n \n___\n]\n\n\nOut\n[\n1\n]\n=\n \nTrue\n\n\n\n\n\n\nIn\n[\n2\n]\n:=\n \nMatchQ\n[(\na\n \n+\n \nb\n),\n \n(\na\n \n+\n \nb\n \n+\n \n___\n)]\n\n\nOut\n[\n2\n]\n=\n \nTrue\n\n\n\n\n\n\nFurther examples\n\n\nWith head assertions:\n\n\nIn\n[\n1\n]\n:=\n \nMatchQ\n[(\na\n \n+\n \nb\n \n+\n \nc\n),\n \n(\na\n \n+\n \nx___Symbol\n)]\n\n\nOut\n[\n1\n]\n=\n \nTrue\n\n\n\n\n\n\nIn\n[\n2\n]\n:=\n \nMatchQ\n[(\na\n \n+\n \nb\n \n+\n \nc\n),\n \n(\na\n \n+\n \nx___Plus\n)]\n\n\nOut\n[\n2\n]\n=\n \nFalse", 
            "title": "BlankNullSequence "
        }, 
        {
            "location": "/builtin/pattern/blanknullsequence/#blanknullsequence", 
            "text": "___  matches any sequence of zero or more expressions.  ___head  matches any sequence of zero or more expressions, each with a  Head  of  head .  Attributes[BlankNullSequence] := {Protected}", 
            "title": "BlankNullSequence"
        }, 
        {
            "location": "/builtin/pattern/blanknullsequence/#simple-examples", 
            "text": "In [ 1 ] :=   MatchQ [( a   *   b ),   ___ ]  Out [ 1 ] =   True   In [ 2 ] :=   MatchQ [( a   +   b ),   ( a   +   b   +   ___ )]  Out [ 2 ] =   True", 
            "title": "Simple examples"
        }, 
        {
            "location": "/builtin/pattern/blanknullsequence/#further-examples", 
            "text": "With head assertions:  In [ 1 ] :=   MatchQ [( a   +   b   +   c ),   ( a   +   x___Symbol )]  Out [ 1 ] =   True   In [ 2 ] :=   MatchQ [( a   +   b   +   c ),   ( a   +   x___Plus )]  Out [ 2 ] =   False", 
            "title": "Further examples"
        }, 
        {
            "location": "/builtin/pattern/except/", 
            "text": "Except\n\n\nExcept[pat]\n matches all expressions except those that match \npat\n.\n\n\nExcept[pat1, pat2]\n matches all expressions that match \npat2\n but not \npat1\n.\n\n\nAttributes[Except] := {Protected}\n\n\nSimple examples\n\n\nIn\n[\n1\n]\n:=\n \nCases\n[{\n5\n,\n \n2\n,\n \n3.5\n,\n \nx\n,\n \ny\n,\n \n4\n},\n \nExcept\n[\n_Real\n]]\n\n\nOut\n[\n1\n]\n=\n \n{\n5\n,\n \n2\n,\n \nx\n,\n \ny\n,\n \n4\n}\n\n\n\n\n\n\nIn\n[\n2\n]\n:=\n \nCases\n[{\n5\n,\n \n2\n,\n \na\n^\nb\n,\n \nx\n,\n \ny\n,\n \n4\n},\n \nExcept\n[\n_Symbol\n^\n_Symbol\n]]\n\n\nOut\n[\n2\n]\n=\n \n{\n5\n,\n \n2\n,\n \nx\n,\n \ny\n,\n \n4\n}\n\n\n\n\n\n\nIn\n[\n3\n]\n:=\n \n({\na\n,\n \nb\n,\n \n0\n,\n \n1\n,\n \n2\n,\n \nx\n,\n \ny\n})\n \n/.\n \n((\nExcept\n[\n0\n,\n \na_Integer\n])\n \n-\n \n(\nfoo\n[\na\n]))\n\n\nOut\n[\n3\n]\n=\n \n{\na\n,\n \nb\n,\n \n0\n,\n \nfoo\n[\n1\n],\n \nfoo\n[\n2\n],\n \nx\n,\n \ny\n}", 
            "title": "Except "
        }, 
        {
            "location": "/builtin/pattern/except/#except", 
            "text": "Except[pat]  matches all expressions except those that match  pat .  Except[pat1, pat2]  matches all expressions that match  pat2  but not  pat1 .  Attributes[Except] := {Protected}", 
            "title": "Except"
        }, 
        {
            "location": "/builtin/pattern/except/#simple-examples", 
            "text": "In [ 1 ] :=   Cases [{ 5 ,   2 ,   3.5 ,   x ,   y ,   4 },   Except [ _Real ]]  Out [ 1 ] =   { 5 ,   2 ,   x ,   y ,   4 }   In [ 2 ] :=   Cases [{ 5 ,   2 ,   a ^ b ,   x ,   y ,   4 },   Except [ _Symbol ^ _Symbol ]]  Out [ 2 ] =   { 5 ,   2 ,   x ,   y ,   4 }   In [ 3 ] :=   ({ a ,   b ,   0 ,   1 ,   2 ,   x ,   y })   /.   (( Except [ 0 ,   a_Integer ])   -   ( foo [ a ]))  Out [ 3 ] =   { a ,   b ,   0 ,   foo [ 1 ],   foo [ 2 ],   x ,   y }", 
            "title": "Simple examples"
        }, 
        {
            "location": "/builtin/pattern/patterntest/", 
            "text": "PatternTest\n\n\npat?test\n matches when the expression matches \npat\n and \ntest[MATCH]\n evaluates to \nTrue\n.\n\n\nAttributes[PatternTest] := {HoldRest, Protected}\n\n\nSimple examples\n\n\nIn\n[\n1\n]\n:=\n \nMatchQ\n[\n1\n,\n \nPatternTest\n[\n_\n,\n \nNumberQ\n]]\n\n\nOut\n[\n1\n]\n=\n \nTrue\n\n\n\n\n\n\nIn\n[\n2\n]\n:=\n \nMatchQ\n[\na\n,\n \nPatternTest\n[\n_\n,\n \nNumberQ\n]]\n\n\nOut\n[\n2\n]\n=\n \nFalse\n\n\n\n\n\n\nIn\n[\n3\n]\n:=\n \nMatchQ\n[\n1\n,\n \nPatternTest\n[\n1\n,\n \nNumberQ\n]]\n\n\nOut\n[\n3\n]\n=\n \nTrue\n\n\n\n\n\n\nIn\n[\n4\n]\n:=\n \nMatchQ\n[\n1\n,\n \nPatternTest\n[\n1.5\n,\n \nNumberQ\n]]\n\n\nOut\n[\n4\n]\n=\n \nFalse\n\n\n\n\n\n\nIn\n[\n5\n]\n:=\n \nMatchQ\n[\n1.5\n,\n \nPatternTest\n[\n1.5\n,\n \nNumberQ\n]]\n\n\nOut\n[\n5\n]\n=\n \nTrue\n\n\n\n\n\n\nIn\n[\n6\n]\n:=\n \nCases\n[{\n5\n,\n \n2\n,\n \na\n^\nb\n,\n \nx\n,\n \ny\n,\n \n4.5\n},\n \nPatternTest\n[\n_\n,\n \nNumberQ\n]]\n\n\nOut\n[\n6\n]\n=\n \n{\n5\n,\n \n2\n,\n \n4.5\n}", 
            "title": "PatternTest "
        }, 
        {
            "location": "/builtin/pattern/patterntest/#patterntest", 
            "text": "pat?test  matches when the expression matches  pat  and  test[MATCH]  evaluates to  True .  Attributes[PatternTest] := {HoldRest, Protected}", 
            "title": "PatternTest"
        }, 
        {
            "location": "/builtin/pattern/patterntest/#simple-examples", 
            "text": "In [ 1 ] :=   MatchQ [ 1 ,   PatternTest [ _ ,   NumberQ ]]  Out [ 1 ] =   True   In [ 2 ] :=   MatchQ [ a ,   PatternTest [ _ ,   NumberQ ]]  Out [ 2 ] =   False   In [ 3 ] :=   MatchQ [ 1 ,   PatternTest [ 1 ,   NumberQ ]]  Out [ 3 ] =   True   In [ 4 ] :=   MatchQ [ 1 ,   PatternTest [ 1.5 ,   NumberQ ]]  Out [ 4 ] =   False   In [ 5 ] :=   MatchQ [ 1.5 ,   PatternTest [ 1.5 ,   NumberQ ]]  Out [ 5 ] =   True   In [ 6 ] :=   Cases [{ 5 ,   2 ,   a ^ b ,   x ,   y ,   4.5 },   PatternTest [ _ ,   NumberQ ]]  Out [ 6 ] =   { 5 ,   2 ,   4.5 }", 
            "title": "Simple examples"
        }, 
        {
            "location": "/builtin/pattern/condition/", 
            "text": "Condition\n\n\npat /; cond\n matches an expression if the expression matches \npat\n, and if \ncond\n evaluates to \nTrue\n with all the named patterns substituted in.\n\n\nAttributes[Condition] := {HoldAll, Protected}\n\n\nSimple examples\n\n\nIn\n[\n1\n]\n:=\n \nMatchQ\n[\n5\n,\n \nCondition\n[\n_\n,\n \nTrue\n]]\n\n\nOut\n[\n1\n]\n=\n \nTrue\n\n\n\n\n\n\nIn\n[\n2\n]\n:=\n \nMatchQ\n[\n5\n,\n \nCondition\n[\n_\n,\n \nFalse\n]]\n\n\nOut\n[\n2\n]\n=\n \nFalse\n\n\n\n\n\n\nIn\n[\n3\n]\n:=\n \nMatchQ\n[\n5\n,\n \nCondition\n[\ny_\n,\n \nTrue\n]]\n\n\nOut\n[\n3\n]\n=\n \nTrue\n\n\n\n\n\n\nIn\n[\n4\n]\n:=\n \nMatchQ\n[\n5\n,\n \nCondition\n[\ny_Real\n,\n \nTrue\n]]\n\n\nOut\n[\n4\n]\n=\n \nFalse\n\n\n\n\n\n\nIn\n[\n5\n]\n:=\n \nMatchQ\n[\n5\n,\n \nCondition\n[\ny_Integer\n,\n \nTrue\n]]\n\n\nOut\n[\n5\n]\n=\n \nTrue\n\n\n\n\n\n\nIn\n[\n6\n]\n:=\n \nMatchQ\n[\n5\n,\n \nCondition\n[\ny_\n,\n \n(\ny\n)\n \n==\n \n(\n0\n)]]\n\n\nOut\n[\n6\n]\n=\n \nFalse\n\n\n\n\n\n\nIn\n[\n7\n]\n:=\n \nMatchQ\n[\n5\n,\n \nCondition\n[\ny_\n,\n \n(\ny\n)\n \n==\n \n(\n5\n)]]\n\n\nOut\n[\n7\n]\n=\n \nTrue\n\n\n\n\n\n\nIn\n[\n8\n]\n:=\n \n({\n3\n,\n \n5\n,\n \n2\n,\n \n1\n})\n \n//.\n \n((\nCondition\n[{\nx___\n,\n \ny_\n,\n \nz_\n,\n \nk___\n},\n \n(\nOrder\n[\ny\n,\n \nz\n])\n \n==\n \n(\n-\n1\n)])\n \n-\n \n({\nx\n,\n \nz\n,\n \ny\n,\n \nk\n}))\n\n\nOut\n[\n8\n]\n=\n \n{\n1\n,\n \n2\n,\n \n3\n,\n \n5\n}\n\n\n\n\n\n\nIn\n[\n9\n]\n:=\n \nReplace\n[\n1\n,\n \n(\na_Integer\n)\n \n:\n \n(\nCondition\n[\nmyfn\n[\na\n],\n \n(\na\n)\n \n \n(\n0\n)])]\n\n\nOut\n[\n9\n]\n=\n \nmyfn\n[\n1\n]\n\n\n\n\n\n\nIn\n[\n10\n]\n:=\n \nReplace\n[\n-\n1\n,\n \n(\na_Integer\n)\n \n:\n \n(\nCondition\n[\nmyfn\n[\na\n],\n \n(\na\n)\n \n \n(\n0\n)])]\n\n\nOut\n[\n10\n]\n=\n \n-\n1", 
            "title": "Condition "
        }, 
        {
            "location": "/builtin/pattern/condition/#condition", 
            "text": "pat /; cond  matches an expression if the expression matches  pat , and if  cond  evaluates to  True  with all the named patterns substituted in.  Attributes[Condition] := {HoldAll, Protected}", 
            "title": "Condition"
        }, 
        {
            "location": "/builtin/pattern/condition/#simple-examples", 
            "text": "In [ 1 ] :=   MatchQ [ 5 ,   Condition [ _ ,   True ]]  Out [ 1 ] =   True   In [ 2 ] :=   MatchQ [ 5 ,   Condition [ _ ,   False ]]  Out [ 2 ] =   False   In [ 3 ] :=   MatchQ [ 5 ,   Condition [ y_ ,   True ]]  Out [ 3 ] =   True   In [ 4 ] :=   MatchQ [ 5 ,   Condition [ y_Real ,   True ]]  Out [ 4 ] =   False   In [ 5 ] :=   MatchQ [ 5 ,   Condition [ y_Integer ,   True ]]  Out [ 5 ] =   True   In [ 6 ] :=   MatchQ [ 5 ,   Condition [ y_ ,   ( y )   ==   ( 0 )]]  Out [ 6 ] =   False   In [ 7 ] :=   MatchQ [ 5 ,   Condition [ y_ ,   ( y )   ==   ( 5 )]]  Out [ 7 ] =   True   In [ 8 ] :=   ({ 3 ,   5 ,   2 ,   1 })   //.   (( Condition [{ x___ ,   y_ ,   z_ ,   k___ },   ( Order [ y ,   z ])   ==   ( - 1 )])   -   ({ x ,   z ,   y ,   k }))  Out [ 8 ] =   { 1 ,   2 ,   3 ,   5 }   In [ 9 ] :=   Replace [ 1 ,   ( a_Integer )   :   ( Condition [ myfn [ a ],   ( a )     ( 0 )])]  Out [ 9 ] =   myfn [ 1 ]   In [ 10 ] :=   Replace [ - 1 ,   ( a_Integer )   :   ( Condition [ myfn [ a ],   ( a )     ( 0 )])]  Out [ 10 ] =   - 1", 
            "title": "Simple examples"
        }, 
        {
            "location": "/builtin/pattern/alternatives/", 
            "text": "Alternatives\n\n\nalt1 | alt2 | ...\n matches an expression if it matches any pattern in the list of alternatives.\n\n\nAttributes[Alternatives] := {Protected}\n\n\nSimple examples\n\n\nIn\n[\n1\n]\n:=\n \nAlternatives\n[\nc\n,\n \nd\n]\n\n\nOut\n[\n1\n]\n=\n \nAlternatives\n[\nc\n,\n \nd\n]\n\n\n\n\n\n\nIn\n[\n2\n]\n:=\n \nMatchQ\n[\nb\n,\n \nAlternatives\n[\nc\n,\n \nd\n]]\n\n\nOut\n[\n2\n]\n=\n \nFalse\n\n\n\n\n\n\nIn\n[\n3\n]\n:=\n \nMatchQ\n[\nc\n,\n \nAlternatives\n[\nc\n,\n \nd\n]]\n\n\nOut\n[\n3\n]\n=\n \nTrue\n\n\n\n\n\n\nIn\n[\n4\n]\n:=\n \nMatchQ\n[\nd\n,\n \nAlternatives\n[\nc\n,\n \nd\n]]\n\n\nOut\n[\n4\n]\n=\n \nTrue\n\n\n\n\n\n\nIn\n[\n5\n]\n:=\n \nCases\n[{\na\n,\n \nb\n,\n \nc\n,\n \n1\n,\n \n2\n},\n \nAlternatives\n[\nc\n,\n \n_Integer\n]]\n\n\nOut\n[\n5\n]\n=\n \n{\nc\n,\n \n1\n,\n \n2\n}\n\n\n\n\n\n\nIn\n[\n6\n]\n:=\n \n({\na\n,\n \nb\n,\n \nc\n,\n \n1.\n,\n \n2\n})\n \n/.\n \n((\nAlternatives\n[\namatch_Symbol\n,\n \namatch_Integer\n])\n \n-\n \n((\namatch\n \n+\n \n1\n)))\n\n\nOut\n[\n6\n]\n=\n \n(\n1\n \n+\n \nList\n)[(\n1\n \n+\n \na\n),\n \n(\n1\n \n+\n \nb\n),\n \n(\n1\n \n+\n \nc\n),\n \n1.\n,\n \n3\n]\n\n\n\n\n\n\nIn\n[\n7\n]\n:=\n \nCases\n[{\na\n,\n \nb\n,\n \nc\n,\n \nd\n,\n \ne\n,\n \nf\n},\n \nAlternatives\n[\nb\n,\n \nc\n,\n \nd\n,\n \ne\n]]\n\n\nOut\n[\n7\n]\n=\n \n{\nb\n,\n \nc\n,\n \nd\n,\n \ne\n}\n\n\n\n\n\n\nIn\n[\n8\n]\n:=\n \nMatchQ\n[{\na\n,\n \nb\n},\n \n{\na_\n,\n \nAlternatives\n[\nk\n,\n \na_\n]}]\n\n\nOut\n[\n8\n]\n=\n \nFalse", 
            "title": "Alternatives "
        }, 
        {
            "location": "/builtin/pattern/alternatives/#alternatives", 
            "text": "alt1 | alt2 | ...  matches an expression if it matches any pattern in the list of alternatives.  Attributes[Alternatives] := {Protected}", 
            "title": "Alternatives"
        }, 
        {
            "location": "/builtin/pattern/alternatives/#simple-examples", 
            "text": "In [ 1 ] :=   Alternatives [ c ,   d ]  Out [ 1 ] =   Alternatives [ c ,   d ]   In [ 2 ] :=   MatchQ [ b ,   Alternatives [ c ,   d ]]  Out [ 2 ] =   False   In [ 3 ] :=   MatchQ [ c ,   Alternatives [ c ,   d ]]  Out [ 3 ] =   True   In [ 4 ] :=   MatchQ [ d ,   Alternatives [ c ,   d ]]  Out [ 4 ] =   True   In [ 5 ] :=   Cases [{ a ,   b ,   c ,   1 ,   2 },   Alternatives [ c ,   _Integer ]]  Out [ 5 ] =   { c ,   1 ,   2 }   In [ 6 ] :=   ({ a ,   b ,   c ,   1. ,   2 })   /.   (( Alternatives [ amatch_Symbol ,   amatch_Integer ])   -   (( amatch   +   1 )))  Out [ 6 ] =   ( 1   +   List )[( 1   +   a ),   ( 1   +   b ),   ( 1   +   c ),   1. ,   3 ]   In [ 7 ] :=   Cases [{ a ,   b ,   c ,   d ,   e ,   f },   Alternatives [ b ,   c ,   d ,   e ]]  Out [ 7 ] =   { b ,   c ,   d ,   e }   In [ 8 ] :=   MatchQ [{ a ,   b },   { a_ ,   Alternatives [ k ,   a_ ]}]  Out [ 8 ] =   False", 
            "title": "Simple examples"
        }, 
        {
            "location": "/builtin/pattern/freeq/", 
            "text": "FreeQ\n\n\nFreeQ[e, var]\n returns True if \ne\n is free from any occurences of \nvar\n.\n\n\nAttributes[FreeQ] := {Protected}", 
            "title": "FreeQ "
        }, 
        {
            "location": "/builtin/pattern/freeq/#freeq", 
            "text": "FreeQ[e, var]  returns True if  e  is free from any occurences of  var .  Attributes[FreeQ] := {Protected}", 
            "title": "FreeQ"
        }, 
        {
            "location": "/builtin/pattern/replacelist/", 
            "text": "ReplaceList\n\n\nReplaceList[expr, rule]\n returns all the possible replacements using \nrule\n on \nexpr\n.\n\n\nAttributes[ReplaceList] := {Protected}\n\n\nSimple examples\n\n\nIn\n[\n1\n]\n:=\n \nReplaceList\n[(\na\n \n+\n \nb\n),\n \n((\nx_\n \n+\n \ny_\n))\n \n-\n \n({\nx\n,\n \ny\n})]\n\n\nOut\n[\n1\n]\n=\n \n{{\na\n,\n \nb\n},\n \n{\nb\n,\n \na\n}}\n\n\n\n\n\n\nIn\n[\n2\n]\n:=\n \nReplaceList\n[\nfoo\n[(\na\n \n+\n \nb\n),\n \nb\n],\n \n(\nfoo\n[(\nj_\n \n+\n \nk_\n),\n \nj_\n])\n \n-\n \n({\nj\n,\n \nk\n})]\n\n\nOut\n[\n2\n]\n=\n \n{{\nb\n,\n \na\n}}\n\n\n\n\n\n\nIn\n[\n3\n]\n:=\n \nReplaceList\n[\nfoo\n[(\na\n \n+\n \nb\n)],\n \n(\nfoo\n[(\nx_\n \n+\n \ny_\n)])\n \n-\n \n({\nx\n,\n \ny\n})]\n\n\nOut\n[\n3\n]\n=\n \n{{\na\n,\n \nb\n},\n \n{\nb\n,\n \na\n}}\n\n\n\n\n\n\nIn\n[\n4\n]\n:=\n \nReplaceList\n[\nbar\n[(\nfoo\n[(\na\n \n+\n \nb\n)]\n \n+\n \nc\n)],\n \n(\nbar\n[(\nfoo\n[(\nx_\n \n+\n \ny_\n)]\n \n+\n \nz_\n)])\n \n-\n \n({\nx\n,\n \ny\n,\n \nz\n})]\n\n\nOut\n[\n4\n]\n=\n \n{{\na\n,\n \nb\n,\n \nc\n},\n \n{\nb\n,\n \na\n,\n \nc\n}}\n\n\n\n\n\n\nIn\n[\n5\n]\n:=\n \nReplaceList\n[\nbar\n[(\nfoo\n[(\na\n \n+\n \nb\n)]\n \n+\n \nc\n \n+\n \nd\n)],\n \n(\nbar\n[(\nw_\n \n+\n \nx_\n \n+\n \nfoo\n[(\ny_\n \n+\n \nz_\n)])])\n \n-\n \n({\nw\n,\n \nx\n,\n \ny\n,\n \nz\n})]\n\n\nOut\n[\n5\n]\n=\n \n{{\nc\n,\n \nd\n,\n \na\n,\n \nb\n},\n \n{\nc\n,\n \nd\n,\n \nb\n,\n \na\n},\n \n{\nd\n,\n \nc\n,\n \na\n,\n \nb\n},\n \n{\nd\n,\n \nc\n,\n \nb\n,\n \na\n}}\n\n\n\n\n\n\nIn\n[\n6\n]\n:=\n \nReplaceList\n[\nfoo\n[(\na\n \n+\n \nb\n),\n \nc\n],\n \n(\nfoo\n[(\nj_\n \n+\n \nk_\n),\n \nj_\n])\n \n-\n \n({\nj\n,\n \nk\n})]\n\n\nOut\n[\n6\n]\n=\n \n{}", 
            "title": "ReplaceList "
        }, 
        {
            "location": "/builtin/pattern/replacelist/#replacelist", 
            "text": "ReplaceList[expr, rule]  returns all the possible replacements using  rule  on  expr .  Attributes[ReplaceList] := {Protected}", 
            "title": "ReplaceList"
        }, 
        {
            "location": "/builtin/pattern/replacelist/#simple-examples", 
            "text": "In [ 1 ] :=   ReplaceList [( a   +   b ),   (( x_   +   y_ ))   -   ({ x ,   y })]  Out [ 1 ] =   {{ a ,   b },   { b ,   a }}   In [ 2 ] :=   ReplaceList [ foo [( a   +   b ),   b ],   ( foo [( j_   +   k_ ),   j_ ])   -   ({ j ,   k })]  Out [ 2 ] =   {{ b ,   a }}   In [ 3 ] :=   ReplaceList [ foo [( a   +   b )],   ( foo [( x_   +   y_ )])   -   ({ x ,   y })]  Out [ 3 ] =   {{ a ,   b },   { b ,   a }}   In [ 4 ] :=   ReplaceList [ bar [( foo [( a   +   b )]   +   c )],   ( bar [( foo [( x_   +   y_ )]   +   z_ )])   -   ({ x ,   y ,   z })]  Out [ 4 ] =   {{ a ,   b ,   c },   { b ,   a ,   c }}   In [ 5 ] :=   ReplaceList [ bar [( foo [( a   +   b )]   +   c   +   d )],   ( bar [( w_   +   x_   +   foo [( y_   +   z_ )])])   -   ({ w ,   x ,   y ,   z })]  Out [ 5 ] =   {{ c ,   d ,   a ,   b },   { c ,   d ,   b ,   a },   { d ,   c ,   a ,   b },   { d ,   c ,   b ,   a }}   In [ 6 ] :=   ReplaceList [ foo [( a   +   b ),   c ],   ( foo [( j_   +   k_ ),   j_ ])   -   ({ j ,   k })]  Out [ 6 ] =   {}", 
            "title": "Simple examples"
        }, 
        {
            "location": "/builtin/pattern/repeated/", 
            "text": "Repeated\n\n\nRepeated[p_]\n matches a sequence of expressions that match the pattern \np\n.\n\n\nAttributes[Repeated] := {Protected}", 
            "title": "Repeated "
        }, 
        {
            "location": "/builtin/pattern/repeated/#repeated", 
            "text": "Repeated[p_]  matches a sequence of expressions that match the pattern  p .  Attributes[Repeated] := {Protected}", 
            "title": "Repeated"
        }, 
        {
            "location": "/builtin/pattern/optional/", 
            "text": "Optional\n\n\nOptional[pat, default]\n attempts to match \npat\n but uses \ndefault\n if not present.\n\n\nAttributes[Optional] := {Protected}", 
            "title": "Optional "
        }, 
        {
            "location": "/builtin/pattern/optional/#optional", 
            "text": "Optional[pat, default]  attempts to match  pat  but uses  default  if not present.  Attributes[Optional] := {Protected}", 
            "title": "Optional"
        }, 
        {
            "location": "/builtin/boolean/", 
            "text": "boolean documentation\n\n\nAnd\n\n\nOr\n\n\nNot\n\n\nTrueQ\n\n\nBooleanQ\n\n\nAllTrue\n\n\nBoole", 
            "title": "boolean"
        }, 
        {
            "location": "/builtin/boolean/#boolean-documentation", 
            "text": "And  Or  Not  TrueQ  BooleanQ  AllTrue  Boole", 
            "title": "boolean documentation"
        }, 
        {
            "location": "/builtin/boolean/and/", 
            "text": "And\n\n\ne1 \n e2 \n ...\n returns \nTrue\n if all expressions evaluate to \nTrue\n.\n\n\nAttributes[And] := {Flat, HoldAll, OneIdentity, Protected}\n\n\nSimple examples\n\n\nIn\n[\n1\n]\n:=\n \n(\nTrue\n \n \nFalse\n)\n\n\nOut\n[\n1\n]\n=\n \nFalse\n\n\n\n\n\n\nIn\n[\n2\n]\n:=\n \n(\nTrue\n \n \nTrue\n \n \nTrue\n)\n\n\nOut\n[\n2\n]\n=\n \nTrue", 
            "title": "And "
        }, 
        {
            "location": "/builtin/boolean/and/#and", 
            "text": "e1   e2   ...  returns  True  if all expressions evaluate to  True .  Attributes[And] := {Flat, HoldAll, OneIdentity, Protected}", 
            "title": "And"
        }, 
        {
            "location": "/builtin/boolean/and/#simple-examples", 
            "text": "In [ 1 ] :=   ( True     False )  Out [ 1 ] =   False   In [ 2 ] :=   ( True     True     True )  Out [ 2 ] =   True", 
            "title": "Simple examples"
        }, 
        {
            "location": "/builtin/boolean/or/", 
            "text": "Or\n\n\ne1 || e2 || ...\n returns \nTrue\n if any expressions evaluate to \nTrue\n.\n\n\nAttributes[Or] := {Flat, HoldAll, OneIdentity, Protected}\n\n\nSimple examples\n\n\nIn\n[\n1\n]\n:=\n \n(\nTrue\n \n||\n \nFalse\n)\n\n\nOut\n[\n1\n]\n=\n \nTrue\n\n\n\n\n\n\nIn\n[\n2\n]\n:=\n \n(\nFalse\n \n||\n \nFalse\n \n||\n \nFalse\n)\n\n\nOut\n[\n2\n]\n=\n \nFalse", 
            "title": "Or "
        }, 
        {
            "location": "/builtin/boolean/or/#or", 
            "text": "e1 || e2 || ...  returns  True  if any expressions evaluate to  True .  Attributes[Or] := {Flat, HoldAll, OneIdentity, Protected}", 
            "title": "Or"
        }, 
        {
            "location": "/builtin/boolean/or/#simple-examples", 
            "text": "In [ 1 ] :=   ( True   ||   False )  Out [ 1 ] =   True   In [ 2 ] :=   ( False   ||   False   ||   False )  Out [ 2 ] =   False", 
            "title": "Simple examples"
        }, 
        {
            "location": "/builtin/boolean/not/", 
            "text": "Not\n\n\n!e\n returns \nTrue\n if \ne\n is \nFalse\n and \nFalse\n if \ne\n is \nTrue\n.\n\n\nAttributes[Not] := {Protected}\n\n\nSimple examples\n\n\nIn\n[\n1\n]\n:=\n \nNot\n[\nTrue\n]\n\n\nOut\n[\n1\n]\n=\n \nFalse\n\n\n\n\n\n\nIn\n[\n2\n]\n:=\n \nNot\n[\nFalse\n]\n\n\nOut\n[\n2\n]\n=\n \nTrue\n\n\n\n\n\n\nIn\n[\n3\n]\n:=\n \nNot\n[\na\n]\n\n\nOut\n[\n3\n]\n=\n \nNot\n[\na\n]\n\n\n\n\n\n\nIn\n[\n4\n]\n:=\n \nNot\n[\nNot\n[\na\n]]\n\n\nOut\n[\n4\n]\n=\n \na", 
            "title": "Not "
        }, 
        {
            "location": "/builtin/boolean/not/#not", 
            "text": "!e  returns  True  if  e  is  False  and  False  if  e  is  True .  Attributes[Not] := {Protected}", 
            "title": "Not"
        }, 
        {
            "location": "/builtin/boolean/not/#simple-examples", 
            "text": "In [ 1 ] :=   Not [ True ]  Out [ 1 ] =   False   In [ 2 ] :=   Not [ False ]  Out [ 2 ] =   True   In [ 3 ] :=   Not [ a ]  Out [ 3 ] =   Not [ a ]   In [ 4 ] :=   Not [ Not [ a ]]  Out [ 4 ] =   a", 
            "title": "Simple examples"
        }, 
        {
            "location": "/builtin/boolean/trueq/", 
            "text": "TrueQ\n\n\nTrueQ[expr]\n returns True if \nexpr\n is True, False otherwise.\n\n\nAttributes[TrueQ] := {Protected}\n\n\nSimple examples\n\n\nIn\n[\n1\n]\n:=\n \nTrueQ\n[\nTrue\n]\n\n\nOut\n[\n1\n]\n=\n \nTrue\n\n\n\n\n\n\nIn\n[\n2\n]\n:=\n \nTrueQ\n[\nFalse\n]\n\n\nOut\n[\n2\n]\n=\n \nFalse\n\n\n\n\n\n\nIn\n[\n3\n]\n:=\n \nTrueQ\n[\n1\n]\n\n\nOut\n[\n3\n]\n=\n \nFalse", 
            "title": "TrueQ "
        }, 
        {
            "location": "/builtin/boolean/trueq/#trueq", 
            "text": "TrueQ[expr]  returns True if  expr  is True, False otherwise.  Attributes[TrueQ] := {Protected}", 
            "title": "TrueQ"
        }, 
        {
            "location": "/builtin/boolean/trueq/#simple-examples", 
            "text": "In [ 1 ] :=   TrueQ [ True ]  Out [ 1 ] =   True   In [ 2 ] :=   TrueQ [ False ]  Out [ 2 ] =   False   In [ 3 ] :=   TrueQ [ 1 ]  Out [ 3 ] =   False", 
            "title": "Simple examples"
        }, 
        {
            "location": "/builtin/boolean/booleanq/", 
            "text": "BooleanQ\n\n\nBooleanQ[expr]\n returns True if \nexpr\n is True or False, False otherwise.\n\n\nAttributes[BooleanQ] := {Protected}\n\n\nSimple examples\n\n\nIn\n[\n1\n]\n:=\n \nBooleanQ\n[\nTrue\n]\n\n\nOut\n[\n1\n]\n=\n \nTrue\n\n\n\n\n\n\nIn\n[\n2\n]\n:=\n \nBooleanQ\n[\nFalse\n]\n\n\nOut\n[\n2\n]\n=\n \nTrue\n\n\n\n\n\n\nIn\n[\n3\n]\n:=\n \nBooleanQ\n[\n1\n]\n\n\nOut\n[\n3\n]\n=\n \nFalse", 
            "title": "BooleanQ "
        }, 
        {
            "location": "/builtin/boolean/booleanq/#booleanq", 
            "text": "BooleanQ[expr]  returns True if  expr  is True or False, False otherwise.  Attributes[BooleanQ] := {Protected}", 
            "title": "BooleanQ"
        }, 
        {
            "location": "/builtin/boolean/booleanq/#simple-examples", 
            "text": "In [ 1 ] :=   BooleanQ [ True ]  Out [ 1 ] =   True   In [ 2 ] :=   BooleanQ [ False ]  Out [ 2 ] =   True   In [ 3 ] :=   BooleanQ [ 1 ]  Out [ 3 ] =   False", 
            "title": "Simple examples"
        }, 
        {
            "location": "/builtin/boolean/alltrue/", 
            "text": "AllTrue\n\n\nAllTrue[list, condition]\n returns True if all parts of \nlist\n satisfy \ncondition\n.\n\n\nAttributes[AllTrue] := {Protected}\n\n\nSimple examples\n\n\nIn\n[\n1\n]\n:=\n \nAllTrue\n[{\n1\n,\n \na\n},\n \nNumberQ\n]\n\n\nOut\n[\n1\n]\n=\n \nFalse\n\n\n\n\n\n\nIn\n[\n2\n]\n:=\n \nAllTrue\n[{\n1\n,\n \n2\n},\n \nNumberQ\n]\n\n\nOut\n[\n2\n]\n=\n \nTrue", 
            "title": "AllTrue "
        }, 
        {
            "location": "/builtin/boolean/alltrue/#alltrue", 
            "text": "AllTrue[list, condition]  returns True if all parts of  list  satisfy  condition .  Attributes[AllTrue] := {Protected}", 
            "title": "AllTrue"
        }, 
        {
            "location": "/builtin/boolean/alltrue/#simple-examples", 
            "text": "In [ 1 ] :=   AllTrue [{ 1 ,   a },   NumberQ ]  Out [ 1 ] =   False   In [ 2 ] :=   AllTrue [{ 1 ,   2 },   NumberQ ]  Out [ 2 ] =   True", 
            "title": "Simple examples"
        }, 
        {
            "location": "/builtin/boolean/boole/", 
            "text": "Boole\n\n\nBoole[e]\n returns 0 if \ne\n is False and 1 if \ne\n is True.\n\n\nAttributes[Boole] := {Listable, Protected}\n\n\nSimple examples\n\n\nIn\n[\n1\n]\n:=\n \nBoole\n[\nTrue\n]\n\n\nOut\n[\n1\n]\n=\n \n1\n\n\n\n\n\n\nIn\n[\n2\n]\n:=\n \nBoole\n[\nFalse\n]\n\n\nOut\n[\n2\n]\n=\n \n0", 
            "title": "Boole "
        }, 
        {
            "location": "/builtin/boolean/boole/#boole", 
            "text": "Boole[e]  returns 0 if  e  is False and 1 if  e  is True.  Attributes[Boole] := {Listable, Protected}", 
            "title": "Boole"
        }, 
        {
            "location": "/builtin/boolean/boole/#simple-examples", 
            "text": "In [ 1 ] :=   Boole [ True ]  Out [ 1 ] =   1   In [ 2 ] :=   Boole [ False ]  Out [ 2 ] =   0", 
            "title": "Simple examples"
        }, 
        {
            "location": "/builtin/simplify/", 
            "text": "simplify documentation\n\n\nSimplify", 
            "title": "simplify"
        }, 
        {
            "location": "/builtin/simplify/#simplify-documentation", 
            "text": "Simplify", 
            "title": "simplify documentation"
        }, 
        {
            "location": "/builtin/simplify/simplify/", 
            "text": "Simplify\n\n\nSimplify[expr]\n attempts to perform simplification operations on \nexpr\n.\n\n\nAttributes[Simplify] := {Protected}\n\n\nSimple examples\n\n\nSimplify\n can simplify some boolean expressions.\n\n\nIn\n[\n1\n]\n:=\n \nSimplify\n[(\nb\n \n \nb\n)]\n\n\nOut\n[\n1\n]\n=\n \nb\n\n\n\n\n\n\nIn\n[\n2\n]\n:=\n \nSimplify\n[(\na\n \n \nb\n \n \nNot\n[\nb\n])]\n\n\nOut\n[\n2\n]\n=\n \nFalse\n\n\n\n\n\n\nIn\n[\n3\n]\n:=\n \nSimplify\n[((\na\n \n||\n \nb\n)\n \n \n(\na\n \n||\n \nc\n))]\n\n\nOut\n[\n3\n]\n=\n \n(\na\n \n||\n \n(\nb\n \n \nc\n))\n\n\n\n\n\n\nIn\n[\n4\n]\n:=\n \nSimplify\n[(\na\n \n||\n \n(\nNot\n[\na\n]\n \n \nb\n))]\n\n\nOut\n[\n4\n]\n=\n \n(\na\n \n||\n \nb\n)\n\n\n\n\n\n\nIn\n[\n5\n]\n:=\n \nSimplify\n[(\na\n \n||\n \nb\n \n||\n \nNot\n[\na\n]\n \n||\n \nNot\n[\nb\n])]\n\n\nOut\n[\n5\n]\n=\n \nTrue", 
            "title": "Simplify "
        }, 
        {
            "location": "/builtin/simplify/simplify/#simplify", 
            "text": "Simplify[expr]  attempts to perform simplification operations on  expr .  Attributes[Simplify] := {Protected}", 
            "title": "Simplify"
        }, 
        {
            "location": "/builtin/simplify/simplify/#simple-examples", 
            "text": "Simplify  can simplify some boolean expressions.  In [ 1 ] :=   Simplify [( b     b )]  Out [ 1 ] =   b   In [ 2 ] :=   Simplify [( a     b     Not [ b ])]  Out [ 2 ] =   False   In [ 3 ] :=   Simplify [(( a   ||   b )     ( a   ||   c ))]  Out [ 3 ] =   ( a   ||   ( b     c ))   In [ 4 ] :=   Simplify [( a   ||   ( Not [ a ]     b ))]  Out [ 4 ] =   ( a   ||   b )   In [ 5 ] :=   Simplify [( a   ||   b   ||   Not [ a ]   ||   Not [ b ])]  Out [ 5 ] =   True", 
            "title": "Simple examples"
        }, 
        {
            "location": "/builtin/numbertheory/", 
            "text": "numbertheory documentation\n\n\nPrimeQ\n\n\nGCD\n\n\nLCM\n\n\nMod\n\n\nEvenQ\n\n\nOddQ", 
            "title": "numbertheory"
        }, 
        {
            "location": "/builtin/numbertheory/#numbertheory-documentation", 
            "text": "PrimeQ  GCD  LCM  Mod  EvenQ  OddQ", 
            "title": "numbertheory documentation"
        }, 
        {
            "location": "/builtin/numbertheory/primeq/", 
            "text": "PrimeQ\n\n\nPrimeQ[n]\n returns True if \nn\n is prime, False otherwise.\n\n\nAttributes[PrimeQ] := {Listable, Protected}\n\n\nSimple examples\n\n\nIn\n[\n1\n]\n:=\n \nPrimeQ\n[\n5\n]\n\n\nOut\n[\n1\n]\n=\n \nTrue\n\n\n\n\n\n\nIn\n[\n2\n]\n:=\n \nPrimeQ\n[\n100\n]\n\n\nOut\n[\n2\n]\n=\n \nFalse\n\n\n\n\n\n\nIn\n[\n3\n]\n:=\n \nPrimeQ\n[\n982451653\n]\n\n\nOut\n[\n3\n]\n=\n \nTrue\n\n\n\n\n\n\nIn\n[\n4\n]\n:=\n \nPrimeQ\n[\n-\n2\n]\n\n\nOut\n[\n4\n]\n=\n \nTrue\n\n\n\n\n\n\nFurther examples\n\n\nPrimeQ\n only works for Integers:\n\n\nIn\n[\n1\n]\n:=\n \nPrimeQ\n[\n5.\n]\n\n\nOut\n[\n1\n]\n=\n \nFalse", 
            "title": "PrimeQ "
        }, 
        {
            "location": "/builtin/numbertheory/primeq/#primeq", 
            "text": "PrimeQ[n]  returns True if  n  is prime, False otherwise.  Attributes[PrimeQ] := {Listable, Protected}", 
            "title": "PrimeQ"
        }, 
        {
            "location": "/builtin/numbertheory/primeq/#simple-examples", 
            "text": "In [ 1 ] :=   PrimeQ [ 5 ]  Out [ 1 ] =   True   In [ 2 ] :=   PrimeQ [ 100 ]  Out [ 2 ] =   False   In [ 3 ] :=   PrimeQ [ 982451653 ]  Out [ 3 ] =   True   In [ 4 ] :=   PrimeQ [ - 2 ]  Out [ 4 ] =   True", 
            "title": "Simple examples"
        }, 
        {
            "location": "/builtin/numbertheory/primeq/#further-examples", 
            "text": "PrimeQ  only works for Integers:  In [ 1 ] :=   PrimeQ [ 5. ]  Out [ 1 ] =   False", 
            "title": "Further examples"
        }, 
        {
            "location": "/builtin/numbertheory/gcd/", 
            "text": "GCD\n\n\nGCD[n1, n2, ...]\n finds the greatest common denominator of the integer inputs.\n\n\nAttributes[GCD] := {Flat, Listable, OneIdentity, Orderless, Protected}\n\n\nSimple examples\n\n\nIn\n[\n1\n]\n:=\n \nGCD\n[\n9\n,\n \n6\n]\n\n\nOut\n[\n1\n]\n=\n \n3\n\n\n\n\n\n\nIn\n[\n2\n]\n:=\n \nGCD\n[\n100\n,\n \n30\n,\n \n15\n]\n\n\nOut\n[\n2\n]\n=\n \n5", 
            "title": "GCD "
        }, 
        {
            "location": "/builtin/numbertheory/gcd/#gcd", 
            "text": "GCD[n1, n2, ...]  finds the greatest common denominator of the integer inputs.  Attributes[GCD] := {Flat, Listable, OneIdentity, Orderless, Protected}", 
            "title": "GCD"
        }, 
        {
            "location": "/builtin/numbertheory/gcd/#simple-examples", 
            "text": "In [ 1 ] :=   GCD [ 9 ,   6 ]  Out [ 1 ] =   3   In [ 2 ] :=   GCD [ 100 ,   30 ,   15 ]  Out [ 2 ] =   5", 
            "title": "Simple examples"
        }, 
        {
            "location": "/builtin/numbertheory/lcm/", 
            "text": "LCM\n\n\nLCM[n1, n2, ...]\n finds the least common multiple of the inputs.\n\n\nAttributes[LCM] := {Flat, Listable, OneIdentity, Orderless, Protected}\n\n\nSimple examples\n\n\nIn\n[\n1\n]\n:=\n \nLCM\n[\n5\n,\n \n14\n]\n\n\nOut\n[\n1\n]\n=\n \n70\n\n\n\n\n\n\nIn\n[\n2\n]\n:=\n \nLCM\n[\n5\n,\n \n14\n,\n \n68\n]\n\n\nOut\n[\n2\n]\n=\n \n2380\n\n\n\n\n\n\nIn\n[\n3\n]\n:=\n \nLCM\n[(\n2\n \n*\n \n3\n^-\n1\n),\n \n(\n1\n \n*\n \n3\n^-\n1\n)]\n\n\nOut\n[\n3\n]\n=\n \n(\n2\n \n*\n \n3\n^-\n1\n)\n\n\n\n\n\n\nIn\n[\n4\n]\n:=\n \nLCM\n[(\n2\n \n*\n \n3\n^-\n1\n),\n \n(\n1\n \n*\n \n3\n^-\n1\n),\n \n(\n5\n \n*\n \n6\n^-\n1\n)]\n\n\nOut\n[\n4\n]\n=\n \n(\n10\n \n*\n \n3\n^-\n1\n)\n\n\n\n\n\n\nIn\n[\n5\n]\n:=\n \nLCM\n[(\n2\n \n*\n \n3\n^-\n1\n),\n \n(\n1\n \n*\n \n3\n^-\n1\n),\n \n(\n5\n \n*\n \n6\n^-\n1\n),\n \n3\n]\n\n\nOut\n[\n5\n]\n=\n \n30\n\n\n\n\n\n\nIn\n[\n6\n]\n:=\n \nLCM\n[(\n2\n \n*\n \n3\n^-\n1\n),\n \n{(\n1\n \n*\n \n3\n^-\n1\n),\n \n(\n5\n \n*\n \n6\n^-\n1\n),\n \n3\n}]\n\n\nOut\n[\n6\n]\n=\n \n{(\n2\n \n*\n \n3\n^-\n1\n),\n \n(\n10\n \n*\n \n3\n^-\n1\n),\n \n6\n}", 
            "title": "LCM "
        }, 
        {
            "location": "/builtin/numbertheory/lcm/#lcm", 
            "text": "LCM[n1, n2, ...]  finds the least common multiple of the inputs.  Attributes[LCM] := {Flat, Listable, OneIdentity, Orderless, Protected}", 
            "title": "LCM"
        }, 
        {
            "location": "/builtin/numbertheory/lcm/#simple-examples", 
            "text": "In [ 1 ] :=   LCM [ 5 ,   14 ]  Out [ 1 ] =   70   In [ 2 ] :=   LCM [ 5 ,   14 ,   68 ]  Out [ 2 ] =   2380   In [ 3 ] :=   LCM [( 2   *   3 ^- 1 ),   ( 1   *   3 ^- 1 )]  Out [ 3 ] =   ( 2   *   3 ^- 1 )   In [ 4 ] :=   LCM [( 2   *   3 ^- 1 ),   ( 1   *   3 ^- 1 ),   ( 5   *   6 ^- 1 )]  Out [ 4 ] =   ( 10   *   3 ^- 1 )   In [ 5 ] :=   LCM [( 2   *   3 ^- 1 ),   ( 1   *   3 ^- 1 ),   ( 5   *   6 ^- 1 ),   3 ]  Out [ 5 ] =   30   In [ 6 ] :=   LCM [( 2   *   3 ^- 1 ),   {( 1   *   3 ^- 1 ),   ( 5   *   6 ^- 1 ),   3 }]  Out [ 6 ] =   {( 2   *   3 ^- 1 ),   ( 10   *   3 ^- 1 ),   6 }", 
            "title": "Simple examples"
        }, 
        {
            "location": "/builtin/numbertheory/mod/", 
            "text": "Mod\n\n\nMod[x, y]\n finds the remainder when \nx\n is divided by \ny\n.\n\n\nAttributes[Mod] := {Listable, NumericFunction, Protected, ReadProtected}\n\n\nSimple examples\n\n\nIn\n[\n1\n]\n:=\n \nMod\n[\n5\n,\n \n3\n]\n\n\nOut\n[\n1\n]\n=\n \n2\n\n\n\n\n\n\nIn\n[\n2\n]\n:=\n \nMod\n[\n0\n,\n \n3\n]\n\n\nOut\n[\n2\n]\n=\n \n0\n\n\n\n\n\n\nIn\n[\n3\n]\n:=\n \nMod\n[\n2\n,\n \n0\n]\n\n\nOut\n[\n3\n]\n=\n \nIndeterminate\n\n\n\n\n\n\nIn\n[\n4\n]\n:=\n \nMod\n[((\n2\n \n*\n \nPi\n)\n \n*\n \n-\n1\n),\n \n(\n3\n \n*\n \nPi\n)]\n\n\nOut\n[\n4\n]\n=\n \nPi", 
            "title": "Mod "
        }, 
        {
            "location": "/builtin/numbertheory/mod/#mod", 
            "text": "Mod[x, y]  finds the remainder when  x  is divided by  y .  Attributes[Mod] := {Listable, NumericFunction, Protected, ReadProtected}", 
            "title": "Mod"
        }, 
        {
            "location": "/builtin/numbertheory/mod/#simple-examples", 
            "text": "In [ 1 ] :=   Mod [ 5 ,   3 ]  Out [ 1 ] =   2   In [ 2 ] :=   Mod [ 0 ,   3 ]  Out [ 2 ] =   0   In [ 3 ] :=   Mod [ 2 ,   0 ]  Out [ 3 ] =   Indeterminate   In [ 4 ] :=   Mod [(( 2   *   Pi )   *   - 1 ),   ( 3   *   Pi )]  Out [ 4 ] =   Pi", 
            "title": "Simple examples"
        }, 
        {
            "location": "/builtin/numbertheory/evenq/", 
            "text": "EvenQ\n\n\nEvenQ[n]\n returns True if \nn\n is an even integer.\n\n\nAttributes[EvenQ] := {Listable, Protected}\n\n\nSimple examples\n\n\nIn\n[\n1\n]\n:=\n \nEvenQ\n[\n6\n]\n\n\nOut\n[\n1\n]\n=\n \nTrue\n\n\n\n\n\n\nIn\n[\n2\n]\n:=\n \nEvenQ\n[\n-\n2\n]\n\n\nOut\n[\n2\n]\n=\n \nTrue\n\n\n\n\n\n\nIn\n[\n3\n]\n:=\n \nEvenQ\n[\n1\n]\n\n\nOut\n[\n3\n]\n=\n \nFalse\n\n\n\n\n\n\nIn\n[\n4\n]\n:=\n \nEvenQ\n[\n2.\n]\n\n\nOut\n[\n4\n]\n=\n \nEvenQ\n[\n2.\n]\n\n\n\n\n\n\nIn\n[\n5\n]\n:=\n \nEvenQ\n[\na\n]\n\n\nOut\n[\n5\n]\n=\n \nEvenQ\n[\na\n]", 
            "title": "EvenQ "
        }, 
        {
            "location": "/builtin/numbertheory/evenq/#evenq", 
            "text": "EvenQ[n]  returns True if  n  is an even integer.  Attributes[EvenQ] := {Listable, Protected}", 
            "title": "EvenQ"
        }, 
        {
            "location": "/builtin/numbertheory/evenq/#simple-examples", 
            "text": "In [ 1 ] :=   EvenQ [ 6 ]  Out [ 1 ] =   True   In [ 2 ] :=   EvenQ [ - 2 ]  Out [ 2 ] =   True   In [ 3 ] :=   EvenQ [ 1 ]  Out [ 3 ] =   False   In [ 4 ] :=   EvenQ [ 2. ]  Out [ 4 ] =   EvenQ [ 2. ]   In [ 5 ] :=   EvenQ [ a ]  Out [ 5 ] =   EvenQ [ a ]", 
            "title": "Simple examples"
        }, 
        {
            "location": "/builtin/numbertheory/oddq/", 
            "text": "OddQ\n\n\nOddQ[n]\n returns True if \nn\n is an odd integer.\n\n\nAttributes[OddQ] := {Listable, Protected}\n\n\nSimple examples\n\n\nIn\n[\n1\n]\n:=\n \nOddQ\n[\n6\n]\n\n\nOut\n[\n1\n]\n=\n \nFalse\n\n\n\n\n\n\nIn\n[\n2\n]\n:=\n \nOddQ\n[\n-\n2\n]\n\n\nOut\n[\n2\n]\n=\n \nFalse\n\n\n\n\n\n\nIn\n[\n3\n]\n:=\n \nOddQ\n[\n1\n]\n\n\nOut\n[\n3\n]\n=\n \nTrue\n\n\n\n\n\n\nIn\n[\n4\n]\n:=\n \nOddQ\n[\n2.\n]\n\n\nOut\n[\n4\n]\n=\n \nOddQ\n[\n2.\n]\n\n\n\n\n\n\nIn\n[\n5\n]\n:=\n \nOddQ\n[\na\n]\n\n\nOut\n[\n5\n]\n=\n \nOddQ\n[\na\n]", 
            "title": "OddQ "
        }, 
        {
            "location": "/builtin/numbertheory/oddq/#oddq", 
            "text": "OddQ[n]  returns True if  n  is an odd integer.  Attributes[OddQ] := {Listable, Protected}", 
            "title": "OddQ"
        }, 
        {
            "location": "/builtin/numbertheory/oddq/#simple-examples", 
            "text": "In [ 1 ] :=   OddQ [ 6 ]  Out [ 1 ] =   False   In [ 2 ] :=   OddQ [ - 2 ]  Out [ 2 ] =   False   In [ 3 ] :=   OddQ [ 1 ]  Out [ 3 ] =   True   In [ 4 ] :=   OddQ [ 2. ]  Out [ 4 ] =   OddQ [ 2. ]   In [ 5 ] :=   OddQ [ a ]  Out [ 5 ] =   OddQ [ a ]", 
            "title": "Simple examples"
        }, 
        {
            "location": "/builtin/manip/", 
            "text": "manip documentation\n\n\nTogether\n\n\nDistribute", 
            "title": "manip"
        }, 
        {
            "location": "/builtin/manip/#manip-documentation", 
            "text": "Together  Distribute", 
            "title": "manip documentation"
        }, 
        {
            "location": "/builtin/manip/together/", 
            "text": "Together\n\n\nTogether[e]\n attempts to put the terms in \ne\n under the same denominator.\n\n\nAttributes[Together] := {Listable, Protected}\n\n\nSimple examples\n\n\nIn\n[\n1\n]\n:=\n \nTogether\n[((\n1\n \n*\n \n2\n^-\n1\n)\n \n+\n \n(\n3\n \n*\n \na\n^-\n1\n))]\n\n\nOut\n[\n1\n]\n=\n \n((\n6\n \n+\n \na\n)\n \n*\n \n(\n2\n \n*\n \na\n)\n^-\n1\n)\n\n\n\n\n\n\nIn\n[\n2\n]\n:=\n \nTogether\n[((\n1\n \n*\n \n2\n^-\n1\n)\n \n+\n \n(\n3\n \n*\n \na\n^-\n1\n))\n^\nc\n]\n\n\nOut\n[\n2\n]\n=\n \n((\n1\n \n*\n \n2\n^-\n1\n)\n \n+\n \n(\n3\n \n*\n \na\n^-\n1\n))\n^\nc\n\n\n\n\n\n\nIn\n[\n3\n]\n:=\n \nTogether\n[((\n1\n \n*\n \n2\n^-\n1\n)\n \n+\n \n(\n3\n \n*\n \na\n^-\n1\n))\n^\n2\n]\n\n\nOut\n[\n3\n]\n=\n \n((\n6\n \n+\n \na\n)\n^\n2\n \n*\n \n(\n4\n \n*\n \na\n^\n2\n)\n^-\n1\n)", 
            "title": "Together "
        }, 
        {
            "location": "/builtin/manip/together/#together", 
            "text": "Together[e]  attempts to put the terms in  e  under the same denominator.  Attributes[Together] := {Listable, Protected}", 
            "title": "Together"
        }, 
        {
            "location": "/builtin/manip/together/#simple-examples", 
            "text": "In [ 1 ] :=   Together [(( 1   *   2 ^- 1 )   +   ( 3   *   a ^- 1 ))]  Out [ 1 ] =   (( 6   +   a )   *   ( 2   *   a ) ^- 1 )   In [ 2 ] :=   Together [(( 1   *   2 ^- 1 )   +   ( 3   *   a ^- 1 )) ^ c ]  Out [ 2 ] =   (( 1   *   2 ^- 1 )   +   ( 3   *   a ^- 1 )) ^ c   In [ 3 ] :=   Together [(( 1   *   2 ^- 1 )   +   ( 3   *   a ^- 1 )) ^ 2 ]  Out [ 3 ] =   (( 6   +   a ) ^ 2   *   ( 4   *   a ^ 2 ) ^- 1 )", 
            "title": "Simple examples"
        }, 
        {
            "location": "/builtin/manip/distribute/", 
            "text": "Distribute\n\n\nDistribute[e]\n distributes the function over the \nPlus\n expressions.\n\n\nAttributes[Distribute] := {Protected}\n\n\nSimple examples\n\n\nIn\n[\n1\n]\n:=\n \nDistribute\n[((\na\n \n+\n \nb\n)\n \n*\n \n(\nc\n \n+\n \nd\n))]\n\n\nOut\n[\n1\n]\n=\n \n((\na\n \n*\n \nc\n)\n \n+\n \n(\nb\n \n*\n \nc\n)\n \n+\n \n(\na\n \n*\n \nd\n)\n \n+\n \n(\nb\n \n*\n \nd\n))\n\n\n\n\n\n\nIn\n[\n2\n]\n:=\n \nDistribute\n[((\na\n \n+\n \nb\n)\n \n*\n \nc\n)]\n\n\nOut\n[\n2\n]\n=\n \n((\na\n \n*\n \nc\n)\n \n+\n \n(\nb\n \n*\n \nc\n))\n\n\n\n\n\n\nIn\n[\n3\n]\n:=\n \nDistribute\n[\nfoo\n[(\na\n \n+\n \nb\n),\n \nc\n]]\n\n\nOut\n[\n3\n]\n=\n \n(\nfoo\n[\na\n,\n \nc\n]\n \n+\n \nfoo\n[\nb\n,\n \nc\n])\n\n\n\n\n\n\nIn\n[\n4\n]\n:=\n \nDistribute\n[\nfoo\n[\na\n,\n \nb\n]]\n\n\nOut\n[\n4\n]\n=\n \nfoo\n[\na\n,\n \nb\n]\n\n\n\n\n\n\nIn\n[\n5\n]\n:=\n \nDistribute\n[(\nfoo\n[\na\n,\n \nb\n]\n \n+\n \nfoo\n[\nc\n])]\n\n\nOut\n[\n5\n]\n=\n \n(\nfoo\n[\nc\n]\n \n+\n \nfoo\n[\na\n,\n \nb\n])\n\n\n\n\n\n\nIn\n[\n6\n]\n:=\n \nDistribute\n[(((\na\n \n+\n \nb\n)\n \n*\n \nc\n)\n \n+\n \na\n)]\n\n\nOut\n[\n6\n]\n=\n \n(\na\n \n+\n \n((\na\n \n+\n \nb\n)\n \n*\n \nc\n))\n\n\n\n\n\n\nIn\n[\n7\n]\n:=\n \nDistribute\n[((((\na\n \n+\n \nb\n)\n \n*\n \nc\n)\n \n+\n \nd\n)\n \n*\n \n(\ne\n \n+\n \nf\n))]\n\n\nOut\n[\n7\n]\n=\n \n(((\na\n \n+\n \nb\n)\n \n*\n \nc\n \n*\n \ne\n)\n \n+\n \n(\nd\n \n*\n \ne\n)\n \n+\n \n((\na\n \n+\n \nb\n)\n \n*\n \nc\n \n*\n \nf\n)\n \n+\n \n(\nd\n \n*\n \nf\n))\n\n\n\n\n\n\nIn\n[\n8\n]\n:=\n \nDistribute\n[\nfoo\n[\na\n,\n \nb\n],\n \ntest\n]\n\n\nOut\n[\n8\n]\n=\n \ntest\n[\nfoo\n[\na\n,\n \nb\n]]\n\n\n\n\n\n\nIn\n[\n9\n]\n:=\n \nDistribute\n[\nfoo\n[\na\n,\n \ntest\n[\nb\n,\n \nc\n]],\n \ntest\n]\n\n\nOut\n[\n9\n]\n=\n \ntest\n[\nfoo\n[\na\n,\n \nb\n],\n \nfoo\n[\na\n,\n \nc\n]]\n\n\n\n\n\n\nIn\n[\n10\n]\n:=\n \nDistribute\n[\nfoo\n[\na\n,\n \ntest\n[\nb\n,\n \nc\n],\n \ntest\n[\nd\n,\n \ne\n]],\n \ntest\n]\n\n\nOut\n[\n10\n]\n=\n \ntest\n[\nfoo\n[\na\n,\n \nb\n,\n \nd\n],\n \nfoo\n[\na\n,\n \nb\n,\n \ne\n],\n \nfoo\n[\na\n,\n \nc\n,\n \nd\n],\n \nfoo\n[\na\n,\n \nc\n,\n \ne\n]]\n\n\n\n\n\n\nIn\n[\n11\n]\n:=\n \nDistribute\n[\nfoo\n[\na\n,\n \ntest\n[\nb\n,\n \nc\n],\n \ntest\n[\nd\n,\n \ne\n],\n \nbar\n[\na\n]],\n \ntest\n]\n\n\nOut\n[\n11\n]\n=\n \ntest\n[\nfoo\n[\na\n,\n \nb\n,\n \nd\n,\n \nbar\n[\na\n]],\n \nfoo\n[\na\n,\n \nb\n,\n \ne\n,\n \nbar\n[\na\n]],\n \nfoo\n[\na\n,\n \nc\n,\n \nd\n,\n \nbar\n[\na\n]],\n \nfoo\n[\na\n,\n \nc\n,\n \ne\n,\n \nbar\n[\na\n]]]\n\n\n\n\n\n\nIn\n[\n12\n]\n:=\n \nDistribute\n[\na\n,\n \ntest\n]\n\n\nOut\n[\n12\n]\n=\n \na\n\n\n\n\n\n\nIn\n[\n13\n]\n:=\n \nDistribute\n[(\na\n \n+\n \nb\n),\n \n1\n]\n\n\nOut\n[\n13\n]\n=\n \n1\n[(\na\n \n+\n \nb\n)]\n\n\n\n\n\n\nIn\n[\n14\n]\n:=\n \nDistribute\n[\nbar\n[\na\n,\n \ntest\n[\nb\n,\n \nc\n],\n \ntest\n[\nd\n,\n \ne\n]],\n \ntest\n]\n\n\nOut\n[\n14\n]\n=\n \ntest\n[\nbar\n[\na\n,\n \nb\n,\n \nd\n],\n \nbar\n[\na\n,\n \nb\n,\n \ne\n],\n \nbar\n[\na\n,\n \nc\n,\n \nd\n],\n \nbar\n[\na\n,\n \nc\n,\n \ne\n]]\n\n\n\n\n\n\nIn\n[\n15\n]\n:=\n \nDistribute\n[\ntest\n[\nf\n,\n \ng\n][\na\n,\n \ntest\n[\nb\n,\n \nc\n],\n \ntest\n[\nd\n,\n \ne\n]],\n \ntest\n]\n\n\nOut\n[\n15\n]\n=\n \ntest\n[\ntest\n[\nf\n,\n \ng\n][\na\n,\n \nb\n,\n \nd\n],\n \ntest\n[\nf\n,\n \ng\n][\na\n,\n \nb\n,\n \ne\n],\n \ntest\n[\nf\n,\n \ng\n][\na\n,\n \nc\n,\n \nd\n],\n \ntest\n[\nf\n,\n \ng\n][\na\n,\n \nc\n,\n \ne\n]]\n\n\n\n\n\n\nIn\n[\n16\n]\n:=\n \nDistribute\n[\nfoo\n[],\n \ntest\n]\n\n\nOut\n[\n16\n]\n=\n \ntest\n[\nfoo\n[]]\n\n\n\n\n\n\nIn\n[\n17\n]\n:=\n \nDistribute\n[\nfoo\n[],\n \ntest\n[]]\n\n\nOut\n[\n17\n]\n=\n \ntest\n[][\nfoo\n[]]\n\n\n\n\n\n\nIn\n[\n18\n]\n:=\n \nDistribute\n[\nfoo\n,\n \ntest\n]\n\n\nOut\n[\n18\n]\n=\n \nfoo\n\n\n\n\n\n\nRules\n\n\nDistribute\n[\ne_\n]\n \n:=\n \nDistribute\n[\ne\n,\n \nPlus\n]", 
            "title": "Distribute "
        }, 
        {
            "location": "/builtin/manip/distribute/#distribute", 
            "text": "Distribute[e]  distributes the function over the  Plus  expressions.  Attributes[Distribute] := {Protected}", 
            "title": "Distribute"
        }, 
        {
            "location": "/builtin/manip/distribute/#simple-examples", 
            "text": "In [ 1 ] :=   Distribute [(( a   +   b )   *   ( c   +   d ))]  Out [ 1 ] =   (( a   *   c )   +   ( b   *   c )   +   ( a   *   d )   +   ( b   *   d ))   In [ 2 ] :=   Distribute [(( a   +   b )   *   c )]  Out [ 2 ] =   (( a   *   c )   +   ( b   *   c ))   In [ 3 ] :=   Distribute [ foo [( a   +   b ),   c ]]  Out [ 3 ] =   ( foo [ a ,   c ]   +   foo [ b ,   c ])   In [ 4 ] :=   Distribute [ foo [ a ,   b ]]  Out [ 4 ] =   foo [ a ,   b ]   In [ 5 ] :=   Distribute [( foo [ a ,   b ]   +   foo [ c ])]  Out [ 5 ] =   ( foo [ c ]   +   foo [ a ,   b ])   In [ 6 ] :=   Distribute [((( a   +   b )   *   c )   +   a )]  Out [ 6 ] =   ( a   +   (( a   +   b )   *   c ))   In [ 7 ] :=   Distribute [(((( a   +   b )   *   c )   +   d )   *   ( e   +   f ))]  Out [ 7 ] =   ((( a   +   b )   *   c   *   e )   +   ( d   *   e )   +   (( a   +   b )   *   c   *   f )   +   ( d   *   f ))   In [ 8 ] :=   Distribute [ foo [ a ,   b ],   test ]  Out [ 8 ] =   test [ foo [ a ,   b ]]   In [ 9 ] :=   Distribute [ foo [ a ,   test [ b ,   c ]],   test ]  Out [ 9 ] =   test [ foo [ a ,   b ],   foo [ a ,   c ]]   In [ 10 ] :=   Distribute [ foo [ a ,   test [ b ,   c ],   test [ d ,   e ]],   test ]  Out [ 10 ] =   test [ foo [ a ,   b ,   d ],   foo [ a ,   b ,   e ],   foo [ a ,   c ,   d ],   foo [ a ,   c ,   e ]]   In [ 11 ] :=   Distribute [ foo [ a ,   test [ b ,   c ],   test [ d ,   e ],   bar [ a ]],   test ]  Out [ 11 ] =   test [ foo [ a ,   b ,   d ,   bar [ a ]],   foo [ a ,   b ,   e ,   bar [ a ]],   foo [ a ,   c ,   d ,   bar [ a ]],   foo [ a ,   c ,   e ,   bar [ a ]]]   In [ 12 ] :=   Distribute [ a ,   test ]  Out [ 12 ] =   a   In [ 13 ] :=   Distribute [( a   +   b ),   1 ]  Out [ 13 ] =   1 [( a   +   b )]   In [ 14 ] :=   Distribute [ bar [ a ,   test [ b ,   c ],   test [ d ,   e ]],   test ]  Out [ 14 ] =   test [ bar [ a ,   b ,   d ],   bar [ a ,   b ,   e ],   bar [ a ,   c ,   d ],   bar [ a ,   c ,   e ]]   In [ 15 ] :=   Distribute [ test [ f ,   g ][ a ,   test [ b ,   c ],   test [ d ,   e ]],   test ]  Out [ 15 ] =   test [ test [ f ,   g ][ a ,   b ,   d ],   test [ f ,   g ][ a ,   b ,   e ],   test [ f ,   g ][ a ,   c ,   d ],   test [ f ,   g ][ a ,   c ,   e ]]   In [ 16 ] :=   Distribute [ foo [],   test ]  Out [ 16 ] =   test [ foo []]   In [ 17 ] :=   Distribute [ foo [],   test []]  Out [ 17 ] =   test [][ foo []]   In [ 18 ] :=   Distribute [ foo ,   test ]  Out [ 18 ] =   foo", 
            "title": "Simple examples"
        }, 
        {
            "location": "/builtin/manip/distribute/#rules", 
            "text": "Distribute [ e_ ]   :=   Distribute [ e ,   Plus ]", 
            "title": "Rules"
        }
    ]
}